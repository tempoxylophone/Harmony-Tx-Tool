{
    "version": 1,
    "interactions": [
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "74"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00b04\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u0089d\u008a82\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x95d89b41\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "87"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00b04\u00d2Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00d4\u00d4\u00cc\u00c4\u00d2\u00d4\u00c0\u00c4\u00d4\u0094L\u00a3\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff5\u0005\u00b5\u009d\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "74"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00b04\u00d6Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00d4B\u00ec\u00a82\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x313ce567\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "71"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00b04\u00d1Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018\u001a)\u00d5r\u0001\u0002\u0000\u0000\u00ff\u00ff\u00c4F\u00e2\u00daj\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "74"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00b04\u00d5Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ffr.7\u00c32\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x06fdde03\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "87"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00b04\u00d3Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00d4\u00d4\u00cc\u00cc\u00d2\u00dc\u00c0\u00cc\u00d4\u009cL\u00a3\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ffn1\u00bb\u00e1\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"coininfo\", \"variables\": {\"token_address\": \"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\"}, \"query\": \"\\n        query coininfo($token_address: ID!)  {\\n            pair(id: $token_address) {\\n                id\\n                __typename\\n                token0 {\\n                  id\\n                  __typename\\n                  symbol\\n                  name\\n                  decimals\\n                  totalSupply\\n                  tradeVolumeUSD\\n                  txCount\\n                  totalLiquidity\\n                  derivedETH\\n                }\\n                token1 {\\n                  id\\n                  __typename\\n                  symbol\\n                  name\\n                  decimals\\n                  totalSupply\\n                  tradeVolumeUSD\\n                  txCount\\n                  totalLiquidity\\n                  derivedETH\\n                }\\n            }\\n            token(id: $token_address) {\\n                id\\n                __typename\\n                symbol\\n                name\\n                decimals\\n                totalSupply\\n                tradeVolumeUSD\\n                txCount\\n                totalLiquidity\\n                derivedETH\\n            }\\n        }\\n        \"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "1276"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "Date": [],
                    "graph-attestable": [
                        "true"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "Content-Length": [
                        "348"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"pair\":null,\"token\":{\"__typename\":\"Token\",\"decimals\":\"18\",\"derivedETH\":\"0.00820017338470884273165027226062821\",\"id\":\"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\",\"name\":\"Viper\",\"symbol\":\"VIPER\",\"totalLiquidity\":\"113852408.613243822050818225\",\"totalSupply\":\"8504\",\"tradeVolumeUSD\":\"367815358.2187682021652393518456515\",\"txCount\":\"3945261\"}}}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionByHash\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "455"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00fft\u0090An\u001b1\fE\u00f7=\u0086\u00d6\u0083B\u00a4$\u008a\u00f2\t\u00daM\u00d1+\u0090\u0014\u00d9\u00b8\u008d\u00ed`l\u0017\u0001\u0082\u00dc\u00bd\u0018O\u00d0]\u00b8\"?\u00f0?\u00f8\u00df[\u00fa}\u00bd\u009c\u00d7\u0017K\u0087\u0084_sZ\u00d2q\u00a6\u0003\u00e4\u00d1\u0097\u00b4\u00fa\u00f5\u00fe|K\u0087\u00b7\u00a4\u00cf\u0017\u00fb\u00f3M\u00aeO\u00e9\u0090\u00f2k\u0007\u000f\u00ed\u00ac-\u0013\u00b7\u0006\b\u0019{\u0094\u00cc\u009ds\fe\fp\u00b0f\u008c^I{\u00abyt\u0088!\u00c1\u00ddh\u00b6Bi\u00d9\u0003\u007f\u00dcO\u00ea\u00eb#\u0012,\u0093\u0015HK\u008a\u00f5rzH\u0094\u00153\u00cd\u0098U\u00821$\u00a6J\u0093(F0f\u00b6\u00ca\u0080C\u008bl\u009e_r\u00ddS\n\u00b9\u00ed\u00f7\u00cf\u00f5h\u00be\u008b\u00bdr'\u00e7\u00bc\u0095{\u00fa\u00df!f)\r\u009b\r\u00c2\u00c6\u0083JXhV\u0095^eJ\u000e\u00d4\u0086Z\u00f3\u00cc \u00bd\u0092\u008f\t\\\u00e7\u0014\u00a2\u0019\u00a4\rc\u0003u~\u00b9\u00df\u001ea2r\u001b\u00a6\u009a?\u0019n^\u00a7L`C\u009e\u00e4\u0015E\n\u00b9#\u0002\u000e\u00cc\u0004\u00b3\u00b76\n\u00c4g\u00fe\u00cf\u00a66*\u0003\u0018k\u008d\u00ba\u00ddiI\u00e7\u00cb\u00f9\u00a37sZ\u00d2\u00fa\u0081\u00b2\u0007\u00a83O@dV\u00e9\u0080f\u0016\u00a6Q\u00da\u00acN1\u00b9X\u00e6\u00e1\u00b3@7)\u00a6e\u00e4\u0091}\u00e0t\u0083\u009e\u0096\u00b4\u0003.\u00e1\u0006\u00cdt\u00b0Rm\u0080\u00c1#wnC\u0098\u00bb9\u00d4\u00ae5J\u00af\u00ea\u00b3X\u00c1\u00a2\u0099\u00a0\u00a9\u0013\u00e4\u001c\u00ac\u008d\u00b6\u008fn\u00c7\u0093_orz\u00d9?C\u00af\u00c0\u00b4\u00e1\u00bc]\u001e\u008aK\u00e3\u00e1\u00a3D\u0000+\b\u0004\u00f8P\u00b1\u00eeQ\u009cI\u0094P\u00e6\u00b4>6\u00c7*\u00e7\u00ab\u00d8\u00edx9\u007f?O\u007f\u00dd\u0013\u00d3\u0092\u00fe>6#\u00b1\u00c1R6A\u009e\u00ef;\u0095\u009c\u00de\u00df\u00bf\u00fc\u000b\u0000\u0000\u00ff\u00ff#\u00d2:\u00c8\u00f5\u0002\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x1c06c31\", false]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "96"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "1160"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0094\u0094\u00bd\u008e$\u00b9\r\u00c7s?F\u00c5\r\u0083\u00e2\u0097\u00c8\r\r\u0007\u000e\u001c\u0018\u0006.:\\@Q\u00d4m\u001b;\u00d3\u008b\u00e9^c\u00ec\u00c3\u00bd\u00bbQ]=s\u00b3\u009bYhT\u00ab(\u00e9\u00cf\u001f)\u00b2~\u00db\u00feu\u00bd<\u00bf|\u00cd\u00ed\u00d3\u0086\u007f\u0086\u00ed\u00b4\u009d\u00e7\u00f6\u00a9\u0081\u00dbi{\u00a9\u00eb\u00b7/\u00b7\u00ed\u00d3o\u00db\u00f3\u00b7\u00a7Q/\u00db\u00a7\r^[\u0082&\u00b5\u00ed\u00b4}\u008e\u00eb\u00e7\u00bb\u00a9\u00b7Z\u00a3\u00db\u0010P\u0013i\u00d8\u0000\u00fb\"\u00b0n\u00b0|\u0018\u00aeV-%\r\u008buta\u00f0\u00de\u0096\u00c7\u00b2\u009e:\u0085t;m_\u00e3\u00a5\u009eo\u007f{Sd\u008d9\u00b0\u0085\u00a5v\u00d1\u00f0\u00e8\u0011\u001e\u00b3\u00a7\u00d3\u00c45\u0015\u00a3i\u000e'i\u00a4\u00d4\u00ad/\u009e\u00040s\u0085e\u00d0\u00a4\u00ed\u00b4=_\u009e\u00b3\u00eeb\u00f0\u00c3\u00d8N\u00db\u00d3\u00f9\u00f5\u00dd\u00d7\u008f\u00cb\u00ff\u00ef\u00d8N\u00db\u00f5s\u00d0O\u00cf\u00f9\u00a5\u00aeG\u008af&\u00cf\u00b2Y\u00d9e\u00f6\u0088a2D\u00fb\u00d0\u00cc\u00c9-&5di\u00c3\u00d9\u00a2s\u00a3\u0005\u00d1\u0018\u00d7d\u0098\u00ec\u00c4};m_.\u00bf^\u00ff\u00f2\u00e5ryz \"\u0000\u00d8G\u00af\u00a1\u0000-\u00f6\u0019\u0002\u00df-\u008d\u001fK\u00ed\u00f1g\u0000\u00fc\u00983\u00c2\u00a1q\u0017a\u00003\u00d0\u00c3\u00d6\u00eef \u0080\u00c7\u0096\u00e3\u0088\u00ed?\u0003\u00dcM\u00ed]\u0088w\u00db\u00fe\u0004\u00f0c\u0003\u00b4]\u00db\u0080\u0081\u00bf\u00c3Ch\u00ef\u00de\u0001\u00f0\u00ce\u008e\u0083\u001eh\u00f8\u0000\u00c5\u001d\u0005\u00df6\u00bd?\u00de@t\u000f\u00d0\u00c8\u00ee\u00d1\u00e0\u00b1\u0094\u00d0>:\u00a2\u008f/x\u00c4g;\u001c\u001c@\u00a6\u001fT\u001b\u00bc\u00a7q\u009f\u00ee\u00de\u001f+v\u008f\u00f7\u0000n\u00d8\u00da\u00db\u00f17I\u00d4\u009d\u00e0\u00bb\u001bx\u007f\u00e1\u00b7l\u00b5?\u00bcX\u00bced\u00bf\u001e{c\u00b6\u00f7S\u00fe\u00e3\u0085\u00e2\u00076yw\u007f\u008c\u00bd\u00c4nq\u00ab\u007f^.\u00b7G\u00c7y\u0087\u00d4l\u009e`]\u00b59\u0082\u00a2\u00e2\u00b0VC\u00b2-2\u0094\u0088F\u00c5$\u00d2\u00adHVB\u00a49v\u00a2U\u00f7\u0016x~tt\u00f5`\u0084\u00e9\u00a3\u0019T\u00ac\u0001>C\b9k\u00e5b\u009d&\u008e\\h\u00dbi\u009b\u00e7\u00b5\u00ce\u00f9\u00ed\u00cb\u00ed?G]n\u00a7\u00ad^o/\u00f1\u00d7\u00b8\u00c5\u00dd\u00b2\u0093\u009e\u00ff{\u00f4]\u00a3\u00e0\u00ed\u00b4\u00fd\u001a\u00d7\u00bf\u009f\u009f\u00ce\u00078'\u000f\u00be\u0007\u00f4k\\\u007f\u00ba\u00d6<\u00c2\u0001)\u00df\u00f7\u00fe\u00fbe\u001dG\u00873\u00d5\u00de#\u00a5\u00de\u0091hfv`\u00e9\u009a\u00d3\n;\u00b2\u001a\u0086\u008865\u00a5\u00f21M\u009a\u0083\u001b\u00f0h\u00aetH\u00fd\u00e3\u00e5r9\u00f4\u00c6\u00deY\u009c#\u0099;\u009b\u00f3\\\u000bz\u00ba\u00c8B\u00acX\b\u00e0\u001d5},\u00ad\u00a9k\u0095\u00f41\n\u0085\u0016\u00cf\u00a8\u00d1\u00d5S\u0082\u00cb\u0086W\u00a1,\u001d\u0085\u00d4}\u00edE\u00e9\u00ae\u00adA\u00f2\u00c05\u000b\u00b0\u00c8f\u0013\u00a96\u00b9|\u0095#\u008d\u00d5\u0010\u00d2\u00baE\u0086\u00ac\u00c1V\u00d4;\u00ca\u00c4A\u008e\u00d0M\u00fb\u00d2R^\u00c6\u0019\u00ee\u0019s\u00c1\u001am\u008d>K\u00c9\u00123a\u008f\u00e7v~\u00aa\u00eb-\u009e\u00be\u00de\u0003R,n\u00a6k_x\u0089\u00e7k\u00e4\u00ed|y\u00be\u00be\u0017H\u0089\u00d4\u0094\u0086\u00a8\u00842\u0003\u001c{b\u00ce2IL\u001eb\u00cb]\u00c2\\\u0099\u00d6\u00ee\u00bf\u0012\u008c\t\u0091F\u008a8\u00ee\u009f\u00a0\u0097\u00ca:\u007f\u00bd\u00fd\u00a1\u0099\u00d4e\ra\u00c9\u00a25\u00d1\n\u0006!4c\"\u0013\u009a{t\u00e5\u0093K\u0098hT\u00a9y\u0096\u008en\u00de\u00e7h<d;m\u00df\u001e\u001f\u00c9\u009f\u007f\u00f9\u009e{\u00fb\u00f4\u00f3\u0006\u00afH(\u0005\u0080\u0094\u008d9bx6ma\u00cb\u00b51&I\n5\u009d\u00c49\u00d4a\u00b1\u0099\u00ed\u0085O\u00ce\u00c9\u00cc4c;m\u00f0\u00ba,<V\u00cc\u00fd\u00ea\u001c&EO\u00e2\fq.&HR\u009c\u00b3\u0001\u00ea,4\u00ed\u00da:*\u008b@\u00ed\u00ddQ\fv\u0017ib\u00be\u00c8A\u0018\u008d\u00076\u00e4\u0098D\u00de\u0001U2\u00c5{\u0087\u0088\\\u00ad/\"2\r\u0099\u008e\ne63m\u00d08H\u00fa\u00c25\u00c5\u00da\u00ec\u00c3xg\u009e\u00e2\u00e4}\u00e0l\u001d\f\u0087\u00a3Q\u0090wQ\u009dL\u0083\u001b\u008e\u00c5$\u0004\u00c3\u0087\u00ca!BJ\u0013\u0086\u0084\u0094v2\u00ec\u00dc\u001c5\u00b4|\u0081,\u00ac5y\u00a8\u00c6^\u00c4s\u0089\u00af\u00e6\u00d3\u0091\u00d4\u00db\u0092\u00d1]\u00f9\u00c8\t\u00f9\u00e0.\u0085PS\u00cb\u0006u\"\u0081\u0004[\u000e\u00d6d\u00d4\f\u00c1\u0001lS\u001a-,\u00f4\u0001c\u008e\u00e5\u00e0\u001c\u0015x\u0090\u00f45\u0089\u0004%]Q\u00cc\u0095V\u00ae\u0001cD\u00e7\u0098\u0001\u000b\u0087\u00e0`\u0098\u00d0\u00a2\u00b3\u0096\u00cff<g\u00a8\u00ce\u00a5Cp\u00ddE8x\u00cc\u00bdEcD\u008bT\u0095^kH\u0086\u0011At\u00e6\u00b44)\u009d\u0084\u00d6U&\u00c5j{\u00cb\u00f2\u009ccE\u00c6\u00f6\u00cb\u00ef\u00bf\u00ff\u00e9\u007f\u0001\u0000\u0000\u00ff\u00ff\u001b\u00c2\u00be\u00f1\u00b4\b\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Transfer-Encoding": [
                        "chunked"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00e4|\u00e9\u008e\u00ec\u00bcq\u00f6\u00ff\u00ef2\u00ceo\u00e3C-\u00ac\"\u00e9\u00bb\u00e1\n$\b\u0092\u00c0N\u0080\u0000A\u00ee=(\u0092\u00ea\u0096\u00ba\u00a7O\u00af3o\u00e0w\u00ecc\u00b7(\u0089K\u00ed\u00f5\u0014\u00a9\u00ff\u00fe\u00f5\u00cf\u007f\u00ff\u00b7\u007f\u00fd\u00db\u00bf\u0097_\u007f\u00fdE\u00ff\u001f~\u00fd\u00e5\u00d7?\u00d5_\u007fE\u0088\u00f1/\u00bf\u00fe\u00d6\u00fe\u00fe\u009f\u00ff\u00f2\u001f\u00bf\u00fe\u00fa\u000b\u00feK!\u0080\u0082\u0003!v\u0001P\u0014\u0001\u0010\u00c4+\u0000\u0004\u00e8U\u00b2\u0080\u00028V\u0004E`Z\u00f7X\u0014\u001a`\t\u00a0\u00ec[i\u00b9\u0001 *\u0002&/\u00deZ\u000b\u0007a.:Z\u00a1\u00b5\u00d9\u00da4S\u00cf.\u00cd\u00d6\u00b8\u009e\u00ed\u00d4k\u00e3\u0090g\u00ab\u00c7\u008bV\u00a7\b)\u00bb\u00d5\u001a$\u0007\u0097\u00dclm[\u000f\u0095+\u00f9\u001cVk\u0017\u00bff\u00ab\u0092\u000f\u00e3\u008e\u00fbN\u00d6l|br\u00b5\u00ac\u00d6\u00ba\u00faB$\u00df\u00ea\u00eaK\u00e4\u00b2\u00af\u00d2\u00b10\u00eaZC\tk\u00bd[\u00ab\u00bd\u0015\u00e3Zo\u00adJ\u00adr\u009b\u00adu\u00ad\u00ac\u00b9\"\u00bd;\u009d#@\u00b9\u001aa\u00a3\u00ddx\u008bd\u00a3h\u00a9I\bf\u00ab\u00a3\u00d5\u009a\u00a4\u00f8\u001cq\u008d\u00ab\u0097}%N\u00be\u00f9\u00ce\u0093;\u0002\u00f3\u00ad\u0014Ab\u00c9\u0093\u00e2H\u00e9\u00a2\u00d5\u00fa\nAgkvYZ\u0012?[s_\u00ad\u0011\u0003*\u00ceqC\u00a7\u009b\u00e3\u008e\u00fb\u00b8f\u009b\u009c\u00f8Bu\u00f5\u00b5\u00f1!i\u00ac\u00dde\u0099\u00ad\u00be]\u00f6\u0015Z\u00f0\u00d2pR\u001c\u00c3\u00a2\u00e2\u00a9\u00d5\u00de\u00f2}\u00ad!\u00b2\u0084HKj\u0002\u00acq\u00a3\u00d4\u0010\u00b3[\u00b3\u0085t9\u00c2I\u0086G_\u00a1\u00ac\u0011b\u00a2\u00a0~\u00ca\u0087\u00dfV\u001ej\u0092\u0092%\u00afq\u00afV\u00ee\u0080\u009d\u0016\u0017\u00c7lI\u00f3|K\n\u00c6\u0014\u00a5\u00ccV\\\u00d2\u00ec!A \u00c6\u00b9\u00b2MKN\u00adc\u0004\\\u0012\u00e6Q\u0000C\u009aR\u00e1\u00dd\u00ea\u00d7\u0007\u00aa\u00da\u00dbzV\u00f8r6\u00a7q\u00ed\u00be\u00c6E;\u00d5^\u0088\u00fd\\\u0083\u00965\u001b\u00ed\u00a5\u00f7\u00eed\u00b5^\u00c9\u00a5\u00cb\u00d0\u001a\u00d0\u00e4\u0003m\u00dc;\u00b5\u00da[R\u0016\u0095$\u00f8R\u001bN\u00c9\u00d7\u008d\u000f\u0092\u009cV^\u009cV\u00b9\u00e2\u00f4\u0089v\u00a3/\u00b7$\u00d0AA\u00e8\u00b8Z\u0095Wk\u0090\u00eak\u009c\u0096@\u00e2\u00d5l\u0089s\u00f0T\u00eb\u009cmY\u00da\u00cd\"\u00e4][k\u00d8\u00ac\u00d5\u00a9\u00d5\u00far}{6\nD\u0096I[\u0081\u00b5^N\u0098R\u00e3\u00b9\u0006\u00e1\u00ab5\u009c\u00c6\u001d}m\u00b3\u00a5@\u0095{\u00ed\u00b35\u00ad\u00951ri\u00a2S\u001f\\\u00bd\u00b2[\u00a6cP\u00b75\u00f4%\u001f\u00a7\u00d6\u00f1\u0016\u00acV\u0002\u00ca\u00e8u\u00ca\u00b0\u00a3\u00b0\u00b5*h\u00f6\u00abU\u00f2\u00e5\b\u00a0\u00bd\u00d6\u0006SOy\u00b35\u0010\u00a5%\u009fWkZ\u00dc\u0083\u0092)H\u00a3\u00d9jVV\u00f2\u00d9S\u008c\u00f7\u00abY\u00b4\u00ee\u00adw\u00f3+\u0001\u0004\u0015\b\u0002\u0004\u0012\n,\u001800\u00e0\u00fc\u001d1R\u00e0H\u0011\u00ac-b\u0010\u00c0h\u00cfr`\u00ebWr\u00e0\u00808\u00fd\u0012\u00ab\u00f1\n\u0083]b\u00e0@\u00d6\u008b\u00f5\rF\u001bv\u00dd\u00c6\u0014\u0098\u00ff\u0089\u00e3\u009f=\u001bA\u0001;\u00ea\u00f2n\u001c\u0087\u00ac\u0007\u0002\u009es\u0003\u00b4\u00b1\b\u00c0\\\u001c\u0002@\u0002\u00c6\u0088\u001aN\u00bdG\u00b3\u009aY\u00cc\u0010\u008f\u00be\u0087\u00bf\u00c4\u0000\u00d1z\u0083\u00ces\u00e5\u00d5(\u00e1\u0002\u00b0\u00da\u007f\u001d\u009c\u00e7\u009d\u00c3\u00d1\u009fz\u00ee\u000f\u00fe\u0005dA\u00b5\u0015\u00d8<\u00d8z\u00cb)\u00efi\u001b\u0011\u0005\u00c5h+F9\u008c\u00b6\u008e9\u00ebmf\u000e\u00ca~ft\u009e\u00993\u0089\u00de\u00cfl\u008eP\u00a2\u008d`\u00d4\u00b7gP\u0015\u00a1 \u001eG\u00fd\u00fd\u0088\u00a8\u00b7F\u001c\u00dar\u0018\u00f1qj\u00ac\u0099L\u00d9\u00dafV\u00d7\u00cc\u00ae8\u00a0\u00bbQ}|\u0087\u0003\u0001Q\u00e3\u0094b4.D0\u00d3\u001e\u0087\u001c,\u00aeT\u0096mVGj\u00ef\u00e4\u00c0\u00e5\u00f2A9\u00a8U\u00b7\u0011\u009bWD\u0088x\u00d4\u00b9\u00de#DB\u00bd\u00cb){7}M\u00c3\u00dd\u00ec\u0005\u00f3\u00e7foA\u00cf\u009e\u008b\b=\u007fM\u00bf\u009d\u00ec\u0088\u0094ki\u009d7\u00efP^\u00de\u00e3\u00ff\u00c5\u00dc\u00d1\u00c5\u00fbs\u00cd\u00f4\u009e\u009c#1\u00ee(tc\u0094v\u00a5\u00bfO\u008eb>t\u008e\u00a2\u0016\u00d1\u007f9\u008abxw\u0094@{\u00d9|\u00fc\u00ed\u0007%\u00f8\u00c6\u00bc\u00bd{w\u00de\u00a9\u00de\u00e5\u00b4Z\u0004\u00f1\u00de(U\u000e\u00ba\u00c0\u008d6\u009e\u00f4~k\u00d4\u00f6\u00ae|q\u000b\u0007{\u00c1\u001f\u00a1\u00b9\u00a77\u00ed;:\u0080\u001d\u00cd\u0011-\u008e\u00f9R\u000fv\u00fa\u00ed\u00f5\u0093\u00fa-\u00ce\u00dd\u00d5<\u009f\u00de\u00a5\u007f\u0080v\u007f\u0094\u00fa\u00ae~\u0007\u0082\u009d~#\u0006\u0017\u000e\u00b2\u00164^\\\u00f7\u00cd\u0013X$\u0087\u0096\u008b\u00dd\u00d3\u0080@\u00ef\u00da\u0087\u00d0\u00eb]\u00ff\u0013\u00e4\u0093\u00fe'Q9HYJ7\u00a2\u0088\u00fd\f\u00e2\u0007\u00fd7\u00e6\u0098\u00ef\u00f2?\u00bc\u00cd\u00ff\u009c\u00fa\u00d7\u00eb\u00da\u008d\u0012\u00e1]\u00fe\u0015w\u00df{G\u00ce_x\u00ef\u00a2\u00f0\u00f5\u009be\u00f7\u00a6|$~\u00deb\u00b7\u00c9\u00d3\u00ed\u00b7YX\u00b5l\u00e0\u00f4d\u00d8\u00ddM\u001b\u00b7J:\u00eaMo\u00fe\u00fe\u008a\u00f3\u00bb\u00fe\u00a7\u00f7\u001b1\u00c0N*c\u00f3\u009f\u0089m'\u0005\u0014\tZ\u00b8\u001bQ%\u00a2\u00cf\u00e9\u0002!\u001d\u00a2A\"\u00e8\u00c7k\u00dc<d\u008a\u00ee\u00d6\u008c\u00f4B\u00be\u00c2\u0093\u00f4\u00de\u00cd\u0088\u00f7\\ \u00e2x\u00d3S2j\u00e0\u0099'\u00ce\f\u00d6r\u0003\u00a1-G2\u00df\u00f9P&\u0096JzOV\u0088T\u000f4sH\u0017\u00d7\u00cb\u00df\u008f\u00bc\u00d7\u00edss\u00cb\u008f\u0015\u0080\u00fc\u00a3\u0003\u00de\u00fc\u009b\u0019\u00f4\u00c8\u00a9\u0003*\n\u0090\u00ad>\u001a\u00bf]\u0084\u00e8\u00c0E\u000e\u000epD\u0015. \u0090i\u00de\u00cc\u00d2#\t\u0005\u009aY\u00b7Bdk1j\u001a]\u0083\u00dd\u0099\u0094\u00cai\"X\u0096\u00d3\u0083]\u00fb\u0089x\"\f\u00dc@\u001c8 \u00e3\u00c9&\u00d5\u0011\u00d7[*\u00d9F\u008b\u0003\u0011\u0000\u0098\\\u00b3_\u0004\u0011$\u0007\u0014g\u00a3\u008f\u00bb\u000b7\u00b0\u00f7\u00ad\u00d7\u0081\u00be\u00e4\u00e0\u00c4O\u009e.Da\u00f4v\u00c6\u001c6\u00d4a\u00d1y\u00cc.\u00f7\u00f1\u00bf\u00c18@\u00c3\u0097\u0006\u0017\u009c]1M\u00bc\u00c2F\u0093\u001ci\u00a0\f\u00e3]\u001e\u00d8\u0087\u00c5^6GP\u009b\u0087\u00fdr\u0010\u00ed\u00973\u00ab\u0085\u001a\u00ac\u00ffb\u0082\"\u00c0l\u00a3\u00b4|\u00f6\u00f0\u00cfH\u000f\u00ba!'\u0005\u000e\u00feMa`\u00dfs-$n\u00b7.\u0080(\u00ce\u00f1\u0092\u00ddB\u00d9\u00e6\u00b0V\\\u00a1\u00ac\u00e7\u00d2|\u00c6\u009eP\u00b0'\u009e\u00b1\u0011\u00c3\u00de\u009diP\u00afhp\u001a\u00e9\u0089^\u00e9\u00a2\u00d7v\u00ee5\u00e0\u00ea\u00b5\u0098|8\u008e\u00a0H\u00967>7\u0082\u00bb;\u00c2\u00a0K\u00a4\u00c8&)C6K\t\u00f6\u00ff/\u008c&\u00f7\u00a84\u00ac\u00d1\u00e4\u008a\u008f`\u00b2;~[\\ovW\u00fa\u00e0\u00e9X\u00abZ\u0080hr\u00b8d9\u001b\u001d\u00a6<\u00fa\u001eJ\u00aaQ4\u00f8\u009c\u0002\u0015*M\u00a0y\u00d7}\u00f6\u00e2\u00d4I\u0013D_8In%\u00a0`\u0001OZ\u00cdm\u00c7\u0000)\u00a8\u0006\u00dc\u00e9Dud:0\u00b4@\u00db\u0016k\u00d7R\u00c2\u00e0\u00aakg]\u0019\u00ed>\u00c8\u0086\u00b8\u00e9\u00d0\u0096Y\u00af\u00b2+\na\u0087\u00012U\u00a3w\u0088\u00c8\u00f1\t*\u00a6\u000b*\u00e2\u0091g\u0093f1\u009eg\u00f5\u008cnm\u00f3\u001b6ny\u0087\u0089\u001bM\u00cb#n\u00d8#$\u00cf<W|\u00b4\f\u0091O\u001cY\u00f4\u00a8\u00ed\u00b5\u0099\u00d8\u00bb\u00bd\u00bcj!\u0014\u00a1\u008d\u00ba\u00cc\u0096\u00c3w\b\u0085}L\u00f0\u00ea\u00dfF\u0099\u00e1\u0011i\u00fa\u0084\u00d1\u00e2&\u00b2\u00eb\u00bb\u00eb\u00dekST\u00d2\u00a2\u00c2\u0089@YQ\u008b]y\"\u00d0\u00e8\u0099@\u009bv\u00ef\b\u00bc\u00d3\u00a0B\u00a0\u00f3-\u00f1F\u00e7\u00d5W\u0084}.\u00abn\u00f8\u00e4\u00fa\u00b4\u00ed@\u00e8\u0000\u00dfI\u0003\u00bb2_\u00bc\u00a3\u0081\b9fb\u0018\u00eb/\u00da\u00955\u008f\u00d5\u00f6\u00f3\u009a}\u001a\u00eb\u00ed\u0004\u008a\u00ea\u00d4yR\u00f1\u00ec\u00d9l\u00f5=\u001a\u008cU\u00c5@\u00e7\u00dc; \u00e2\u00b0\u00ec\u00dd\u00fb\u00ff\u001b\u00abU\u00d4\u00aa\u00dd\u008b6\u00e3\u00b4v\u00afK\u0002h\u00c8\u0003jSVyt\u00b5\u0016M0\u0004>\u00db\u009f7|\u00c8W\u009e\u00a9g2kkZ\u00fdt\u00ff|\u00a7\u007fQ\u00800Gir\u001ce\u00dc\u0091\u00e9\u009d\u00df\u0018\u00b1]\u00aeh\u00fay\u000b$G|\u00f0\u00d9\u00de\u00e5\u001cY\u00cf\u00e8/>\u0085\u0010\u009a\u00c7\u008d\u00e8\u00bb\u0092\u00f4Vc\u00f0RSMA\u001dw\u000bys\u00e0\u0090\u001a\u00e4\u00e2C\u008d\t]H\u0018Zk\u00ae5\u008c>\u00f6\u000e\u009d\u00bbTG>^a]\u0089NV\u0017@\u00b6\u00a8\u00eb\u0014\u0005\u00f9CD\u00b4\"=\u0084T\u00f7\u0091\u00de\u00d9\u007fM{oO\u00e4\u0097\u00ec\u00b7\u00cdn\u00a2r\u00ab\u009a\u00c6\u00c37@\u00e4EK4\u00b9\u00df(Mv]\u00a6\u00f7\u00b1\u00b8z\u008b\u0006.de\u00ad\u00e0\u00f1x\u0013\u0091\u00f3\u0016o\"\u0012\u00bf\u0013o\":w\u0011o\u00fa\u0015o\u009a\u00f9\u00c1W\u00bd\u001c\u00a2\u00f6\u00d7\u00bd\u001cb\u00c7\u007f4/7V\u0095\u00cd\u00ea)R\u0090'\u00e92\u00f2\u009f\u00a3\u000e\u00f7\u00eb\u00b8\u0019\u0089\u00ea\u00c0\u008d\u00cd\u00aa\u00c6\u0010O\u00b5\u00d8\u00c9O\u00e2\u0017\u00e3'{\u00d7\u00f2\u00bb\u0097\u00f9I5\u00fe\u00a3\u00f1\u00f3\u00b9<\u008a\u0019\u00dd\u00b0\u00df\u00d4\u000f\u00f9\u00ddS\\\u00f8\u008d}\b \u00ee]\u00e4\u00c0\u00ccc\u0084S\u00b69\u00eci1\u00eb\u00c22$j\u008bL\u00de\u00c8\u00c4\u00be\u00c8\u008d^\u00f1\u00cf\u00d3\u000e\u00df\u00d2\u0086\u00e5/\u0097\u0097x\u0099\u00c2_\u00ccu\u00e9\u0011\u00d7\u00ce<\u00f48kZ:6i\u0016\u0007z1~\u00e3)\u00839\u00f7y\u00b2\u00e5;lk>\u00ff\u00ea,\t6\u00d9\u00bf\u009a\u00a5cxY\u00db\u009d\u00e5\u007f/k\u00bb\u00ab\u00df\u001a\u009f\u00ff!\u00d6{E\u001fn\u00eeV\u0099\u0098\u0001\u001a\u001f\u00e0\u00898\u00ccd\u00d2\u00f7\u0090\u001b\u0080\u008fE\u0018U\":d\u00e7J\u00c5^!\u00b9N\u00c1at\u00d1\u00f7\u00e8\u0089\u0012\u00d7\u0094z\u00e3\u00ec0h\u00d7\u00acN|3\u00des\u0084d\u00f1\u0082\u00fcN\u00ef\u001f\u00a5\u00ef\u008a\u00a8Nz\u00ef8\u0010Z\u009c!q\u00e5\u009a\u009f\u00e3\"\u00b8\u0081\u00e5m\u00a8\u001e\u0005\u0004\u009e\u00f1\u0014\u00d3\u0019E\u00b0(\u0087\u0091\u00aa\u00b5F\u00e48s\u00f5\u0089\u00cd]\u00ec\u00fby\u00ce\u0012_\u00f8P\u00c4\u00ab(k\u00af\u0099\u0083\u0006uU5\u00d7\u00e8\u00c3&\u00beg\u0005\u00c7F\u00bc\u009dM0\u00dfn\u0012\u00bb=\u00ff>\u0002\u001c\u00d4\u00b4\u00045\u00c8\u0016yF\u009c61\f,\u0010\u00d58\u00fb\u00e9\u0015\u00bc?\u00ef\u0085O\u00e3\u0081\u000blk0\u008d\u00a7\u0085\t\u000f\u001b\u00f7\u008d\u009c\b\u001c`\u00d2l\u008b\u00d9\u008f\u00f3Y\u0099\u00d80\u001d_I\u0086\u00b5}\u0080\u0087f\u008fr8\u00d2\u00e2p5\u00f1\u0001\u00f4\u00abjA\u0016[\u0002\u00ef\u009f\u0018\u00e8\u00beyn\u00cfj\u001a5+8Oa\u00c0\u00fe9\u00d9\r\u0010t\u00c9\u001dL\u00ce\u0099-5/%\u00b8\u00f2\u00a5Yc\u0098\u00b8(\u009b\u0096M\u00fd\u001fwxp\u0017\u00f78]\u0084\u00e0W\u00ec\u00e4\u00d3\u00a8\u00c4\u009a\u0085\u0010\u008cn\u00a3y\u00e4\u0013\u00f6?vS\u00ca\u0091f~\u00a3S.\u00e2\u0003\u00da\u00d3\u0083j\u001b\u00af,g\u009b\u00f8^\u009e|D?1\u00ed\u00a7\u00e8$\u00cf\u00d1\u00c9\u00e4\u00fc\u0086l\u000fi\u00daW\"\u0014\u0090n\u00c7\u0012\u00ef\u00c5\u000f\u00d78C\u00dcg\u00db/\u00fa\u00b8s\u00eda\u008f9c\u00f0\u00f1\u00bc\u008b\u00f1P\u00a5q\u007f\u00dej\u00d8E\u00de\u00bf\u008b:M3\u008c#\u00cf\u00d9\u00b79\u00ce\u00ca\u0007#\u00f3\u00a8j<\u008f\u0080}\u0089\u00b0]\u00ca\u00f3\u00c2>\u0016\u00dae\u00d2\u00b4t\u0016\u000f\u0098U\u008c\u00f9\u0005\u00cc\u00ea7u\u00a2\r\u00b3\u00ba\u00a0]\u00fb\u001c\u00ed\u00b6\u0099[\u00b6\u00f6m\u00a3\u009cV\u0010\u00f0wT\u00b6ho\u00d0xQwd\u00fb2\u00f3\u0090\u0089=b\"\u00bf\u00c7\u008ew5\u009d=.\u0096\u00f6\u00f9\u00ff\u001e\u0017\u00bbQ\u00d7\u0091C]\u0087g\u00db\u008c\u00c7NHZ\u00b2H\u00fbG\u0090\u00b4z\u0085\u00a4\u001dj6\u00b7\u00f5hC\u00841c\u00f9v$\u00dd\u00fd\u0006I\u00e7\u0081\u0091oY\u0088h\u00db\u00b0\u00f5[#<\u0094\u0097\u0018\u0017\u00b2Q\u00e1\u00bc/{\u00c6G\u0098m\u00e4\u00eb\u008a\u0002f7NSav\u0087\u00fb\u00a3\u00d2h\u0099c\u0016``\u00dec\u00f3\u008fPW\u00d3B\u00c2W\r\u00f5\u00abw~cA\u00da\u00f4\u0083n\u0093\u00f60{\u008dr\u00ecu\u00e2\u00ebr\u008d\u00fa\u00e6t]\u00df\u007f\u00be\u00b2\u0080\u00b73\u0084\u0085\u00b2]f\by\u00db\u00fb3\u00f6`\u00bdYi\u00f8\u0099\u00dc\u00005\u00b8}\u0084\u00bb\u00c5\u001e\u0092/*\u009d;\u009c\u00e9\u000b\u0014\u0003\u00ce\u00f8\u00c5\u0013\u00e8u\u0089\u00e9\u0084^\u0097a\u00b5^G\u00afK\u00e2\u000b\u00f4:\u009e\u00f3\u00d8\u00f7+\u00e66B\u00e5\u00f3Y\u009a\u00b1\u00a3h\u00e5\u00ae4\u00d6\u00d2L2\u000b_\u00ec\u00fa\u009f'm\u0000Mv\u00a3\u00985\u001dW'\u00fb\u00a6\u0087}J<\u00f7\u00bb\u0081E!\u00a7\u00bdK3^v\u0096\u00e3\u00c6y\u00da\u008e\u0014\u0012\u00cc\u00c8c\u00edm\u001aoX\u00de\u00d5\\`3\u0011>\u00f7\n\\E\u009a\u008bY\u009cG\u00a6\u00c6\u00b1\u00f4^c1\u0083\u009a\u00aa\u00cf\u00b1\u00ba\"\f^#:\u0092\u008a\u0092j\u001f;\u00fd\u00dc\u00b0Y\u008fKn6\u00c9m\u00eb\u00bd\u0015\u00ed\u00d8\u00ec\u00d2@g\u00d0f6\u00d74[\u0002\u008d\u0015\u00c9aE\b\u00e8\u00e63|Z\u0093\u00cc5a\u001c\u00e7\u0080^\u00fe\u00b3\u00beu\u00f46\u00c7Q\u001a\u00e3\u00d06;\u008b\u00de\u00ec\u00eel\u0019g\u00a2 \u00e8\u00e5\u00ec\u0012\u008dg\u00cc\u00e4\f\u009eD\f~\u00e3\u00d2\u00dc\u00b7\u0014w}\u0016\u001a\u00997\u0004\u0015\u00daP\u00aaE)\u0004ld\u00ef\u008e'\t\u00e6\u0093\u001b\u00ad\u0088\u00e6u\u00b4\u00eb\u00c8\u0082\u0091\u00a2\u008e\u00bd)c\u0097\u008a\u00c5\u009d#C\u001a\u00cf:Z\u00b2\u00c2\u00efZ\u00836\u00e5\u00906\u00cf2\u00d7n<\u0090\u00d4\u0013\u00ca\u008co\u00b1I\u0016\u00cfu\u00ea\u0019\u00b7\u00f9k\u00ee\u0090\u00db\u00f0\u0098\u00f7g2r\u00ba\u0091\u00f3<i\u00ad\u0011\u00db8\u00fd\u00f9S8\u0015^\u00e0Tl\u00d6\u008e\u00f1\u00a38\u00d5\u00a5\u0017\u00a2k\u00b4\u007fd43KA\u00910Ne\u00e2i\u00af\u00c0OP\u0082\u00ea%b'\u00ddZ\u00efS\"xG+\u0016\u00e9\u001bV\u00fc\u0087\u00f0\u008eBy\u008cwc\u00a6)`\u00c8\u0007\u00d4\u007f\u00ed\u00d2:\u00ef=\u00dc\u00c7%3\u00df=\u009f\u00aa\u00c2\u00de_\u00ae\u00bf\u0011\u00e0\u001b\u00f57\u0082\u00f8'\u00ae\u00bf\u00fdL\u00e5\u00cc\u00f4\u0011\u00fd\u0086\u00a3?\u0091\t\u00e1U\u00a6\u008b7#e7s\u00a6-J8\u00e35\u008f\u00c7_\u0084r\u008a\u00bf\b\u00dd[\u00f1\u0017\u00a1^\u00c6_yX\u00a6b\u0019\u00b4\u00dd\u00cf\u00fd\u0007\u00b5\u001b.\u00b5[L\u00bb\u00e1\u0011\u00ed&,\u00f1{k\u00f3\u0084=_\u00d6\u00e6'\u00a5\u00c6^\u00fbp\u00b5\u008b\u00a8\u008c,\u0007\u00ce\u00cf-\u00a4\u00ef\u00edh\u00efT\u00a1<\u00e4\u001a\u0000\u0091\u0002\u009f$\u00ce\u0011\u009c\u00f0\u00d7\u0095qo^gF\t\u00fbLh;\u008b\u00bbN\u0018\"\u0091\u00be\u00bc?\u0092\u00cc&\u00bfn\u00e9\u0018\u00fe\u00cc\u00fb#G<D\u00ec\u00d3\u000fF\u0001z\u0019\u0005\u00b4f\u00ad\u000fh\u00dd\u00ae\u00a6\u00fa\u0094\u00b69\u00d4Hgl\u00faSU\u00d5\u00a9\u00c1\u00bb\u00ba\u00ea\u0093'd\u00d7\u0097\u000bnb\u00d6\u008fR|\u00eboZ\u00f9\u00b3O\u0099\u00d6\u00f5\nQ_H\u0089\u00a5\u0005{t}\u008f\u00c3<\u00bb\u0013b\u00d83$\u00f7\u0093\u00f5_r\u0097q\u00b5Yor\u001f\u008d\u00ab\u0007\u0097H\u00e0'\u00f5\u00e3\u00b2\u00aeM\u0003#\u00fcl]\u001b\u00b6\u00ca\u00e6\tI\u00fe:\u0086p\u00c1\u008f\u008a\u009b\u0013\u008anF\u0012a\u00dav1)\u001b\u00a8\u00c3@}#\u001amB\u0091\u00dc\u00b0I\u00cb\u00ad\u00f8*\u00b9\u00a2\u00eb\u001e\u001d\u00f9\u008a-\u00b8\u00ce\u00b5\u0002\u00a3+\u00d0}\u00b6\u00055\u00c9\u0004\u0090J(\u00bep\u008e$\u00b3\u00faw\u00ce+\u0013\u001fcd\u00f3\u00b83\u000f\u00a0\u00f1m\u00a3o\u00c6f\u00db\u00den\u008bYiUqU\u00d1\u00ac\u00b2Yn\u00cf^\u0094\u00bc\u00f3\u00a4\u00a8\u00ec\u009dF\u00ed\u00da\u00ce{\u009dU\u00b5\u0098\u00e5\u0086\u0087\u00b0Y\u00cb\u00df\u0081\u00e3n\u00b5\u00e3\u00b4G\u00df\u009d\u00d3Y\u0015\u00e3Q\u00b9\u00a5@\u00c1\u0099\u00e4\u00a8\u00a5{E|o\u0092a|Wg\u00e0\u008a?'\u00b1WYR\u00ae\u00d6\u00fa\u0090E\u001f\u00c8\u0017\u008e5T\u00fev\u008e\u00a6{\u001cU\u00a7\u00d1\u00ab\u00f9\u00e0\u0013/\u00c9\u00c7\u00f3^\u00fd\u00fd\b\u00f79\u001a0\u00f0\u00e4O=\u00f1\u00e7\u00f2l\bi\u00eb\u0081\u00c3D\u00cf\u000b?\u0099\r\u009c5\u00f9\u00cbXr\u00d5\u009b\u0082\\V\u00fa\u00c8S\u008b4s\t\u008b\u00c5\u00aev\u0080\u009e\u00a5\u00d0B+\u00b7\u00b4\u00ce\u00d7\u00f2Sre\u0094\u001b\u00f6\u00e5\u00f0E\u009f=\u00a2z\u00eb\u009bC\u00e4G}\u00f5\u00c67\u0087\u00c8\u001fVy\u00f3\u009bC\u00e4K\u00fb\u00f07\u0087\u00ea6\u00ea\u00a5\u009e\u008fH\u00f14\u00ff\u00b3\u00f6~\u00a3&\u00e4\u00bb\u009a0\u00ce\u00a4h\u00fc\u00bdU{T\u0013\u009e\u00f6\u00b9\u00a1~\u00bf}\u00ff\u00dd)\u0096\u00aaq\u009e[\u00f9\u00e4\u0099\u001d\nmz\u00dd\u00a9\u00ed\rv'5\u00edn\u00e7\u00ab\u00ac\u008e\u00e4\u00893\u00c5\u0097\u00c8\u00c0\u00f5nO\u00d3r\u00d2w\u00cf\u00b9\u0004<\u00f7\u007f\u00191D\u0088Nd\u00e0\u00e332\u0098\u00e84G\u008c\u00e4{\u00ad\u009d\u0084R\u00c5\u00dc\u00a8\u0084\u00985\u0016\u00ca\u00a0\u00a1\u0017\u00f6\u00a1\u00a6\u0014\u0085r\u00f2\u001d\u0095\u00cb\u00f8\u00dc$\u0085.\u0092\\\u00edB\u009c\u00b9\u00f5\u001b\u0011\u00c2\u00a8V>u\u00c2\u008f\u009f\u00cb\u00147l\u009bb\u0091\u00cd\u001f\u00073\u008ay\u00da\nzn\u007f\u001c\u00a3\u008e\u00f7R,\u00cf\u00be\u00f7x\u00b5\u00d1\u009e\u00b21\u00b0o\u00f5FJ\u00fe\u00d9\u00d3\u00b7O\u00eeS\u00fa@\u00bd\u00d1\u00ff\u00b6\u00de\b[,D)\u00a4@\u00f3D\u00ec\u00cc[f\u0015\u009bR\fAOgU\u00db\u00fc\u001a\u00d0\u0086\u00bc>\u00a7K/\u00f1\u0096^\u00e1\u00d1<\u00bf2\u00d6\u0095\u00dd\u0093(\u00c8\u001f\u00b0_\u00f4Q\u001ee)\u008bG\u00cb\u00d6\u00ac\u009d\u0006\u00bdv\u008bI\u008e<\u00fa,\u0082v\u00fa\u00de\u001bR\u008e-\u00b8\u0097\u00ce#\u00c8VY9\u00e5IW\u00d1\u00d5\u00ef\u00f1\u00e0G\u00fd\u0013j\u0088A\u00a7<X\u0006\u001fQd\u00f8\u0011\u0017E\u00c0b\u00c6q\u0097|gd\u00d7B\u00a2\u00a65z\u008b\u00e1\u0092o\u00e2\u0000\u00b1%\u0099\u00df\u00d6\u00c4\u00a8\u00b5J\u0087\u009c\\u\u00adG\t\u00c0-4\u00ee\u0085\u00c4\u00f7hV\u00d3\u00a8^(\u008f\f\u00e2:\u00f2\u001bTrO\u009f\u0087X(@I\u00f8\u0083\u00b9\u0087\\\u00a2\u0000\u00ec\u00cf\u00bb\u008e>\u008a\u0002T\u00a8?\u00b8.\u00beD\u00c9B\u00b1\u00d6\u0087\u00b0\u00e9\u008a\u00e1\u0094Ql1\u0006RU\u00cb\u0015o\u00ed\u00dd\u00d2\u00e3\u0099|\u00d6\r\u0093{\u0082Nz\u00f7\u00ac\u00c9a\u0007\u00d6S\u00fa.\u00b7\u00fb\u009ez\u00b8\u00ed\f\u008a##\n\u00ab\u00daa\u00eb\u008e\u00ed\u00e5x\u00e7\n'\u00d9G<\u001b\u0016r\u008ay\u00e0\u0014\u00f3\u008c/\u00c9\f\u00ad\u00f5Sk\u00df\u008f{\u00f6_\u00a69\u00e0\"H\r\u00e1\u00c4o\u00ff,\u0086\u00be\u00b4v\u00fb\u0006\u009c\u001f4knR\u00acq\u00ba\u00c0\b\u0017\r\u00b7|\u0090\u00be\u0015=\u001f\u00de,~\u001d\u00a5;V\u00f4\u00e0AE\u00dd\u0086\u00a2{{W|PV\u00b1v\u00fbw\u001c\u00e1\u00d1\u001dr\u00d4*:\u00be\u00a5-\u00dc\u000f\u00da\u0082\u00a9[\u00db\u00d0Md\u0088\u00f5\u00e4\u00e9lM\u00ee\u00b8\u0007\u007f\u00c5\u0091\u00b6\u0092\u00e7\u00be\u00ae\u00f2\u00f3\u0091X\u00fc\u00faT\u00c8@\u00e1\u0006j\u0080n\u00c5\u00bf=\u00d5\u00a7b\u00a4?d-_G,c7\u008e\u0018\u00df\u009c\u00eewe\u00cd=X\u00c3\u001a\u00efO+\u00b8\u00cb]\u00a8a\u00d8\u009a\u00e7\u00bf\\\u00b2\u00d9\u0091\u00f1Au\u00b2^\bB\u001e\u00a7!H\u00e8\u00dc\u0016E0\u00a8\u00c53v\u00efuJl\u001a01\u001f\u00f4\u00c1\u008bD\u009a\u00b8F\u00d4\u00b1\u00d3H\u00ce1\u00eb\u00dc\u00cbn6uF8\u0091B\u0098\u0095\u00bcUg\u0018}\u00c4\u00e3\u0097\u0000\u00dc\u00fe\u00bb)\u00c1\u008d}R\u00f8T\u00ad&,k\u00d9\n\u00e5Tj\u00a5\u000e\u0092%\u00d6\u00c6\u00ae\u00a6\u0098\u0085\u00b8\u00f6\u001ers\u00d4\u00a4qh\u0001C\t\u00d4k\u0086\u009c\u009a\u00f7\u008e\u0083O\u009el\u00b6g[I\u00d7{-\u0002\u009a\u00be\u009f\u00ac\u00ce\u00a8=3~\u00de\u00bf\u00ef\u00eb\u0080a}={X3w\u00fa\u00966\u00ccoi\u009b]Z9\u00ed\u00da\u00d3\u00b6G\u00b7\u0002?\u0083kY\u00a6\u00bd?\r\u00b2\u0097\u00e7\u00ed[6\u0000\u00db9\u001a\u0082\u0093=\u00d4\u00de\u009c?\u00a1<m\u00fbB\u0087\u00b8Q\u00f5\u0012m\u009c8\u00a9W\u00f1N\u00c0\u0093F\u00ed\u009eD\u00b5{\u00a7\u00e2yX\u00e1\u00adn\u0019\u00ed\u00a9\u0081\u00a7\u00ca\u00b8K\u0013Q1\u008b\u00fc\u00c0\u0018\u00a6\u008aEE\u00fd\u00c0\u00a3\u00c4\u0091\u008f\u00c2\u001a\u00d5\u008f1\u00a26\u00af\u00a3f\u001a\u00d5\u00cd1g/G\fg\u00e1\u00f2\u00cd\u00b3\u00ae/\u008f<\u0086\u00e5\u00dc\u009f\u009ft\u00efm\u00fdcnl\u00bd)k\u00f6\u00a0}\u00a2Fc\u0096\u00b4\u00fb\u0012J\u00f3\u00a2UiUxw\u001e\u00ca3\u00013\u00cf\u00af\u00a2D\u00ef<\u007fQ\u001fn*\u00de\u00efk\u00c0[\u0095\u00f8\u00eeJ\u008e\u0098\u00d6\u00f0\u0097\u00f6\u009c\u00ad\u00eeaj\u00dc\u00a1\u00e9\u00c5W^.\u00d6v\u00fc\u00d6\u00cb\u0015\u00c6\u0086\u00832\u00a8\u00c5-\u00bc\u00cd\u00de#P\u00a3\u00aeL\u00de/\u00be\u0099\u00f1k_\u00bf\u00e3L\u000e\u00aaQ\u00ef]\u00c9\u001a\u00a8\u00ff\u00a0\u00bew\u00dez\u0091\u00b9\"o\u00f4\u00b6\u0019\u00b9/\u0091\u00d2\u00eaE\u008bw\u001a=\f\u0099\u00e4q\u00ef\u0006j\u00fa&=\u00e7N\u0001\u0093\u0084\u008d\u00a6\u001f\u00d6\u00a6k\u001a\u00dc\u009d\u00b1\u009a\u00dch}W\u001e_\u00ee\u00c7\u00d6\u00c7KbxI\u00d0\u0015\u009d\u0086,\u00cal;\u00f7\u009cH'\u00df\u00d4\u00b3\u0004\"\u00b4\u00f58\u0088.s\u00a0\u00901Y\u0096M\u00d4\u00d4\u00b9L\u00d4\u0095-L'\u00ed(\u0091\u0003\u0015\u00aa5\u00a3\u0087\u0096$\u00b9 \u00cd)\u0094\u00d2\u008dS\u00da\u00b5(;\u001e!g\u0001`\u00fe\u00f5?\u00ff\u00ef\u007f\u0003\u0000\u0000\u00ff\u00ff\u00da4-\u0011\u00deg\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "GET",
                "uri": "https://ctrver.t.hmny.io/fetchContractCode?contractAddress=0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79&shard=0",
                "body": null,
                "headers": {
                    "User-Agent": [
                        "python-requests/2.28.1"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Date": [],
                    "Access-Control-Expose-Headers": [
                        "Content-Length,Content-Range"
                    ],
                    "Content-Length": [
                        "52960"
                    ],
                    "Access-Control-Allow-Origin": [
                        "*"
                    ],
                    "Access-Control-Allow-Methods": [
                        "GET, POST, OPTIONS"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "ETag": [],
                    "Access-Control-Allow-Headers": [
                        "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"
                    ],
                    "Server": [
                        "nginx/1.18.0 (Ubuntu)"
                    ],
                    "X-Powered-By": [
                        "Express"
                    ],
                    "Content-Type": [
                        "application/json; charset=utf-8"
                    ]
                },
                "body": {
                    "string": "{\"contractName\":\"GovernanceToken\",\"sourceCode\":\"// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: contracts/Authorizable.sol\\n\\npragma solidity 0.6.12;\\n\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address _toAdd) public onlyOwner {\\n        authorized[_toAdd] = true;\\n    }\\n\\n    function removeAuthorized(address _toRemove) public onlyOwner {\\n        require(_toRemove != msg.sender);\\n        authorized[_toRemove] = false;\\n    }\\n}\\n\\n// File: contracts/GovernanceToken.sol\\n\\npragma solidity 0.6.12;\\n\\n\\n\\n\\n// The GovernanceToken\\ncontract GovernanceToken is ERC20, Ownable, Authorizable {\\n    uint256 private _cap;\\n    uint256 private _totalLock;\\n    uint256 public lockFromBlock;\\n    uint256 public lockToBlock;\\n    uint256 public manualMintLimit;\\n    uint256 public manualMinted = 0;\\n\\n    mapping(address => uint256) private _locks;\\n    mapping(address => uint256) private _lastUnlockBlock;\\n\\n    event Lock(address indexed to, uint256 value);\\n\\n    constructor(\\n      string memory _name,\\n      string memory _symbol,\\n      uint256 cap_,\\n      uint256 _manualMintLimit,\\n      uint256 _lockFromBlock,\\n      uint256 _lockToBlock\\n    ) public ERC20(_name, _symbol) {\\n        _cap = cap_;\\n        manualMintLimit = _manualMintLimit;\\n        lockFromBlock = _lockFromBlock;\\n        lockToBlock = _lockToBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    // Update the total cap - can go up or down but wont destroy previous tokens.\\n    function capUpdate(uint256 _newCap) public onlyAuthorized {\\n        _cap = _newCap;\\n    }\\n\\n    // Update the lockFromBlock\\n    function lockFromUpdate(uint256 _newLockFrom) public onlyAuthorized {\\n        lockFromBlock = _newLockFrom;\\n    }\\n\\n    // Update the lockToBlock\\n    function lockToUpdate(uint256 _newLockTo) public onlyAuthorized {\\n        lockToBlock = _newLockTo;\\n    }\\n\\n    function unlockedSupply() public view returns (uint256) {\\n        return totalSupply().sub(_totalLock);\\n    }\\n\\n    function lockedSupply() public view returns (uint256) {\\n        return totalLock();\\n    }\\n\\n    function circulatingSupply() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function totalLock() public view returns (uint256) {\\n        return _totalLock;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // When minting tokens\\n            require(\\n                totalSupply().add(amount) <= _cap,\\n                \\\"ERC20Capped: cap exceeded\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._transfer(sender, recipient, amount);\\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    function manualMint(address _to, uint256 _amount) public onlyAuthorized {\\n        require(manualMinted < manualMintLimit, \\\"ERC20: manualMinted greater than manualMintLimit\\\");\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n        manualMinted = manualMinted.add(_amount);\\n    }\\n\\n    function totalBalanceOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder].add(balanceOf(_holder));\\n    }\\n\\n    function lockOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder];\\n    }\\n\\n    function lastUnlockBlock(address _holder) public view returns (uint256) {\\n        return _lastUnlockBlock[_holder];\\n    }\\n\\n    function lock(address _holder, uint256 _amount) public onlyOwner {\\n        require(_holder != address(0), \\\"ERC20: lock to the zero address\\\");\\n        require(\\n            _amount <= balanceOf(_holder),\\n            \\\"ERC20: lock amount over balance\\\"\\n        );\\n\\n        _transfer(_holder, address(this), _amount);\\n\\n        _locks[_holder] = _locks[_holder].add(_amount);\\n        _totalLock = _totalLock.add(_amount);\\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\\n            _lastUnlockBlock[_holder] = lockFromBlock;\\n        }\\n        emit Lock(_holder, _amount);\\n    }\\n\\n    function canUnlockAmount(address _holder) public view returns (uint256) {\\n        if (block.number < lockFromBlock) {\\n            return 0;\\n        } else if (block.number >= lockToBlock) {\\n            return _locks[_holder];\\n        } else {\\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\\n            uint256 numberLockBlock =\\n                lockToBlock.sub(_lastUnlockBlock[_holder]);\\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\\n        }\\n    }\\n\\n    function unlock() public {\\n        require(_locks[msg.sender] > 0, \\\"ERC20: cannot unlock\\\");\\n\\n        uint256 amount = canUnlockAmount(msg.sender);\\n        // just for sure\\n        if (amount > balanceOf(address(this))) {\\n            amount = balanceOf(address(this));\\n        }\\n        _transfer(address(this), msg.sender, amount);\\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\\n        _lastUnlockBlock[msg.sender] = block.number;\\n        _totalLock = _totalLock.sub(amount);\\n    }\\n\\n    // This function is for dev address migrate all balance to a multi sig address\\n    function transferAll(address _to) public {\\n        _locks[_to] = _locks[_to].add(_locks[msg.sender]);\\n\\n        if (_lastUnlockBlock[_to] < lockFromBlock) {\\n            _lastUnlockBlock[_to] = lockFromBlock;\\n        }\\n\\n        if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\\n            _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\\n        }\\n\\n        _locks[msg.sender] = 0;\\n        _lastUnlockBlock[msg.sender] = 0;\\n\\n        _transfer(msg.sender, _to, balanceOf(msg.sender));\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator =\\n            keccak256(\\n                abi.encode(\\n                    DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name())),\\n                    getChainId(),\\n                    address(this)\\n                )\\n            );\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n            );\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"GovernanceToken::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"GovernanceToken::delegateBySig: invalid nonce\\\"\\n        );\\n        require(now <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"GovernanceToken::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld =\\n                    srcRepNum > 0\\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\\n                        : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld =\\n                    dstRepNum > 0\\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\\n                        : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber =\\n            safe32(\\n                block.number,\\n                \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\"\\n            );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"compiler\":\"0.6.12\",\"contractAddress\":\"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\",\"abi\":[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"type\":\"string\",\"name\":\"_name\",\"internalType\":\"string\"},{\"type\":\"string\",\"internalType\":\"string\",\"name\":\"_symbol\"},{\"name\":\"cap_\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"_manualMintLimit\"},{\"internalType\":\"uint256\",\"name\":\"_lockFromBlock\",\"type\":\"uint256\"},{\"name\":\"_lockToBlock\",\"internalType\":\"uint256\",\"type\":\"uint256\"}]},{\"name\":\"Approval\",\"type\":\"event\",\"anonymous\":false,\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"owner\",\"indexed\":true},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"name\":\"value\",\"internalType\":\"uint256\",\"indexed\":false}]},{\"anonymous\":false,\"name\":\"DelegateChanged\",\"inputs\":[{\"name\":\"delegator\",\"internalType\":\"address\",\"type\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"fromDelegate\",\"indexed\":true,\"internalType\":\"address\"},{\"type\":\"address\",\"internalType\":\"address\",\"indexed\":true,\"name\":\"toDelegate\"}],\"type\":\"event\"},{\"type\":\"event\",\"name\":\"DelegateVotesChanged\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"indexed\":true,\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\",\"indexed\":false},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"newBalance\",\"indexed\":false}],\"anonymous\":false},{\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"to\",\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"name\":\"Lock\",\"anonymous\":false,\"type\":\"event\"},{\"anonymous\":false,\"name\":\"OwnershipTransferred\",\"type\":\"event\",\"inputs\":[{\"indexed\":true,\"type\":\"address\",\"name\":\"previousOwner\",\"internalType\":\"address\"},{\"name\":\"newOwner\",\"internalType\":\"address\",\"indexed\":true,\"type\":\"address\"}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"Transfer\",\"inputs\":[{\"indexed\":true,\"type\":\"address\",\"internalType\":\"address\",\"name\":\"from\"},{\"internalType\":\"address\",\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false,\"internalType\":\"uint256\"}]},{\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"type\":\"function\",\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"stateMutability\":\"view\"},{\"outputs\":[{\"name\":\"\",\"internalType\":\"bytes32\",\"type\":\"bytes32\"}],\"type\":\"function\",\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"stateMutability\":\"view\"},{\"inputs\":[{\"type\":\"address\",\"name\":\"_toAdd\",\"internalType\":\"address\"}],\"name\":\"addAuthorized\",\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"outputs\":[]},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"internalType\":\"address\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"nonpayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"type\":\"function\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"stateMutability\":\"view\"},{\"name\":\"balanceOf\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"account\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}]},{\"name\":\"checkpoints\",\"inputs\":[{\"name\":\"\",\"internalType\":\"address\",\"type\":\"address\"},{\"type\":\"uint32\",\"name\":\"\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"fromBlock\",\"internalType\":\"uint32\",\"type\":\"uint32\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"votes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"inputs\":[],\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"decimals\"},{\"name\":\"decreaseAllowance\",\"inputs\":[{\"type\":\"address\",\"name\":\"spender\",\"internalType\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}]},{\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"addedValue\"}],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"name\":\"increaseAllowance\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"inputs\":[],\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"lockFromBlock\"},{\"name\":\"lockToBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[]},{\"type\":\"function\",\"inputs\":[],\"stateMutability\":\"view\",\"name\":\"manualMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"manualMinted\",\"inputs\":[],\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"type\":\"function\"},{\"name\":\"name\",\"inputs\":[],\"type\":\"function\",\"outputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"view\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"name\":\"nonces\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"\"}],\"type\":\"function\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"type\":\"uint32\",\"name\":\"\"}],\"inputs\":[{\"name\":\"\",\"internalType\":\"address\",\"type\":\"address\"}]},{\"name\":\"owner\",\"type\":\"function\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"inputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"name\":\"removeAuthorized\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_toRemove\",\"internalType\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"renounceOwnership\",\"inputs\":[],\"type\":\"function\"},{\"name\":\"symbol\",\"inputs\":[],\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}]},{\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"inputs\":[]},{\"stateMutability\":\"nonpayable\",\"name\":\"transfer\",\"type\":\"function\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"internalType\":\"address\"},{\"name\":\"amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}]},{\"inputs\":[{\"type\":\"address\",\"name\":\"sender\",\"internalType\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\",\"name\":\"transferFrom\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"name\":\"\",\"internalType\":\"bool\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"outputs\":[],\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"newOwner\",\"internalType\":\"address\"}]},{\"inputs\":[],\"name\":\"cap\",\"type\":\"function\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"inputs\":[{\"name\":\"_newCap\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"capUpdate\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockFrom\",\"type\":\"uint256\"}],\"outputs\":[],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"name\":\"lockFromUpdate\"},{\"name\":\"lockToUpdate\",\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"inputs\":[{\"name\":\"_newLockTo\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[],\"name\":\"unlockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}]},{\"inputs\":[],\"name\":\"lockedSupply\",\"stateMutability\":\"view\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[],\"name\":\"circulatingSupply\"},{\"type\":\"function\",\"name\":\"totalLock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"type\":\"function\",\"outputs\":[],\"name\":\"mint\"},{\"outputs\":[],\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"name\":\"totalBalanceOf\",\"stateMutability\":\"view\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"type\":\"function\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\",\"internalType\":\"address\"}],\"name\":\"lockOf\"},{\"name\":\"lastUnlockBlock\",\"stateMutability\":\"view\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"_holder\"}],\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"lock\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"_amount\"}],\"stateMutability\":\"nonpayable\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"type\":\"address\",\"name\":\"_holder\",\"internalType\":\"address\"}],\"name\":\"canUnlockAmount\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"name\":\"unlock\",\"type\":\"function\"},{\"name\":\"transferAll\",\"inputs\":[{\"name\":\"_to\",\"internalType\":\"address\",\"type\":\"address\"}],\"type\":\"function\",\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"name\":\"delegates\",\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"delegator\"}],\"outputs\":[{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"\"}]},{\"outputs\":[],\"stateMutability\":\"nonpayable\",\"inputs\":[{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"delegatee\"}],\"name\":\"delegate\",\"type\":\"function\"},{\"name\":\"delegateBySig\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"delegatee\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expiry\",\"internalType\":\"uint256\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"type\":\"uint8\",\"name\":\"v\"},{\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"name\":\"r\"},{\"name\":\"s\",\"internalType\":\"bytes32\",\"type\":\"bytes32\"}],\"outputs\":[],\"type\":\"function\"},{\"type\":\"function\",\"inputs\":[{\"name\":\"account\",\"internalType\":\"address\",\"type\":\"address\"}],\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"stateMutability\":\"view\",\"name\":\"getCurrentVotes\"},{\"type\":\"function\",\"stateMutability\":\"view\",\"name\":\"getPriorVotes\",\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"inputs\":[{\"name\":\"account\",\"internalType\":\"address\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"internalType\":\"uint256\",\"type\":\"uint256\"}]}],\"libraries\":[],\"constructorArguments\":\"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000019d971e4fe8401e74000000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000000000000000015b74cf00000000000000000000000000000000000000000000000000000000024c0e8f0000000000000000000000000000000000000000000000000000000000000005566970657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055649504552000000000000000000000000000000000000000000000000000000\",\"cached\":{\"ttl\":1662403357957,\"cached\":true},\"proxyDetails\":null}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "1257"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00dcV\u00dbn\u001cG\u000e}\u00df\u00cf\u0098gc\u00c1{\u0091\u00fe\u009b\u00ae\u001b\u00b0\u008b\u00c5\u00ee\u00c2N\u0080\u0000A\u00fe=`U\u008f43\u0092b)v^\"\u00d9P\u000f\u00a7\u009a<<$\u000f\u00eb\u00d7\u00cb\u00bf\u00bf\u00fe\u00ef\u00bf_\u00fe\u00df.\u009f/\u00f4O\u00b8|\u00ba\u00fc\u00ab_>#\u0002|\u00ba|\u0019_\u007f\u00fe\u00cfO\u0097\u00cf\u0017\u00f8\u00c5\u00c0\u00c1@@\u00c9\u0000\u0084\r\u00c1\u0010\u00a0\u0081\u0016\u0003\u0000V\u0083\u0001\u00d8\u001c\u008c\u0019\u00b9\r\u00b5\u0082\u0098'\u008ahI\u00eb\u0011\u00a0\u00d1j\u00ddV\u0019\u000fV1\u0004\u00ea\u00b1\u00ad\u001d\u0006C\u00af\u00b0\u00ac\u008c\u00f3\u00b4v\u00a3\u00d1yl+\u0015-\u000b\u00c1T\u00d3z\u0017w\u00f9\u00d2\u00d3W\u0081\u0003\u009c\u0018\u00b7\u00d5O4\u00a1\u00dd\u00a3\u00caim\u00f2\u00e8\u000b\u001d\rz\u00ef\u001b\u00ed\u00a1\u00fb\u00ad'k\u00be\u0085\u00d5\u00b7\u0095\u00b8z\u00a1\u00ab\u00b5\u009fhi\u00e0Q\u00bal+\u00d1|\u008c\u00006{\u001f\u00c0\u00eb{\u00e8'.\b\u001dG\u00a9\u00db\u008a:n\u00dfb;\u009f\u00b7\u00ad'\u000b\u00b6\u00be\u0001\u00d0\u009aUp\u0098]+\u008b\u0003j\u009e\u0019gu\u00b6]W\u00c5F\u00e4{u\u00e4{YO\u0007E\u0003\u0002\u0007'%gEGg\u00c0\u00fd\u001c\u0018\u00e4\u001c\u0014\u0090\u00b6@W\u00c0\u00c8\u00b3\u00ec\u009c\u009e\u00b5:;\u00e2\u008e\u0087\u00c4Z\u001c=?\u00a2\u00b3SzI\u00df\u0090,\"\u00d4\u008c\u00a9\u00b0\u007fc\u00fd\u00cf\u00b3\u0001\u00068\u00d1N\u00d4\u00a8\u0090\\8\u0001ol\u0080\u0019\u008b\u0000xy\u00018\u00801\u00d0\u00fc\u00c9{\u00e4;U!h\u00fb^}\u008a\u000e\u0081\u00c0\u0001\u0093o8A;^p\u0082\u0087dO;\u00b0\u00e5?\u0081\u00e7\u008c\u001c\u00efO\u0017\u009e\u00ef\u00fcqdE\u00cb\u00dc\u0012!\u00a77\u00b1\u00e3\u0096\u00f5@T\u00d4d]\u0093S\u008c\u00ccp\u00e7\u00f3\u0080y\u00f5\u00e7\u0003\u00e6U\u007f\u00e9\u00fd\u00de\u00e3{\u00bc\u008d\u00fa-\u0006\u00ec\u0099\u0001\u0002\u00fa\u001e\u0006\u001c\u00d1b\u00f7\u0017&\u000b\u0001\u0081\u009b\u0015ybe\u00e0\u00ea\u00ee+>\u00e2\u0097\u00f8\u00b2\u00dbo\u00f0\u00d1\r>}\u00c0\u00b7|fo\u00dc\u00f94}\u00e1\u0093l\u0018BA\u00bb\u009f\u00849\u0003\u0082\u00d0\u00de\u00c1$\u00c5\u00cb\u00f9\u00c2\u00b7\u0091\u001e\u00e5\u0011\u00e9\u00fb\u00b9D[X\u00e7}V\u00fd\u00ad\u00f9.\u00fc\u0090\u00ffx\u0099\u00ff\u00db]O\u00b3\u00fd\u00c0\u00ae/G,\u0086\u001f4\u00eb\t\u001b3\u007f\u008b\u00c5\u001bl,\u00c7\u008f\u00e9GXH\u0013_]3\u00c4K\u00cfR\u00bd\u00d6\u0086[\u00b5\u00cb\u00ea\u00e7'\u0081\u009c\u00acX*\u00a9\u00c2r\u00d5\u00ad@\u00cd\u00f9\u00c5}.P\u00b1\u00cc\u0081s\u00ce\u00d6$\u0088;HU\u008d)\u009d\u00e2\u00f0:\u009b\u00b5~\u0080\u008c\u00aa\u0015:71(\u008a\u008d\u0004\u00a8i\u00d3\u00d6\u0002!Z\u00d0\u00ee\u00b8\u00f4\u009e1\u000e\u00da\u00fd\t+\u00f6\u00adb\u001b\u0000-uT\u00b4=\u00d9\u0000@\u00e5\u00bdt\u00bc\u00f9\u00b32\u0013\u00b4H\f\f\u0092\u00ea\u009c\u00f9\u00baD\u00d6D\u0080R\u00d9]\u00d6\u00b9\u00dc\u0019\u008b\u00b3\u00a0X{\u00c3\u00c9\u00e9\u00ac\u00ac\u0018\u00ad\u00ad\u0096\u00ea\u009eU\u0015\u00de;\u001bam\u0010\u0015H_\u009c\u00cc]u\u00fc|+w$\u00e5\u00e7\u00ec$\u0080\u00ad\u00f3\u00f9\u00945\u00d1\u00ea\u00a8\u00b2b\u00a6\u00ed\u00dc \u00f9~z]\u001b[$76\u00ed\u00c9]\u00bbey{\u00de>\n\u00a7B\u00dcW]\u00ee\u00ab\u009e\u00fe\u00e8#\u001dVr\u008b\u00b9\u00ea\u00da\u0097\u008b\u0019!p\u000bP\u00f5\u00dc\u0089v\u00ed\u0093\u00e0\u0090d7\u0019,\u00d3\u009b\u00d6\u0081CG\u001d\u00adt\u00ad\u001de\u0016\u0014*\u001d\u0087\u00cb\u00e4\u00de\u00f3\u009e\u00d0`\u0096J\u00148\u00b4\u0012\u00c0\u00d1\u00bc\u0095\u00c65H\u0083v\u00ae\u00ab_X\u0017+Y\u008f\u0095\u00a9i\u0095\u0012\u00eb\u00ef\u00072a\u00b4d\u00e6\u00ca\u00c5\u009e\u0087\u0093\u0015$PqB\\UV\u00bc\u009b\u00df\u000f\u00c4\u0010\u00ccK\u00db\u00d2\u0081\u00c8\u00feP\u000f-\u001f\u009ahy@\u00f9j\u00fd\u0098]\u00b2\"\u00b1:&\u00b1\u007f\u00ff\u008c\u00a0\u00a0j]\u00f9[\n\u00f9_\u008f\u00f9\u0099\u00efV\u00ff<\u00df\u001f\u008f\u009c\u00aa\u00e3\u00bc\u0015I\u00f5C\u00f1 \u0095\u00e9\u008fTuG\\\u0011\u00fc\u001a!\u00f8\u009c\u00a2\u00a5\u000b\u00a99\u00e7\u0089\u0092\u00dd\u00ad\u00ban\u00a8{\u008e\u00f6\u00fd\u0094\u00cb\u00ec}\u0092\u00d2\u00d1\u00b1\u000ej\u001e\u00d5\u00a2Q\u0005\u00f3\u00d9\u00b8x?\u008eP\u00aaG\u0099h\u00dc\u00e4@4\u00f2\u00a9zH\u009fJ\\y\u00ccu\u00bf\u00bdW\u00dd\u00eb\u0014\u00f1\u00f5N\u00f9\u00ac\u0016\u00af\u00cd\u00c4Y#<kd\u00d1ok\u00f4\u00danyb\u0080\u00ce\u00fc\u00f4\u0089ct^^|6\u00d8\u001c\u00ac\r\u00b3~\u00d5\u00dd}b\u00f0U\u00c7PO\u00b5\u00b5\u00de\u00b4p\u00dfQy\u00ec\u00a7s\u00a3\u009e[\u00c3i\u00ab\u00a6\"s`\u0099e\u00b6\u00a9L\ru\u00c2a\u00bdB\u00ed\u00d6a\u0000{\u001dG\u00c1\u00ce\u00d0\u001d\u00bc\u0095\u001e\u00de*\u00d7Y\u00c8\u00fc\b\u00ad3\u00e5\u00b3\u009a\u00c6\u008b\u00fb\u00d1A\u009b\u00a9\u00dcM\u00b9\u00ad\u00f2\u00e6\u00b2\u0095\u00f66o\u00b8\u00dd\u00ac's\u00e7\u0019|m\u00cb\u00b9\u00b8\u00fd\u001dw\\2\u00b1n \u0096S\u00e7\u00f2|\u001b\u00be\u00ef\u00bb\u00c7Y\u0005\u0088\u00e5\u00f3\u00ec \u00c9o\u00f6\u00bc\u00e6\u00ad\u00f5\u0099\u00d19\u000e2\u00b1(`VX\u009d\b\u0089 p\u008c2XE*\u0094>\u0084\u000b\u00d6\u00a9\u00cd\",|\u008e2e\u00c6\u00818Jk\u00c0\u00a3\u001c\u00c7P\u00ea,\u00a31U\u00b4\u0006&\u0085mZ3\u0016\u00ce\u0004\u00b2D\u00cc\u0097\u00df\u00fe\u00f1{\u0000\u0000\u0000\u00ff\u00ff\u00c0d\u00f7\u007fJ\u0010\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "74"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22440\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00e3\u00f42\u00e42\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x95d89b41\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "86"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22440\u00d2Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00c4\u00d4\u00dc$\u00cd$\u00d5\u00c4\u0094\\\u0003\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u00e1\u00b20\u00a6\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "74"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22440\u00d6Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00be\u00d2Tt2\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x313ce567\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "71"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22440\u00d1Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018\u001a)\u00d5r\u0001\u0002\u0000\u0000\u00ff\u00ff\u0012fF\u00e8j\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "74"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22440\u00d5Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u0018\u00be\u008f\u001f2\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x06fdde03\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "100"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22440\u00d3Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0 \u00c9\u00d4\u00dc\u00dc\u00c8\u00cc\u00d0\u00dc\u00c0\u00dc\u00c0\u00cc\u00d4\u00cc\u00c4\u00c8\u00c0$\u00cd$\u00d5\u00c4\u0094x\u0003\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u001f\u00e6\u0007b\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "514"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0B4\u00b1\u0083\u00b1M\u00bb~\u0086\u00d5\u001d\u0094~\u00a8\u00bf>\u00f3\u00f4\u0003V`\u00f6\u0011\u009b\u0096\u0098\u008a7!y\u008f\u0084\u0086\u00a2Z\u0093b2\u009aK\"\u00c5\u0086\u00d5\u00d7D\u00cd\u0085\u0012\u00bd39\u00a2f\u00d6\u0014k\u0010o\u0003t\u0007\u00c2\u00af\u00bbMi\u00e3\u0003%V\u0013\u00aaE\u00e8\u00a0\u000e\u00dby\u00e4:\u007f\u0010\u0019\u00db4\u00c1j\u00bb\u00eb\u00fb\u000e\u00ean\u00b3\u00eby^\u00df\u00b6O<}\u009b\u009a<\u00fc\u0016\n+\u0017\u00e8@\u00c7as\u00a8\u0098B&\u0088\u008acM\u00a4\u00acR\u00d8\u00b3\u00da\u001a0\u008b\u00a9.!\u00e5by\u0099t\u00fd\u008c(\u00bb\u00b2h\u00ef\u0087\u00eb\tV\u00df\u00ef\u0080\u001f\u00a7\u0083\u00d97\u00f6)\u00b7lU1\u0015dTl\u00b9p\u008dMmK\u0081K \u0016\u00a91?\u00caz\u001b\u009f\u0084g~(\u0099\u000b\u00e1|\u00b0\u0019\u00139\u00a7n\u00f9>\u00c8\u00fe\u00b2\u0095\u00b6?\u008ch\u00b0D\u00bf\u0019n\u0017o\u0094\u00fb\u00a9u0\u000f7\u00eb\u00baX\u0003f/\u00a2\u00e4\u0089\u0005K\u00a3\u009ar\t\u00b9R1!i\u00b51\ts\u00f6T8*\u0006[\u001d#\u0006J\u00ea=;QO\u00b6\u00d8\u00a6\u00d0\u009dy\u00f5\u0005\u00f9\u009d&I\u00be9a\u00c1T)Ih\u008e\u0098mh\u008d\b)\u0093\t(\u00d1\u00fblQ\u00e1\u00aa\u0083y\u00e4\u00ed\u00c4u^\u000f\u00db\u00a7\u00e0T\u00ac\u00f5\u00e4k\u000e\u00e4S\u000eV\u00ab\u0016S\nG\u00c7\u00c2F\u00a9x*\u00ce\u0088A\u008e.\u00b4,\u0098\u009c\b\u0087 \u001a\u008a\u00a7E\u00e13\u00da'k\u0003\u00dc_\u001d\u0096\u00ecc?\u00fcY\u00d8#\u00cf\u00a7\u0017\u0015<\u0096\u00e3\u00c9\u0084\u00d3\u00c9\u00ce_\u00fd\u0097\u0083^\u00c3\u00f1/\u00fa\u00d7\u00e0\u0098\u00a0\u00cbq\u00da\u0082\u00f3\u00bd#8c\u00c5\u00ff\u0005t0\u00cd<\u00ef\u000e\u00b7f\u00d9\u00eby\u00b8\u00f4\u00ec\u00bc\u00f1\u000e\u00df\u00bf\u00fb\u001d\u0000\u0000\u00ff\u00ffXHrn6\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "514"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0B4\u00a9\u0083\u00b1M\u00bb~\u0086\u00d5\u001d\u0094~\u00a8\u00bf>\u00f3\u00f4\u0003V`\u00f6\u0011\u009b\u0096\u0098\u008a7!y\u008f\u0084\u0086\u00a2Z\u0093b2\u009aK\"\u00c5\u0086\u00d5\u00d7D\u00cd\u0085\u0012\u00bd39\u00a2f\u00d6\u0014k\u0010o\u0003t\u0007\u00c2\u00af\u00bbMi\u00e3\u0003%V\u0013\u00aaE\u00e8\u00a0\u000e\u00dby\u00e4:\u007f\u0010\u0019\u00db4\u00c1j\u00bb\u00eb\u00fb\u000e\u00ean\u00b3\u00eby^\u00df\u00b6O<}\u009b\u009a<\u00fc\u0016\n+\u0017\u00e8@\u00c7as\u00a8\u0098B&\u0088\u008acM\u00a4\u00acR\u00d8\u00b3\u00da\u001a0\u008b\u00a9.!\u00e5by\u0099t\u00fd\u008c(\u00bb\u00b2h\u00ef\u0087\u00eb\tV\u00df\u00ef\u0080\u001f\u00a7\u0083\u00d97\u00f6)\u00b7lU1\u0015dTl\u00b9p\u008dMmK\u0081K \u0016\u00a91?\u00caz\u001b\u009f\u0084g~(\u0099\u000b\u00e1|\u00b0\u0019\u00139\u00a7n\u00f9>\u00c8\u00fe\u00b2\u0095\u00b6?\u008ch\u00b0D\u00bf\u0019n\u0017o\u0094\u00fb\u00a9u0\u000f7\u00eb\u00baX\u0003f/\u00a2\u00e4\u0089\u0005K\u00a3\u009ar\t\u00b9R1!i\u00b51\ts\u00f6T8*\u0006[\u001d#\u0006J\u00ea=;QO\u00b6\u00d8\u00a6\u00d0\u009dy\u00f5\u0005\u00f9\u009d&I\u00be9a\u00c1T)Ih\u008e\u0098mh\u008d\b)\u0093\t(\u00d1\u00fblQ\u00e1\u00aa\u0083y\u00e4\u00ed\u00c4u^\u000f\u00db\u00a7\u00e0T\u00ac\u00f5\u00e4k\u000e\u00e4S\u000eV\u00ab\u0016S\nG\u00c7\u00c2F\u00a9x*\u00ce\u0088A\u008e.\u00b4,\u0098\u009c\b\u0087 \u001a\u008a\u00a7E\u00e13\u00da'k\u0003\u00dc_\u001d\u0096\u00ecc?\u00fcY\u00d8#\u00cf\u00a7\u0017\u0015<\u0096\u00e3\u00c9\u0084\u00d3\u00c9\u00ce_\u00fd\u0097\u0083^\u00c3\u00f1/\u00fa\u00d7\u00e0\u0098\u00a0\u00cbq\u00da\u0082\u00f3\u00bd#8c\u00c5\u00ff\u0005t0\u00cd<\u00ef\u000e\u00b7f\u00d9\u00eby\u00b8\u00f4\u00ec\u00bc\u00f1\u000e\u00df\u00bf\u00fb\u001d\u0000\u0000\u00ff\u00ff\u00f8\u00c1\u00df\u00996\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "514"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0B4\u00b9\u0083\u00b1M\u00bb~\u0086\u00d5\u001d\u0094~\u00a8\u00bf>\u00f3\u00f4\u0003V`\u00f6\u0011\u009b\u0096\u0098\u008a7!y\u008f\u0084\u0086\u00a2Z\u0093b2\u009aK\"\u00c5\u0086\u00d5\u00d7D\u00cd\u0085\u0012\u00bd39\u00a2f\u00d6\u0014k\u0010o\u0003t\u0007\u00c2\u00af\u00bbMi\u00e3\u0003%V\u0013\u00aaE\u00e8\u00a0\u000e\u00dby\u00e4:\u007f\u0010\u0019\u00db4\u00c1j\u00bb\u00eb\u00fb\u000e\u00ean\u00b3\u00eby^\u00df\u00b6O<}\u009b\u009a<\u00fc\u0016\n+\u0017\u00e8@\u00c7as\u00a8\u0098B&\u0088\u008acM\u00a4\u00acR\u00d8\u00b3\u00da\u001a0\u008b\u00a9.!\u00e5by\u0099t\u00fd\u008c(\u00bb\u00b2h\u00ef\u0087\u00eb\tV\u00df\u00ef\u0080\u001f\u00a7\u0083\u00d97\u00f6)\u00b7lU1\u0015dTl\u00b9p\u008dMmK\u0081K \u0016\u00a91?\u00caz\u001b\u009f\u0084g~(\u0099\u000b\u00e1|\u00b0\u0019\u00139\u00a7n\u00f9>\u00c8\u00fe\u00b2\u0095\u00b6?\u008ch\u00b0D\u00bf\u0019n\u0017o\u0094\u00fb\u00a9u0\u000f7\u00eb\u00baX\u0003f/\u00a2\u00e4\u0089\u0005K\u00a3\u009ar\t\u00b9R1!i\u00b51\ts\u00f6T8*\u0006[\u001d#\u0006J\u00ea=;QO\u00b6\u00d8\u00a6\u00d0\u009dy\u00f5\u0005\u00f9\u009d&I\u00be9a\u00c1T)Ih\u008e\u0098mh\u008d\b)\u0093\t(\u00d1\u00fblQ\u00e1\u00aa\u0083y\u00e4\u00ed\u00c4u^\u000f\u00db\u00a7\u00e0T\u00ac\u00f5\u00e4k\u000e\u00e4S\u000eV\u00ab\u0016S\nG\u00c7\u00c2F\u00a9x*\u00ce\u0088A\u008e.\u00b4,\u0098\u009c\b\u0087 \u001a\u008a\u00a7E\u00e13\u00da'k\u0003\u00dc_\u001d\u0096\u00ecc?\u00fcY\u00d8#\u00cf\u00a7\u0017\u0015<\u0096\u00e3\u00c9\u0084\u00d3\u00c9\u00ce_\u00fd\u0097\u0083^\u00c3\u00f1/\u00fa\u00d7\u00e0\u0098\u00a0\u00cbq\u00da\u0082\u00f3\u00bd#8c\u00c5\u00ff\u0005t0\u00cd<\u00ef\u000e\u00b7f\u00d9\u00eby\u00b8\u00f4\u00ec\u00bc\u00f1\u000e\u00df\u00bf\u00fb\u001d\u0000\u0000\u00ff\u00ff\u00fe\u00bex\u00c06\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionByHash\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "455"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00fft\u0090An\u001b1\fE\u00f7=\u0086\u00d6\u0083B\u00a4$\u008a\u00f2\t\u00daM\u00d1+\u0090\u0014\u00d9\u00b8\u008d\u00ed`l\u0017\u0001\u0082\u00dc\u00bd\u0018O\u00d0]\u00b8\"?\u00f0?\u00f8\u00df[\u00fa}\u00bd\u009c\u00d7\u0017K\u0087\u0084_sZ\u00d2q\u00a6\u0003\u0000\u00e4%\u00ad~\u00bd?\u00df\u00d2\u00e1-\u00e9\u00f3\u00c5\u00fe|\u0093\u00ebS:\u00a4\u00fc\u00da\u00c1C;k\u00cb\u00c4\u00ad\u0001B\u00c6\u001e%s\u00e7\u001cC\u0019\u0003\u001c\u00ac\u0019\u00a3W\u00d2\u00dej\u001e\u001dbHp7\u009a\u00adPZ\u00f6\u00c0\u001f\u00f7\u0093\u00fa\u00fa\u0088\u0004\u00cbd\u0005\u00d2\u0092b\u00bd\u009c\u001e\u0012e\u00c5L3f\u0095`\f\u0089\u00a9\u00d2$\u008a\u0011\u008c\u0099\u00ad2\u00e0\u00d0\"\u009b\u00e7\u0097\\\u00f7\u0094Bn\u00fb\u00fds=\u009a\u00efb\u00af\u00dc\u00c99o\u00e5\u009e\u00few\u0088YJ\u00c3f\u0083\u00b0\u00f1\u00a0\u0012\u0016\u009aU\u00a5W\u0099\u0092\u0003\u00b5\u00a1\u00d6<3H\u00af\u00e4c\u0002\u00d79\u0085h\u0006i\u00c3\u00d8@\u009d_\u00ee\u00b7G\u0098\u008c\u00dc\u0086\u00a9\u00e6O\u0086\u009b\u00d7)\u0013\u00d8\u0090'yE\u0091B\u00ee\u0088\u0080\u00033\u00c1\u00ec\u00ad\u008d\u0002\u00f1\u0099\u00ff\u00b3\u00a9\u008d\u00ca\u0000\u00c6Z\u00a3nwZ\u00d2\u00f9r\u00fe\u00e8\u00cd\u009c\u0096\u00b4~\u00a0\u00ec\u0001\u00ea\u00cc\u0013\u0010\u0099U:\u00a0\u0099\u0085i\u00946\u00abSL.\u0096y\u00f8,\u00d0M\u008ai\u0019yd\u001f8\u00dd\u00a0\u00a7%\u00ed\u0080K\u00b8A3\u001d\u00acT\u001b`\u00f0\u00c8\u009d\u00db\u0010\u00e6n\u000e\u00b5k\u008d\u00d2\u00ab\u00fa,V\u00b0h&h\u00ea\u00049\u0007k\u00a3\u00ed\u00a3\u00db\u00f1\u00e4\u00d7\u009b\u009c^\u00f6\u00cf\u00d0+0m8o\u0097\u0087\u00e2\u00d2x\u00f8(\u0011\u00c0\n\u0002\u0001>T\u00ac{\u0014g\u0012%\u00949\u00ad\u008f\u00cd\u00b1\u00ca\u00f9*v;^\u00ce\u00df\u00cf\u00d3_\u00f7\u00c4\u00b4\u00a4\u00bf\u008f\u00cdHl\u00b0\u0094M\u0090\u00e7\u00fbN%\u00a7\u00f7\u00f7/\u00ff\u0002\u0000\u0000\u00ff\u00ff6\u008aZ\u00aa\u00f5\u0002\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x1c06c31\", false]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "96"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "1160"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0094\u0094\u00bd\u008e$\u00b9\r\u00c7s?F\u00c5\r\u0083\u00e2\u0097\u00c8\r\r\u0007\u000e\u001c\u0018\u0006.:\\@Q\u00d4m\u001b;\u00d3\u008b\u00e9^c\u00ec\u00c3\u00bd\u00bbQ]=s\u00b3\u009bYhT\u00ab(\u00e9\u00cf\u001f)\u00b2~\u00db\u00feu\u00bd<\u00bf|\u00cd\u00ed\u00d3\u0086\u007f\u0086\u00ed\u00b4\u009d\u00e7\u00f6\u00a9\u00b5\u00d6N\u00dbK]\u00bf}\u00b9m\u009f~\u00db\u009e\u00bf=\u008dz\u00d9>m\u00f0\u00da\u00124\u00a9m\u00a7\u00eds\\?\u00dfM\u00bd\u00d5\u001a\u00dd\u0086\u0080\u009aH\u00c3\u0006\u00d8\u0017\u0081u\u0083\u00e5\u00c3p\u00b5j)iX\u00ac\u00a3\u000b\u0083\u00f7\u00b6<\u0096\u00f5\u00d4)\u00a4\u00dbi\u00fb\u001a/\u00f5|\u00fb\u00db\u009b\"k\u00cc\u0081-,\u00b5\u008b\u0086G\u008f\u00f0\u0098=\u009d&\u00ae\u00a9\u0018Ms8I#\u00a5n}\u00f1$\u0080\u0099+,\u0083&m\u00a7\u00ed\u00f9\u00f2\u009cu\u0017\u0083\u001f\u00c6v\u00da\u009e\u00ce\u00af\u00ef\u00be~\\\u00fe\u007f\u00c7v\u00da\u00ae\u009f\u0083~z\u00ce/u=R43y\u0096\u00cd\u00ca.\u00b3G\f\u0093!\u00da\u0087fNn1\u00a9!K\u001b\u00ce\u0016\u009d\u001b-\u0088\u00c6\u00b8&\u00c3d'\u00ee\u00dbi\u00fbr\u00f9\u00f5\u00fa\u0097/\u0097\u00cb\u00d3\u0003\u0011\u0001\u00c0>z\r\u0005h\u00b1\u00cf\u0010\u00f8ni\u00fcXj\u008f?\u0003\u00e0\u00c7\u009c\u0011\u000e\u008d\u00bb\b\u0003\u0098\u0081\u001e\u00b6v7\u0003\u0001<\u00b6\u001cGl\u00ff\u0019\u00e0nj\u00efB\u00bc\u00db\u00f6'\u0080\u001f\u001b\u00a0\u00ed\u00da\u0006\f\u00fc\u001d\u001eB{\u00f7\u000e\u0080wv\u001c\u00f4@\u00c3\u0007(\u00ee(\u00f8\u00b6\u00e9\u00fd\u00f1\u0006\u00a2{\u0080Fv\u008f\u0006\u008f\u00a5\u0084\u00f6\u00d1\u0011}|\u00c1#>\u00db\u00e1\u00e0\u00002\u00fd\u00a0\u00da\u00e0=\u008d\u00fbt\u00f7\u00feX\u00b1{\u00bc\u0007p\u00c3\u00d6\u00de\u008e\u00bfI\u00a2\u00ee\u0004\u00df\u00dd\u00c0\u00fb\u000b\u00bfe\u00ab\u00fd\u00e1\u00c5\u00e2-#\u00fb\u00f5\u00d8\u001b\u00b3\u00bd\u009f\u00f2\u001f/\u0014?\u00b0\u00c9\u00bb\u00fbc\u00ec%v\u008b[\u00fd\u00f3r\u00b9=:\u00ce;\u00a4f\u00f3\u0004\u00eb\u00aa\u00cd\u0011\u0014\u0015\u0087\u00b5\u001a\u0092m\u0091\u00a1D4*&\u0091nE\u00b2\u0012\"\u00cd\u00b1\u0013\u00ad\u00ba\u00b7\u00c0\u00f3\u00a3\u00a3\u00ab\u0007#L\u001f\u00cd\u00a0b\r\u00f0\u0019B\u00c8Y+\u0017\u00eb4q\u00e4B\u00dbN\u00db<\u00afu\u00ceo_n\u00ff9\u00ear;m\u00f5z{\u0089\u00bf\u00c6-\u00ee\u0096\u009d\u00f4\u00fc\u00df\u00a3\u00ef\u001a\u0005o\u00a7\u00ed\u00d7\u00b8\u00fe\u00fd\u00fct>\u00c09y\u00f0=\u00a0_\u00e3\u00fa\u00d3\u00b5\u00e6\u0011\u000eH\u00f9\u00be\u00f7\u00df/\u00eb8:\u009c\u00a9\u00f6\u001e)\u00f5\u008eD3\u00b3\u0003K\u00d7\u009cV\u00d8\u0091\u00d50D\u00b4\u00a9)\u0095\u008fi\u00d2\u001c\u00dc\u0080Gs\u00a5C\u00ea\u001f/\u0097\u00cb\u00a17\u00f6\u00ce\u00e2\u001c\u00c9\u00dc\u00d9\u009c\u00e7Z\u00d0\u00d3E\u0016b\u00c5B\u0000\u00ef\u00a8\u00e9ciM]\u00ab\u00a4\u008fQ(\u00b4xF\u008d\u00ae\u009e\u0012\\6\u00bc\ne\u00e9(\u00a4\u00eek/Jwm\r\u0092\u0007\u00aeY\u0080E6\u009bH\u00b5\u00c9\u00e5\u00ab\u001ci\u00ac\u0086\u0090\u00d6-2d\r\u00b6\u00a2\u00deQ&\u000er\u0084n\u00da\u0097\u0096\u00f22\u00cep\u00cf\u0098\u000b\u00d6hk\u00f4YJ\u0096\u0098\t{<\u00b7\u00f3S]o\u00f1\u00f4\u00f5\u001e\u0090bq3]\u00fb\u00c2K<_#o\u00e7\u00cb\u00f3\u00f5\u00bd@J\u00a4\u00a64D%\u0094\u0019\u00e0\u00d8\u0013s\u0096Ib\u00f2\u0010[\u00ee\u0012\u00e6\u00ca\u00b4v\u00ff\u0095`L\u00884R\u00c4q\u00ff\u0004\u00bdT\u00d6\u00f9\u00eb\u00ed\u000f\u00cd\u00a4.k\bK\u0016\u00ad\u0089V0\b\u00a1\u0019\u0013\u0099\u00d0\u00dc\u00a3+\u009f\\\u00c2D\u00a3J\u00cd\u00b3tt\u00f3>G\u00e3!\u00dbi\u00fb\u00f6\u00f8H\u00fe\u00fc\u00cb\u00f7\u00dc\u00db\u00a7\u009f7xEB)\u0000\u00a4l\u00cc\u0011\u00c3\u00b3i\u000b[\u00ae\u008d1IR\u00a8\u00e9$\u00ce\u00a1\u000e\u008b\u00cdl/|rNf\u00a6\u0019\u00dbi\u0083\u00d7e\u00e1\u00b1b\u00eeW\u00e70)z\u0012g\u0088s1A\u0092\u00e2\u009c\rPg\u00a1i\u00d7\u00d6QY\u0004j\u00ef\u008eb\u00b0\u00bbH\u0013\u00f3E\u000e\u00c2h<\u00b0!\u00c7$\u00f2\u000e\u00a8\u0092)\u00de;D\u00e4j}\u0011\u0091i\u00c8tT(\u00b3\u0099i\u0083\u00c6A\u00d2\u0017\u00ae)\u00d6f\u001f\u00c6;\u00f3\u0014'\u00ef\u0003g\u00eb`8\u001c\u008d\u0082\u00bc\u008b\u00ead\u001a\u00dcp,&!\u0018>T\u000e\u0011R\u009a0$\u00a4\u00b4\u0093a\u00e7\u00e6\u00a8\u00a1\u00e5\u000bda\u00ad\u00c9C5\u00f6\"\u009eK|5\u009f\u008e\u00a4\u00de\u0096\u008c\u00ee\u00caGN\u00c8\u0007w)\u0084\u009aZ6\u00a8\u0013\t$\u00d8r\u00b0&\u00a3f\b\u000e`\u009b\u00d2ha\u00a1\u000f\u0018s,\u0007\u00e7\u00a8\u00c0\u0083\u00a4\u00afI$(\u00e9\u008ab\u00ae\u00b4r\r\u0018#:\u00c7\fX8\u0004\u0007\u00c3\u0084\u0016\u009d\u00b5|6\u00e39Cu.\u001d\u0082\u00eb.\u00c2\u00c1c\u00ee-\u001a#Z\u00a4\u00aa\u00f4ZC2\u008c\b\u00a23\u00a7\u00a5I\u00e9$\u00b4\u00ae2)V\u00db[\u0096\u00e7\u001c+2\u00b6_~\u00ff\u00fdO\u00ff\u000b\u0000\u0000\u00ff\u00ff\u009d\u0084\u00f0\u001b\u00b4\b\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "514"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0BD\u00ea`l\u00d3\u00ae\u009fau\u0007\u00a5\u001f\u00ea\u00af\u00cf<\u00fd\u0080\u0015\u0098}\u00c4\u00a6%\u00a6\u00e2MH\u00de#\u00a1\u00a1\u00a8\u00d6\u00a4\u0098\u008c\u00e6\u0092H\u00b1a\u00f55Qs\u00a1D\u00efL\u008e\u00a8\u00995\u00c5\u001a\u00c4\u00db\u0000\u00dd\u0081\u00f0\u00ebnS\u00da\u00f8@\u0089\u00d5\u0084j\u0011:\u00a8\u00c3v\u001e\u00b9\u00ce\u001fD\u00c66M\u00b0\u00da\u00ee\u00fa\u00be\u0083\u00ba\u00db\u00ecz\u009e\u00d7\u00b7\u00ed\u0013O\u00df\u00a6&\u000f\u00bf\u0085\u00c2\u00ca\u0005:\u00d0q\u00d8\u001c*\u00a6\u0090\t\u00a2\u00e2X\u0013)\u00ab\u0014\u00f6\u00ac\u00b6\u0006\u00ccb\u00aaKH\u00b9X^&]?#\u00ca\u00ae,\u00da\u00fb\u00e1z\u0082\u00d5\u00f7;\u00e0\u00c7\u00e9`\u00f6\u008d}\u00ca-[UL\u0005\u0019\u0015[.\\cS\u00dbR\u00e0\u0012\u0088Ej\u00cc\u008f\u00b2\u00de\u00c6'\u00e1\u0099\u001fJ\u00e6B8\u001fl\u00c6D\u00ce\u00a9[\u00be\u000f\u00b2\u00bfl\u00a5\u00ed\u000f#\u001a,\u00d1o\u0086\u00db\u00c5\u001b\u00e5~j\u001d\u00cc\u00c3\u00cd\u00ba.\u00d6\u0080\u00d9\u008b(yb\u00c1\u00d2\u00a8\u00a6\\B\u00aeTLHZmL\u00c2\u009c=\u0015\u008e\u008a\u00c1V\u00c7\u0088\u0081\u0092z\u00cfN\u00d4\u0093-\u00b6)tg^}A~\u00a7I\u0092oNX0UJ\u0012\u009a#f\u001bZ#B\u00cad\u0002J\u00f4>[T\u00b8\u00ea`\u001ey;q\u009d\u00d7\u00c3\u00f6)8\u0015k=\u00f9\u009a\u0003\u00f9\u0094\u0083\u00d5\u00aa\u00c5\u0094\u00c2\u00d1\u00b1\u00b0Q*\u009e\u008a3b\u0090\u00a3\u000b-\u000b&'\u00c2!\u0088\u0086\u00e2iQ\u00f8\u008c\u00f6\u00c9\u00da\u0000\u00f7W\u0087%\u00fb\u00d8\u000f\u007f\u0016\u00f6\u00c8\u00f3\u00e9E\u0005\u008f\u00e5x2\u00e1t\u00b2\u00f3W\u00ff\u00e5\u00a0\u00d7p\u00fc\u008b\u00fe58&\u00e8r\u009c\u00b6\u00e0|\u00ef\b\u00ceX\u00f1\u007f\u0001\u001dL3\u00cf\u00bb\u00c3\u00adY\u00f6z\u001e.=;o\u00bc\u00c3\u00f7\u00ef~\u0007\u0000\u0000\u00ff\u00ffM\u00cf\u0003c6\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "514"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0BD\u00db\u00c1\u00d8\u00a6]?\u00c3\u00ea\u000eJ?\u00d4_\u009fy\u00fa\u0001+0\u00fb\u0088MKL\u00c5\u009b\u0090\u00bcGBCQ\u00adI1\u0019\u00cd%\u0091b\u00c3\u00eak\u00a2\u00e6B\u0089\u00de\u0099\u001cQ3k\u008a5\u0088\u00b7\u0001\u00ba\u0003\u00e1\u00d7\u00dd\u00a6\u00b4\u00f1\u0081\u0012\u00ab\t\u00d5\"tP\u0087\u00ed<r\u009d?\u0088\u008cm\u009a`\u00b5\u00dd\u00f5}\u0007u\u00b7\u00d9\u00f5<\u00afo\u00db'\u009e\u00beMM\u001e~\u000b\u0085\u0095\u000bt\u00a0\u00e3\u00b09TL!\u0013D\u00c5\u00b1&RV)\u00ecYm\r\u0098\u00c5T\u0097\u0090r\u00b1\u00bcL\u00ba~F\u0094]Y\u00b4\u00f7\u00c3\u00f5\u0004\u00ab\u00efw\u00c0\u008f\u00d3\u00c1\u00ec\u001b\u00fb\u0094[\u00b6\u00aa\u0098\n2*\u00b6\\\u00b8\u00c6\u00a6\u00b6\u00a5\u00c0%\u0010\u008b\u00d4\u0098\u001fe\u00bd\u008dO\u00c23?\u0094\u00cc\u0085p>\u00d8\u008c\u0089\u009cS\u00b7|\u001fd\u007f\u00d9J\u00db\u001fF4X\u00a2\u00df\f\u00b7\u008b7\u00ca\u00fd\u00d4:\u0098\u0087\u009bu]\u00ac\u0001\u00b3\u0017Q\u00f2\u00c4\u0082\u00a5QM\u00b9\u0084\\\u00a9\u0098\u0090\u00b4\u00da\u0098\u00849{*\u001c\u0015\u0083\u00ad\u008e\u0011\u0003%\u00f5\u009e\u009d\u00a8'[lS\u00e8\u00ce\u00bc\u00fa\u0082\u00fcN\u0093$\u00df\u009c\u00b0`\u00aa\u0094$4G\u00cc6\u00b4F\u0084\u0094\u00c9\u0004\u0094\u00e8}\u00b6\u00a8p\u00d5\u00c1<\u00f2v\u00e2:\u00af\u0087\u00edSp*\u00d6z\u00f25\u0007\u00f2)\u0007\u00abU\u008b)\u0085\u00a3ca\u00a3T<\u0015g\u00c4 G\u0017Z\u0016LN\u0084C\u0010\r\u00c5\u00d3\u00a2\u00f0\u0019\u00ed\u0093\u00b5\u0001\u00ee\u00af\u000eK\u00f6\u00b1\u001f\u00fe,\u00ec\u0091\u00e7\u00d3\u008b\n\u001e\u00cb\u00f1d\u00c2\u00e9d\u00e7\u00af\u00fe\u00cbA\u00af\u00e1\u00f8\u0017\u00fdkpL\u00d0\u00e58m\u00c1\u00f9\u00de\u0011\u009c\u00b1\u00e2\u00ff\u0002:\u0098f\u009ew\u0087[\u00b3\u00ec\u00f5<\\zv\u00dex\u0087\u00ef\u00df\u00fd\u000e\u0000\u0000\u00ff\u00ffK\u00b0\u00a4:6\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0x85E4DAd18c28d6e42aA36Ee221292061D755931f\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "66"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22444\u00d1Q*J-.\u00cd)Q\u00b2R2\u00a8P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00a2\u00b1Oz*\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0x60b206dFD4af82FaFdbA5Af3C619D0c48129b3a1\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "66"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22444\u00d5Q*J-.\u00cd)Q\u00b2R2\u00a8P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00e1z\u00e9\u00fd*\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Date": [],
                    "Content-Length": [
                        "514"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0B\u00c4\u00d0\u00c1\u00d8\u00a6]?\u00c3\u00ea\u000eJ?\u00d4_\u009fy\u00fa\u0001+0\u00fb\u0088MKL\u00c5\u009b\u0090\u00bcGBCQ\u00adI1\u0019\u00cd%\u0091b\u00c3\u00eak\u00a2\u00e6B\u0089\u00de\u0099\u001cQ3k\u008a5\u0088\u00b7\u0001\u00ba\u0003\u00e1\u00d7\u00dd\u00a6\u00b4\u00f1\u0081\u0012\u00ab\t\u00d5\"tP\u0087\u00ed<r\u009d?\u0088\u008cm\u009a`\u00b5\u00dd\u00f5}\u0007u\u00b7\u00d9\u00f5<\u00afo\u00db'\u009e\u00beMM\u001e~\u000b\u0085\u0095\u000bt\u00a0\u00e3\u00b09TL!\u0013D\u00c5\u00b1&RV)\u00ecYm\r\u0098\u00c5T\u0097\u0090r\u00b1\u00bcL\u00ba~F\u0094]Y\u00b4\u00f7\u00c3\u00f5\u0004\u00ab\u00efw\u00c0\u008f\u00d3\u00c1\u00ec\u001b\u00fb\u0094[\u00b6\u00aa\u0098\n2*\u00b6\\\u00b8\u00c6\u00a6\u00b6\u00a5\u00c0%\u0010\u008b\u00d4\u0098\u001fe\u00bd\u008dO\u00c23?\u0094\u00cc\u0085p>\u00d8\u008c\u0089\u009cS\u00b7|\u001fd\u007f\u00d9J\u00db\u001fF4X\u00a2\u00df\f\u00b7\u008b7\u00ca\u00fd\u00d4:\u0098\u0087\u009bu]\u00ac\u0001\u00b3\u0017Q\u00f2\u00c4\u0082\u00a5QM\u00b9\u0084\\\u00a9\u0098\u0090\u00b4\u00da\u0098\u00849{*\u001c\u0015\u0083\u00ad\u008e\u0011\u0003%\u00f5\u009e\u009d\u00a8'[lS\u00e8\u00ce\u00bc\u00fa\u0082\u00fcN\u0093$\u00df\u009c\u00b0`\u00aa\u0094$4G\u00cc6\u00b4F\u0084\u0094\u00c9\u0004\u0094\u00e8}\u00b6\u00a8p\u00d5\u00c1<\u00f2v\u00e2:\u00af\u0087\u00edSp*\u00d6z\u00f25\u0007\u00f2)\u0007\u00abU\u008b)\u0085\u00a3ca\u00a3T<\u0015g\u00c4 G\u0017Z\u0016LN\u0084C\u0010\r\u00c5\u00d3\u00a2\u00f0\u0019\u00ed\u0093\u00b5\u0001\u00ee\u00af\u000eK\u00f6\u00b1\u001f\u00fe,\u00ec\u0091\u00e7\u00d3\u008b\n\u001e\u00cb\u00f1d\u00c2\u00e9d\u00e7\u00af\u00fe\u00cbA\u00af\u00e1\u00f8\u0017\u00fdkpL\u00d0\u00e58m\u00c1\u00f9\u00de\u0011\u009c\u00b1\u00e2\u00ff\u0002:\u0098f\u009ew\u0087[\u00b3\u00ec\u00f5<\\zv\u00dex\u0087\u00ef\u00df\u00fd\u000e\u0000\u0000\u00ff\u00ff\u00145\u00ef\u00de6\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"blocks\", \"variables\": {\"token_id\": \"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\"}, \"query\": \"query blocks($token_id: ID!) {\\n        t29387825:\\n            token(id: $token_id, block: {number: 29387825}) {\\n              __typename\\n              derivedETH\\n            }\\n        b29387825:\\n            bundle(id: \\\"1\\\", block: {number: 29387825}) {\\n              ethPrice\\n              __typename\\n            }\\n        }\"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "449"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "Date": [],
                    "graph-attestable": [
                        "true"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "Content-Length": [
                        "184"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"b29387825\":{\"__typename\":\"Bundle\",\"ethPrice\":\"0.2193937228982400273770436531868526\"},\"t29387825\":{\"__typename\":\"Token\",\"derivedETH\":\"0.09756155833171828459348849194961854\"}}}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"blocks\", \"variables\": {\"token_id\": \"0xcf664087a5bb0237a0bad6742852ec6c8d69a27a\"}, \"query\": \"query blocks($token_id: ID!) {\\n        t29387825:\\n            token(id: $token_id, block: {number: 29387825}) {\\n              __typename\\n              derivedETH\\n            }\\n        b29387825:\\n            bundle(id: \\\"1\\\", block: {number: 29387825}) {\\n              ethPrice\\n              __typename\\n            }\\n        }\"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "449"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "Date": [],
                    "graph-attestable": [
                        "true"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "Content-Length": [
                        "148"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"b29387825\":{\"__typename\":\"Bundle\",\"ethPrice\":\"0.2193937228982400273770436531868526\"},\"t29387825\":{\"__typename\":\"Token\",\"derivedETH\":\"1\"}}}"
                }
            }
        }
    ]
}
