{
    "version": 1,
    "interactions": [
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "66"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "71"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00e2\u00b6\u001dV/\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x95d89b41\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "147"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "84"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00d2Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00d4\u00d4\u00cc\u00c4\u00d2\u00d4\u00c0\u00c4\u00d4\u0094L\u00a3\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u009d\u00ce\u00fb`\u00e7\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "66"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "71"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00d6Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00bf\u0090{\u00c6/\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x313ce567\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "147"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "68"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00d1Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018\u001a)\u00d5r\u0001\u0002\u0000\u0000\u00ff\u00ff\u0003a\u00aa\u001eg\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "66"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "71"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00d5Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u0019\u00fc\u00a0\u00ad/\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x06fdde03\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "147"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "84"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00d3Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00d4\u00d4\u00cc\u00cc\u00d2\u00dc\u00c0\u00cc\u00d4\u009cL\u00a3\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u00c6\u00fa\u00f5\u001c\u00e7\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"coininfo\", \"variables\": {\"token_address\": \"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\"}, \"query\": \"\\n        query coininfo($token_address: ID!)  {\\n            pair(id: $token_address) {\\n                id\\n                __typename\\n                token0 {\\n                  id\\n                  __typename\\n                  symbol\\n                  name\\n                  decimals\\n                  totalSupply\\n                  tradeVolumeUSD\\n                  txCount\\n                  totalLiquidity\\n                  derivedETH\\n                }\\n                token1 {\\n                  id\\n                  __typename\\n                  symbol\\n                  name\\n                  decimals\\n                  totalSupply\\n                  tradeVolumeUSD\\n                  txCount\\n                  totalLiquidity\\n                  derivedETH\\n                }\\n            }\\n            token(id: $token_address) {\\n                id\\n                __typename\\n                symbol\\n                name\\n                decimals\\n                totalSupply\\n                tradeVolumeUSD\\n                txCount\\n                totalLiquidity\\n                derivedETH\\n            }\\n        }\\n        \"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "1276"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "Content-Length": [
                        "347"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "Date": [],
                    "graph-attestable": [
                        "true"
                    ],
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"pair\":null,\"token\":{\"__typename\":\"Token\",\"decimals\":\"18\",\"derivedETH\":\"0.09143877318962942800952084631648245\",\"id\":\"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\",\"name\":\"Viper\",\"symbol\":\"VIPER\",\"totalLiquidity\":\"47937850.632576212246191827\",\"totalSupply\":\"8504\",\"tradeVolumeUSD\":\"366968649.1604741971012691942962248\",\"txCount\":\"3926203\"}}}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionByHash\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "147"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "453"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00fft\u0090An\u001b1\fE\u00f7=\u0086\u00d6\u0083B\u00a4$\u008a\u00f2\t\u00daM\u00d1+\u0090\u0014\u00d9\u00b8\u008d\u00ed`l\u0017\u0001\u0082\u00dc\u00bd\u0018O\u00d0]\u00b8\"?\u00f0?\u00f8\u00df[\u00fa}\u00bd\u009c\u00d7\u0017K\u0087\u0084_sZ\u00d2q\u00a6C_\u00d2\u00ea\u00d7\u00fb\u00f3-\u001d\u00de\u0092>_\u00ec\u00cf7\u00b9>\u00a5C\u00ca\u00af\u001d<\u00b4\u00b3\u00b6L\u00dc\u001a d\u00ecQ2w\u00ce1\u00941\u00c0\u00c1\u009a1z%\u00ed\u00ad\u00e6\u00d1!\u0086\u0004w\u00a3\u00d9\n\u00a5e\u000f\u00fcq?\u00a9\u00af\u008fH\u00b0LV -)\u00d6\u00cb\u00e9!QV\u00cc4cV\t\u00c6\u0090\u0098*M\u00a2\u0018\u00c1\u0098\u00d9*\u0003\u000e-\u00b2y~\u00c9uO)\u00e4\u00b6\u00df?\u00d7\u00a3\u00f9.\u00f6\u00ca\u009d\u009c\u00f3\u00d6\u00ec\u00e9\u007f\u0087\u0098\u00a54l6\b\u001b\u000f*a\u00a1YUz\u0095)9P\u001bj\u00cd3\u0083\u00f4J>&p\u009dS\u0088f\u00906\u008c\u008d\u00d2\u00f9\u00e5~{\u0084\u00c9\u00c8m\u0098j\u00fed\u00b8y\u009d2\u0081\ry\u0092W\u0014)\u00e4\u008e\b80\u0013\u00cc\u00de\u00da(\u0010\u009f\u00f9?\u009b\u00da\u00a8\f`\u00ac5\u00eav\u00a7%\u009d/\u00e7\u008f\u00de\u00cciI\u00eb\u0007\u00ca\u001e\u00a0\u00ce<\u0001\u0091Y\u00a5\u0003\u009aY\u0098Fi\u00b3:\u00c5\u00e4b\u0099\u0087\u00cf\u0002\u00dd\u00a4\u0098\u0096\u0091G\u00f6\u0081\u00d3\rzZ\u00d2\u000e\u00b8\u0084\u001b4\u00d3\u00c1J\u00b5\u0001\u0006\u008f\u00dc\u00b9\ra\u00ee\u00e6P\u00bb\u00d6(\u00bd\u00aa\u00cfb\u0005\u008bf\u0082\u00a6N\u0090s\u00b06\u00da>\u00ba\u001dO~\u00bd\u00c9\u00e9e\u00ff\f\u00bd\u0002\u00d3\u0086\u00f3vy(.\u008d\u0087\u008f\u0012\u0001\u00ac \u0010\u00e0C\u00c5\u00baGq&QB\u0099\u00d3\u00fa\u00d8\u001c\u00ab\u009c\u00afb\u00b7\u00e3\u00e5\u00fc\u00fd<\u00fduOLK\u00fa\u00fb\u00d8\u008c\u00c4\u0006K\u00d9\u0004y\u00be\u00efTrz\u007f\u00ff\u00f2/\u0000\u0000\u00ff\u00ff\n\u009ea\u008f\u00f2\u0002\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x1c06c31\", false]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "93"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "1158"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0094\u0094\u00bd\u008e$\u00b9\r\u00c7s?F\u00c5\r\u0083\u00e2\u0097\u00c8\r\r\u0007\u000e\u001c\u0018\u0006.:\\@Q\u00d4m\u001b;\u00d3\u008b\u00e9^c\u00ec\u00c3\u00bd\u00bbQ]=s\u00b3\u009bYhT\u00ab(\u00e9\u00cf\u001f)\u00b2~\u00db\u00feu\u00bd<\u00bf|\u00cd\u00ed\u00d3\u0086\u007f\u0086\u00ed\u00b4\u009d\u00e7\u00f6\u00c9N\u00dbK]\u00bf}\u00b9m\u009f~\u00db\u009e\u00bf=\u008dz\u00d9>m\u00f0\u00da\u00124\u00a9m\u00a7\u00eds\\?\u00dfM\u00bd\u00d5\u001a\u00dd\u0086\u0080\u009aH\u00c3\u0006\u00d8\u0017\u0081u\u0083\u00e5\u00c3p\u00b5j)iX\u00ac\u00a3\u000b\u0083\u00f7\u00b6<\u0096\u00f5\u00d4)\u00a4\u00dbi\u00fb\u001a/\u00f5|\u00fb\u00db\u009b\"k\u00cc\u0081-,\u00b5\u008b\u0086G\u008f\u00f0\u0098=\u009d&\u00ae\u00a9\u0018Ms8I#\u00a5n}\u00f1$\u0080\u0099+,\u0083&m\u00a7\u00ed\u00f9\u00f2\u009cu\u0017\u0083\u001f\u00c6v\u00da\u009e\u00ce\u00af\u00ef\u00be~\\\u00fe\u007f\u00c7v\u00da\u00ae\u009f\u0083~z\u00ce/u=R43y\u0096\u00cd\u00ca.\u00b3G\f\u0093!\u00da\u0087fNn1\u00a9!K\u001b\u00ce\u0016\u009d\u001b-\u0088\u00c6\u00b8&\u00c3d'\u00ee\u00dbi\u00fbr\u00f9\u00f5\u00fa\u0097/\u0097\u00cb\u00d3\u0003\u0011\u0001\u00c0>z\r\u0005h\u00b1\u00cf\u0010\u00f8ni\u00fcXj\u008f?\u0003\u00e0\u00c7\u009c\u0011\u000e\u008d\u00bb\b\u0003\u0098\u0081\u001e\u00b6v7\u0003\u0001<\u00b6\u001cGl\u00ff\u0019\u00e0nj\u00efB\u00bc\u00db\u00f6'\u0080\u001f\u001b\u00a0\u00ed\u00da\u0006\f\u00fc\u001d\u001eB{\u00f7\u000e\u0080wv\u001c\u00f4@\u00c3\u0007(\u00ee(\u00f8\u00b6\u00e9\u00fd\u00f1\u0006\u00a2{\u0080Fv\u008f\u0006\u008f\u00a5\u0084\u00f6\u00d1\u0011}|\u00c1#>\u00db\u00e1\u00e0\u00002\u00fd\u00a0\u00da\u00e0=\u008d\u00fbt\u00f7\u00feX\u00b1{\u00bc\u0007p\u00c3\u00d6\u00de\u008e\u00bfI\u00a2\u00ee\u0004\u00df\u00dd\u00c0\u00fb\u000b\u00bfe\u00ab\u00fd\u00e1\u00c5\u00e2-#\u00fb\u00f5\u00d8\u001b\u00b3\u00bd\u009f\u00f2\u001f/\u0014?\u00b0\u00c9\u00bb\u00fbc\u00ec%v\u008b[\u00fd\u00f3r\u00b9=:\u00ce;\u00a4f\u00f3\u0004\u00eb\u00aa\u00cd\u0011\u0014\u0015\u0087\u00b5\u001a\u0092m\u0091\u00a1D4*&\u0091nE\u00b2\u0012\"\u00cd\u00b1\u0013\u00ad\u00ba\u00b7\u00c0\u00f3\u00a3\u00a3\u00ab\u0007#L\u001f\u00cd\u00a0b\r\u00f0\u0019B\u00c8Y+\u0017\u00eb4q\u00e4B\u00dbN\u00db<\u00afu\u00ceo_n\u00ff9\u00ear;m\u00f5z{\u0089\u00bf\u00c6-\u00ee\u0096\u009d\u00f4\u00fc\u00df\u00a3\u00ef\u001a\u0005o\u00a7\u00ed\u00d7\u00b8\u00fe\u00fd\u00fct>\u00c09y\u00f0=\u00a0_\u00e3\u00fa\u00d3\u00b5\u00e6\u0011\u000eH\u00f9\u00be\u00f7\u00df/\u00eb8:\u009c\u00a9\u00f6\u001e)\u00f5\u008eD3\u00b3\u0003K\u00d7\u009cV\u00d8\u0091\u00d50D\u00b4\u00a9)\u0095\u008fi\u00d2\u001c\u00dc\u0080Gs\u00a5C\u00ea\u001f/\u0097\u00cb\u00a17\u00f6\u00ce\u00e2\u001c\u00c9\u00dc\u00d9\u009c\u00e7Z\u00d0\u00d3E\u0016b\u00c5B\u0000\u00ef\u00a8\u00e9ciM]\u00ab\u00a4\u008fQ(\u00b4xF\u008d\u00ae\u009e\u0012\\6\u00bc\ne\u00e9(\u00a4\u00eek/Jwm\r\u0092\u0007\u00aeY\u0080E6\u009bH\u00b5\u00c9\u00e5\u00ab\u001ci\u00ac\u0086\u0090\u00d6-2d\r\u00b6\u00a2\u00deQ&\u000er\u0084n\u00da\u0097\u0096\u00f22\u00cep\u00cf\u0098\u000b\u00d6hk\u00f4YJ\u0096\u0098\t{<\u00b7\u00f3S]o\u00f1\u00f4\u00f5\u001e\u0090bq3]\u00fb\u00c2K<_#o\u00e7\u00cb\u00f3\u00f5\u00bd@J\u00a4\u00a64D%\u0094\u0019\u00e0\u00d8\u0013s\u0096Ib\u00f2\u0010[\u00ee\u0012\u00e6\u00ca\u00b4v\u00ff\u0095`L\u00884R\u00c4q\u00ff\u0004\u00bdT\u00d6\u00f9\u00eb\u00ed\u000f\u00cd\u00a4.k\bK\u0016\u00ad\u0089V0\b\u00a1\u0019\u0013\u0099\u00d0\u00dc\u00a3+\u009f\\\u00c2D\u00a3J\u00cd\u00b3tt\u00f3>G\u00e3!\u00dbi\u00fb\u00f6\u00f8H\u00fe\u00fc\u00cb\u00f7\u00dc\u00db\u00a7\u009f7xEB)\u0000\u00a4l\u00cc\u0011\u00c3\u00b3i\u000b[\u00ae\u008d1IR\u00a8\u00e9$\u00ce\u00a1\u000e\u008b\u00cdl/|rNf\u00a6\u0019\u00dbi\u0083\u00d7e\u00e1\u00b1b\u00eeW\u00e70)z\u0012g\u0088s1A\u0092\u00e2\u009c\rPg\u00a1i\u00d7\u00d6QY\u0004j\u00ef\u008eb\u00b0\u00bbH\u0013\u00f3E\u000e\u00c2h<\u00b0!\u00c7$\u00f2\u000e\u00a8\u0092)\u00de;D\u00e4j}\u0011\u0091i\u00c8tT(\u00b3\u0099i\u0083\u00c6A\u00d2\u0017\u00ae)\u00d6f\u001f\u00c6;\u00f3\u0014'\u00ef\u0003g\u00eb`8\u001c\u008d\u0082\u00bc\u008b\u00ead\u001a\u00dcp,&!\u0018>T\u000e\u0011R\u009a0$\u00a4\u00b4\u0093a\u00e7\u00e6\u00a8\u00a1\u00e5\u000bda\u00ad\u00c9C5\u00f6\"\u009eK|5\u009f\u008e\u00a4\u00de\u0096\u008c\u00ee\u00caGN\u00c8\u0007w)\u0084\u009aZ6\u00a8\u0013\t$\u00d8r\u00b0&\u00a3f\b\u000e`\u009b\u00d2ha\u00a1\u000f\u0018s,\u0007\u00e7\u00a8\u00c0\u0083\u00a4\u00afI$(\u00e9\u008ab\u00ae\u00b4r\r\u0018#:\u00c7\fX8\u0004\u0007\u00c3\u0084\u0016\u009d\u00b5|6\u00e39Cu.\u001d\u0082\u00eb.\u00c2\u00c1c\u00ee-\u001a#Z\u00a4\u00aa\u00f4ZC2\u008c\b\u00a23\u00a7\u00a5I\u00e9$\u00b4\u00ae2)V\u00db[\u0096\u00e7\u001c+2\u00b6_~\u00ff\u00fdO\u00ff\u000b\u0000\u0000\u00ff\u00ff>\n\u0010\u00f3\u00b1\b\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "120"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Transfer-Encoding": [
                        "chunked"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00e4|\u00e9\u008e\u00ec\u00bcq\u00f6\u00ff\u00ef2\u00ceo\u00e3C-\u00ac\"\u00e9\u00bb\u00e1\n$\b\u0092\u00c0N\u0080\u0000A\u00ee=(\u0092\u00ea\u0096\u00ba\u00a7O\u00af3o\u00e0w\u00ecc\u00b7(\u0089K\u00ed\u00f5\u0014\u00a9\u00ff\u00fe\u00f5\u00cf\u007f\u00ff\u00b7\u007f\u00fd\u00db\u00bf\u0097_\u007f\u00fdE\u00ff\u001f~\u00fd\u00e5\u00d7?\u00d5_\u007f\u008d\u007f\u00f9\u00f5\u00b7\u00f6\u00f7\u00ff\u00fc\u0097\u00ff\u00f8\u00f5\u00d7_\u00f0_\n\u0001\u0014\u001c\b\u00b1\u000b\u0080\u00a2\b\u0080 ^\u0001 @\u00af\u0092\u0005\u0014\u00c0\u00b1\"(\u0002\u00d3\u00ba\u00c7\u00a2\u00d0\u0000K\u0000e\u00dfJ\u00cb\r\u0000Q\u00110y\u00f1\u00d6Z8\bs\u00d1\u00d1\n\u00ad\u00cd\u00d6\u00a6\u0099zvi\u00b6\u00c6\u00f5l\u00a7^\u001b\u0087<[=^\u00b4:EH\u00d9\u00ad\u00d6 9\u00b8\u00e4fk\u00dbz\u00a8\\\u00c9\u00e7\u00b0Z\u00bb\u00f85[\u0095|\u0018w\u00dcw\u00b2f\u00e3\u0013\u0093\u00abe\u00b5\u00d6\u00d5\u0017\"\u00f9VW_\"\u0097}\u0095\u008e\u0085Q\u00d7\u001aJX\u00eb\u00ddZ\u00ed\u00ad\u0018\u00d7zkUj\u0095\u00dbl\u00adke\u00cd\u0015\u00e9\u00dd\u00e9\u001c\u0001\u00ca\u00d5\b\u001b\u00ed\u00c6[$\u001bEKMB0[\u001d\u00ad\u00d6$\u00c5\u00e7\u0088k\\\u00bd\u00ec+q\u00f2\u00cdw\u009e\u00dc\u0011\u0098o\u00a5\b\u0012K\u009e\u0014GJ\u0017\u00ad\u00d6W\b:[\u00b3\u00cb\u00d2\u0092\u00f8\u00d9\u009a\u00fbj\u008d\u0018Pq\u008e\u001b:\u00dd\u001cw\u00dc\u00c75\u00db\u00e4\u00c4\u0017\u00aa\u00ab\u00af\u008d\u000fIc\u00ed.\u00cbl\u00f5\u00ed\u00b2\u00af\u00d0\u0082\u0097\u0086\u0093\u00e2\u0018\u0016\u0015O\u00ad\u00f6\u0096\u00efk\r\u0091%DZR\u0013`\u008d\u001b\u00a5\u0086\u0098\u00dd\u009a-\u00a4\u00cb\u0011N2<\u00fa\ne\u008d\u0010\u0013\u0005\u00f5S>\u00fc\u00b6\u00f2P\u0093\u0094,y\u008d{\u00b5r\u0007\u00ec\u00b4\u00b88fK\u009a\u00e7[R0\u00a6(e\u00b6\u00e2\u0092f\u000f\t\u00021\u00ce\u0095mZrj\u001d#\u00e0\u00920\u008f\u0002\u0018\u00d2\u0094\n\u00efV\u00bf>P\u00d5\u00de\u00d6\u00b3\u00c2\u0097\u00b39\u008dk\u00f75.\u00da\u00a9\u00f6B\u00ec\u00e7\u001a\u00b4\u00ac\u00d9h/\u00bdw'\u00ab\u00f5J.]\u0086\u00d6\u0080&\u001fh\u00e3\u00de\u00a9\u00d5\u00de\u0092\u00b2\u00a8$\u00c1\u0097\u00dapJ\u00ben|\u0090\u00e4\u00b4\u00f2\u00e2\u00b4\u00ca\u0015\u00a7O\u00b4\u001b}\u00b9%\u0081\u000e\nB\u00c7\u00d5\u00aa\u00bcZ\u0083T_\u00e3\u00b4\u0004\u0012\u00affK\u009c\u0083\u00a7Z\u00e7l\u00cb\u00d2n\u0016!\u00ef\u00daZ\u00c3f\u00adN\u00ad\u00d6\u0097\u00eb\u00db\u00b3Q \u00b2L\u00da\n\u00ac\u00f5r\u00c2\u0094\u001a\u00cf5\b_\u00ad\u00e14\u00ee\u00e8k\u009b-\u0005\u00aa\u00dck\u009f\u00adi\u00ad\u008c\u0091K\u0013\u009d\u00fa\u00e0\u00ea\u0095\u00dd2\u001d\u0083\u00ba\u00ad\u00a1/\u00f98\u00b5\u008e\u00b7`\u00b5\u0012PF\u00afS\u0086\u001d\u0085\u00adUA\u00b3_\u00ad\u0092/G\u0000\u00ed\u00b56\u0098z\u00ca\u009b\u00ad\u0081(-\u00f9\u00bcZ\u00d3\u00e2\u001e\u0094LA\u001a\u00cdV\u00b3\u00b2\u0092\u00cf\u009eb\u00bc_\u00cd\u00a2uo\u00bd\u009b_\t \u00a8@\u0010 \u0090P`\u00c1\u0080\u0081\u0001\u00e7\u00ef\u0088\u0091\u0002G\u008a`m\u0011\u0083\u0000F{\u0096\u0003[\u00bf\u0092\u0003\u0007\u00c4\u00e9\u0097X\u008dW\u0018\u00ec\u0012\u0003\u0007\u00b2^\u00aco0\u00da\u00b0\u00eb6\u00a6\u00c0\u00fcO\u001c\u00ff\u00ec\u00d9\b\n\u00d8Q\u0097w\u00e38d=\u0010\u00f0\u009c\u001b\u00a0\u008dE\u0000\u00e6\u00e2\u0010\u0000\u00120F\u00d4p\u00ea=\u009a\u00d5\u00ccb\u0086x\u00f4=\u00fc%\u0006\u0088\u00d6\u001bt\u009e+\u00afF\t\u0017\u0080\u00d5\u00fe\u00eb\u00e0<\u00ef\u001c\u008e\u00fe\u00d4s\u007f\u00f0/ \u000b\u00aa\u00ad\u00c0\u00e6\u00c1\u00d6[NyO\u00db\u0088((F[1\u00caa\u00b4u\u00ccYo3sP\u00f63\u00a3\u00f3\u00cc\u009cI\u00f4~fs\u0084\u0012m\u0004\u00a3\u00be=\u0083\u00aa\b\u0005\u00f18\u00ea\u00efGD\u00bd5\u00e2\u00d0\u0096\u00c3\u0088\u008fSc\u00cdd\u00ca\u00d66\u00b3\u00bafv\u00c5\u0001\u00dd\u008d\u00ea\u00e3;\u001c\b\u0088\u001a\u00a7\u0014\u00a3q!\u0082\u0099\u00f68\u00e4`q\u00a5\u00b2l\u00b3:R{'\u0007.\u0097\u000f\u00caA\u00ad\u00ba\u008d\u00d8\u00bc\"B\u00c4\u00a3\u00ce\u00f5\u001e!\u0012\u00ea]N\u00d9\u00bb\u00e9k\u001a\u00eef/\u0098?7{\u000bz\u00f6\\D\u00e8\u00f9k\u00fa\u00eddG\u00a4\\K\u00eb\u00bcy\u0087\u00f2\u00f2\u001e\u00ff/\u00e6\u008e.\u00de\u009fk\u00a6\u00f7\u00e4\u001c\u0089qG\u00a1\u001b\u00a3\u00b4+\u00fd}r\u0014\u00f3\u00a1s\u0014\u00b5\u0088\u00fe\u00cbQ\u0014\u00c3\u00bb\u00a3\u0004\u00da\u00cb\u00e6\u00e3o?(\u00c17\u00e6\u00ed\u00dd\u00bb\u00f3N\u00f5.\u00a7\u00d5\"\u0088\u00f7F\u00a9r\u00d0\u0005n\u00b4\u00f1\u00a4\u00f7[\u00a3\u00b6w\u00e5\u008b[8\u00d8\u000b\u00fe\b\u00cd=\u00bdi\u00df\u00d1\u0001\u00ech\u008ehq\u00cc\u0097z\u00b0\u00d3o\u00af\u009f\u00d4oq\u00ee\u00ae\u00e6\u00f9\u00f4.\u00fd\u0003\u00b4\u00fb\u00a3\u00d4w\u00f5;\u0010\u00ec\u00f4\u001b1\u00b8p\u0090\u00b5\u00a0\u00f1\u00e2\u00bao\u009e\u00c0\"9\u00b4\\\u00ec\u009e\u0006\u0004z\u00d7>\u0084^\u00ef\u00fa\u009f \u009f\u00f4?\u0089\u00caA\u00caR\u00ba\u0011E\u00ecg\u0010?\u00e8\u00bf1\u00c7|\u0097\u00ff\u00e1m\u00fe\u00e7\u00d4\u00bf^\u00d7n\u0094\b\u00ef\u00f2\u00af\u00b8\u00fb\u00de;r\u00fe\u00c2{\u0017\u0085\u00af\u00df,\u00bb7\u00e5#\u00f1\u00f3\u0016\u00bbM\u009en\u00bf\u00cd\u00c2\u00aae\u0003\u00a7'\u00c3\u00een\u00da\u00b8U\u00d2Qoz\u00f3\u00f7W\u009c\u00df\u00f5?\u00bd\u00df\u0088\u0001vR\u0019\u009b\u00ffLl;)\u00a0H\u00d0\u00c2\u00dd\u0088*\u0011}N\u0017\b\u00e9\u0010\r\u0012A?^\u00e3\u00e6!St\u00b7f\u00a4\u0017\u00f2\u0015\u009e\u00a4\u00f7nF\u00bc\u00e7\u0002\u0011\u00c7\u009b\u009e\u0092Q\u0003\u00cf<qf\u00b0\u0096\u001b\bm9\u0092\u00f9\u00ce\u00872\u00b1T\u00d2{\u00b2B\u00a4z\u00a0\u0099C\u00ba\u00b8^\u00fe~\u00e4\u00bdn\u009f\u009b[~\u00ac\u0000\u00e4\u001f\u001d\u00f0\u00e6\u00df\u00cc\u00a0GN\u001dPQ\u0080l\u00f5\u00d1\u00f8\u00ed\"D\u0007.rp\u0080#\u00aap\u0001\u0081L\u00f3f\u0096\u001eI(\u00d0\u00cc\u00ba\u0015\"[\u008bQ\u00d3\u00e8\u001a\u00ec\u00ce\u00a4TN\u0013\u00c1\u00b2\u009c\u001e\u00ec\u00daO\u00c4\u0013a\u00e0\u0006\u00e2\u00c0\u0001\u0019O6\u00a9\u008e\u00b8\u00deR\u00c96Z\u001c\u0088\u0000\u00c0\u00e4\u009a\u00fd\"\u0088 9\u00a08\u001b}\u00dc]\u00b8\u0081\u00bdo\u00bd\u000e\u00f4%\u0007'~\u00f2t!\n\u00a3\u00b73\u00e6\u00b0\u00a1\u000e\u008b\u00cecv\u00b9\u008f\u00ff\r\u00c6\u0001\u001a\u00be4\u00b8\u00e0\u00ec\u008ai\u00e2\u00156\u009a\u00e4H\u0003e\u0018\u00ef\u00f2\u00c0>,\u00f6\u00b29\u0082\u00da<\u00ec\u0097\u0083h\u00bf\u009cY-\u00d4`\u00fd\u0017\u0013\u0014\u0001f\u001b\u00a5\u00e5\u00b3\u0087\u007fFz\u00d0\r9)p\u00f0o\n\u0003\u00fb\u009ek!q\u00bbu\u0001Dq\u008e\u0097\u00ec\u0016\u00ca6\u0087\u00b5\u00e2\ne=\u0097\u00e63\u00f6\u0084\u0082=\u00f1\u008c\u008d\u0018\u00f6\u00eeL\u0083zE\u0083\u00d3HO\u00f4J\u0017\u00bd\u00b6s\u00af\u0001W\u00af\u00c5\u00e4\u00c3q\u0004E\u00b2\u00bc\u00f1\u00b9\u0011\u00dc\u00dd\u0011\u0006]\"E6I\u0019\u00b2YJ\u00b0\u00ff\u007fa4\u00b9G\u00a5a\u008d&W|\u0004\u0093\u00dd\u00f1\u00db\u00e2z\u00b3\u00bb\u00d2\u0007O\u00c7Z\u00d5\u0002D\u0093\u00c3%\u00cb\u00d9\u00e80\u00e5\u00d1\u00f7PR\u008d\u00a2\u00c1\u00e7\u0014\u00a8Pi\u0002\u00cd\u00bb\u00ee\u00b3\u0017\u00a7N\u009a \u00fa\u00c2Ir+\u0001\u0005\u000bx\u00d2jn;\u0006HA5\u00e0N'\u00aa#\u00d3\u0081\u00a1\u0005\u00da\u00b6X\u00bb\u0096\u0012\u0006W];\u00eb\u00cah\u00f7A6\u00c4M\u0087\u00b6\u00ccz\u0095]Q\b;\f\u0090\u00a9\u001a\u00bdCD\u008eOP1]P\u0011\u008f<\u009b4\u008b\u00f1<\u00abgtk\u009b\u00df\u00b0q\u00cb;L\u00dchZ\u001eq\u00c3\u001e!y\u00e6\u00b9\u00e2\u00a3e\u0088|\u00e2\u00c8\u00a2Gm\u00af\u00cd\u00c4\u00de\u00ed\u00e5U\u000b\u00a1\bm\u00d4e\u00b6\u001c\u00beC(\u00ecc\u0082W\u00ff6\u00ca\f\u008fH\u00d3'\u008c\u00167\u0091]\u00df]\u00f7^\u009b\u00a2\u0092\u0016\u0015N\u0004\u00ca\u008aZ\u00ec\u00ca\u0013\u0081F\u00cf\u0004\u00da\u00b4{G\u00e0\u009d\u0006\u0015\u0002\u009do\u00897:\u00af\u00be\"\u00ecsYu\u00c3'\u00d7\u00a7m\u0007B\u0007\u00f8N\u001a\u00d8\u0095\u00f9\u00e2\u001d\rD\u00c81\u0013\u00c3X\u007f\u00d1\u00ae\u00acy\u00ac\u00b6\u009f\u00d7\u00ec\u00d3Xo'PT\u00a7\u00ce\u0093\u008ag\u00cff\u00ab\u00ef\u00d1`\u00ac*\u0006:\u00e7\u00de\u0001\u0011\u0087e\u00ef\u00de\u00ff\u00dfX\u00ad\u00a2V\u00ed^\u00b4\u0019\u00a7\u00b5{]\u0012@C\u001eP\u009b\u00b2\u00ca\u00a3\u00ab\u00b5h\u0082!\u00f0\u00d9\u00fe\u00bc\u00e1C\u00be\u00f2L=\u0093Y[\u00d3\u00ea\u00a7\u00fb\u00e7;\u00fd\u008b\u0002\u00849J\u0093\u00e3(\u00e3\u008eL\u00ef\u00fc\u00c6\u0088\u00edrE\u00d3\u00cf[ 9\u00e2\u0083\u00cf\u00f6.\u00e7\u00c8zF\u007f\u00f1)\u0084\u00d0<nD\u00df\u0095\u00a4\u00b7\u001a\u0083\u0097\u009aj\n\u00ea\u00b8[\u00c8\u009b\u0003\u0087\u00d4 \u0017\u001fjL\u00e8B\u00c2\u00d0Zs\u00ada\u00f4\u00b1w\u00e8\u00dc\u00a5:\u00f2\u00f1\n\u00ebJt\u00b2\u00ba\u0000\u00b2E]\u00a7(\u00c8\u001f\"\u00a2\u0015\u00e9!\u00a4\u00ba\u008f\u00f4\u00ce\u00fek\u00da{{\"\u00bfd\u00bfmv\u0013\u0095[\u00d54\u001e\u00be\u0001\"/Z\u00a2\u00c9\u00fdFi\u00b2\u00eb2\u00bd\u008f\u00c5\u00d5[4p!+k\u0005\u008f\u00c7\u009b\u0088\u009c\u00b7x\u0013\u0091\u00f8\u009dx\u0013\u00d1\u00b9\u008bx\u00d3\u00afx\u00d3\u00cc\u000f\u00be\u00ea\u00e5\u0010\u00b5\u00bf\u00ee\u00e5\u0010;\u00fe\u00a3y\u00b9\u00b1\u00aalVO\u0091\u0082<I\u0097\u0091\u00ff\u001cu\u00b8_\u00c7\u00cdHT\u0007nlV5\u0086x\u00aa\u00c5N~\u0012\u00bf\u0018?\u00d9\u00bb\u0096\u00df\u00bd\u00ccO\u00aa\u00f1\u001f\u008d\u009f\u00cf\u00e5Q\u00cc\u00e8\u0086\u00fd\u00a6~\u00c8\u00ef\u009e\u00e2\u00c2o\u00ecC\u0000q\u00ef\"\u0007f\u001e#\u009c\u00b2\u00cdaO\u008bY\u0017\u0096!Q[d\u00f2F&\u00f6En\u00f4\u008a\u007f\u009ev\u00f8\u00966,\u007f\u00b9\u00bc\u00c4\u00cb\u0014\u00feb\u00aeK\u008f\u00b8v\u00e6\u00a1\u00c7Y\u00d3\u00d2\u00b1I\u00b38\u00d0\u008b\u00f1\u001bO\u0019\u00cc\u00b9\u00cf\u0093-\u00dfa[\u00f3\u00f9WgI\u00b0\u00c9\u00fe\u00d5,\u001d\u00c3\u00cb\u00da\u00ee,\u00ff{Y\u00db]\u00fd\u00d6\u00f8\u00fc\u000f\u00b1\u00de+\u00faps\u00b7\u00ca\u00c4\f\u00d0\u00f8\u0000O\u00c4a&\u0093\u00be\u0087\u00dc\u0000|,\u00c2\u00a8\u0012\u00d1!;W*\u00f6\n\u00c9u\n\u000e\u00a3\u008b\u00beGO\u0094\u00b8\u00a6\u00d4\u001bg\u0087A\u00bbfu\u00e2\u009b\u00f1\u009e#$\u008b\u0017\u00e4wz\u00ff(}WDu\u00d2{\u00c7\u0081\u00d0\u00e2\f\u0089+\u00d7\u00fc\u001c\u0017\u00c1\r,oC\u00f5( \u00f0\u008c\u00a7\u0098\u00ce(\u0082E9\u008cT\u00ad5\"\u00c7\u0099\u00abOl\u00eeb\u00df\u00cfs\u0096\u00f8\u00c2\u0087\"^EY{\u00cd\u001c4\u00a8\u00ab\u00aa\u00b9F\u001f6\u00f1=+86\u00e2\u00edl\u0082\u00f9v\u0093\u00d8\u00ed\u00f9\u00f7\u0011\u00e0\u00a0\u00a6%\u00a8A\u00b6\u00c83\u00e2\u00b4\u0089a`\u0081\u00a8\u00c6\u00d9O\u00af\u00e0\u00fdy/|\u001a\u000f\\`[\u0083i<-Lx\u00d8\u00b8o\u00e4D\u00e0\u0000\u0093f[\u00cc~\u009c\u00cf\u00ca\u00c4\u0086\u00e9\u00f8J2\u00ac\u00ed\u0003<4{\u0094\u00c3\u0091\u0016\u0087\u00ab\u0089\u000f\u00a0_U\u000b\u00b2\u00d8\u0012x\u00ff\u00c4@\u00f7\u00cds{V\u00d3\u00a8Y\u00c1y\n\u0003\u00f6\u00cf\u00c9n\u0080\u00a0K\u00ee`r\u00cel\u00a9y)\u00c1\u0095/\u00cd\u001a\u00c3\u00c4E\u00d9\u00b4l\u00ea\u00ff\u00b8\u00c3\u0083\u00bb\u00b8\u00c7\u00e9\"\u0004\u00bfb'\u009fF%\u00d6,\u0084`t\u001b\u00cd#\u009f\u00b0\u00ff\u00b1\u009bR\u008e4\u00f3\u001b\u009dr\u0011\u001f\u00d0\u009e\u001eT\u00dbxe9\u00db\u00c4\u00f7\u00f2\u00e4#\u00fa\u0089i?E'y\u008eN&\u00e77d{H\u00d3\u00be\u0012\u00a1\u0080t;\u0096x/~\u00b8\u00c6\u0019\u00e2>\u00db~\u00d1\u00c7\u009dk\u000f{\u00cc\u0019\u0083\u008f\u00e7]\u008c\u0087*\u008d\u00fb\u00f3V\u00c3.\u00f2\u00fe]\u00d4i\u009aa\u001cy\u00ce\u00be\u00cdqV>\u0018\u0099GU\u00e3y\u0004\u00ecK\u0084\u00edR\u009e\u0017\u00f6\u00b1\u00d0.\u0093\u00a6\u00a5\u00b3x\u00c0\u00acb\u00cc/`V\u00bf\u00a9\u0013m\u0098\u00d5\u0005\u00ed\u00da\u00e7h\u00b7\u00cd\u00dc\u00b2\u00b5o\u001b\u00e5\u00b4\u0082\u0080\u00bf\u00a3\u00b2E{\u0083\u00c6\u008b\u00ba#\u00db\u0097\u0099\u0087L\u00ec\u0011\u0013\u00f9=v\u00bc\u00ab\u00e9\u00ecq\u00b1\u00b4\u00cf\u00ff\u00f7\u00b8\u00d8\u008d\u00ba\u008e\u001c\u00ea:<\u00dbf<vB\u00d2\u0092E\u00da?\u0082\u00a4\u00d5+$\u00edP\u00b3\u00b9\u00adG\u001b\"\u008c\u0019\u00cb\u00b7#\u00e9\u00ee7H:\u000f\u008c|\u00cbBD\u00db\u0086\u00ad\u00df\u001a\u00e1\u00a1\u00bc\u00c4\u00b8\u0090\u008d\n\u00e7}\u00d93>\u00c2l#_W\u00140\u00bbq\u009a\n\u00b3;\u00dc\u001f\u0095F\u00cb\u001c\u00b3\u0000\u0003\u00f3\u001e\u009b\u007f\u0084\u00ba\u009a\u0016\u0012\u00bej\u00a8_\u00bd\u00f3\u001b\u000b\u00d2\u00a6\u001ft\u009b\u00b4\u0087\u00d9k\u0094c\u00af\u0013_\u0097k\u00d47\u00a7\u00eb\u00fa\u00fe\u00f3\u0095\u0005\u00bc\u009d!,\u0094\u00ed2C\u00c8\u00db\u00de\u009f\u00b1\u0007\u00eb\u00cdJ\u00c3\u00cf\u00e4\u0006\u00a8\u00c1\u00ed#\u00dc-\u00f6\u0090|Q\u00e9\u00dc\u00e1L_\u00a0\u0018p\u00c6/\u009e@\u00afKL'\u00f4\u00ba\f\u00ab\u00f5:z]\u0012_\u00a0\u00d7\u00f1\u009c\u00c7\u00be_1\u00b7\u0011*\u009f\u00cf\u00d2\u008c\u001dE+w\u00a5\u00b1\u0096f\u0092Y\u00f8b\u00d7\u00ff<i\u0003h\u00b2\u001b\u00c5\u00ac\u00e9\u00b8:\u00d97=\u00ecS\u00e2\u00b9\u00df\r,\n9\u00ed]\u009a\u00f1\u00b2\u00b3\u001c7\u00ce\u00d3v\u00a4\u0090`F\u001eko\u00d3x\u00c3\u00f2\u00ae\u00e6\u0002\u009b\u0089\u00f0\u00b9W\u00e0*\u00d2\\\u00cc\u00e2<25\u008e\u00a5\u00f7\u001a\u008b\u0019\u00d4T}\u008e\u00d5\u0015a\u00f0\u001a\u00d1\u0091T\u0094T\u00fb\u00d8\u00e9\u00e7\u0086\u00cdz\\r\u00b3In[\u00ef\u00adh\u00c7f\u0097\u0006:\u00836\u00b3\u00b9\u00a6\u00d9\u0012h\u00acH\u000e+B@7\u009f\u00e1\u00d3\u009ad\u00ae\t\u00e38\u0007\u00f4\u00f2\u009f\u00f5\u00ad\u00a3\u00b79\u008e\u00d2\u0018\u0087\u00b6\u00d9Y\u00f4fwg\u00cb8\u0013\u0005A/g\u0097h<c&g\u00f0$b\u00f0\u001b\u0097\u00e6\u00be\u00a5\u00b8\u00eb\u00b3\u00d0\u00c8\u00bc!\u00a8\u00d0\u0086R-J!`#{w<I0\u009f\u00dchE4\u00af\u00a3]G\u0016\u008c\u0014u\u00ecM\u0019\u00bbT,\u00ee\u001c\u0019\u00d2x\u00d6\u00d1\u0092\u0015~\u00d7\u001a\u00b4)\u0087\u00b4y\u0096\u00b9v\u00e3\u0081\u00a4\u009ePf|\u008bM\u00b2x\u00aeS\u00cf\u00b8\u00cd_s\u0087\u00dc\u0086\u00c7\u00bc?\u0093\u0091\u00d3\u008d\u009c\u00e7Ik\u008d\u00d8\u00c6\u00e9\u00cf\u009f\u00c2\u00a9\u00f0\u0002\u00a7b\u00b3v\u008c\u001f\u00c5\u00a9.\u00bd\u0010]\u00a3\u00fd#\u00a3\u0099Y\n\u008a\u0084q*\u0013O{\u0005~\u0082\u0012T/\u0011;\u00e9\u00d6z\u009f\u0012\u00c1;Z\u00b1H\u00df\u00b0\u00e2?\u0084w\u0014\u00cac\u00bc\u001b3M\u0001C>\u00a0\u00fek\u0097\u00d6y\u00ef\u00e1>.\u0099\u00f9\u00ee\u00f9T\u0015\u00f6\u00fer\u00fd\u008d\u0000\u00df\u00a8\u00bf\u0011\u00c4?q\u00fd\u00edg*g\u00a6\u008f\u00e87\u001c\u00fd\u0089L\b\u00af2]\u00bc\u0019)\u00bb\u00993mQ\u00c2\u0019\u00afy<\u00fe\"\u0094S\u00fcE\u00e8\u00de\u008a\u00bf\b\u00f52\u00fe\u00ca\u00c32\u0015\u00cb\u00a0\u00ed~\u00ee?\u00a8\u00ddp\u00a9\u00ddb\u00da\r\u008fh7a\u0089\u00df[\u009b'\u00ec\u00f9\u00b26?)5\u00f6\u00da\u0087\u00ab]Ded9p~n!}oG{\u00a7\n\u00e5!\u00d7\u0000\u0088\u0014\u00f8$q\u008e\u00e0\u0084\u00bf\u00ae\u008c{\u00f3:3J\u00d8gB\u00dbY\u00dcu\u00c2\u0010\u0089\u00f4\u00e5\u00fd\u0091d6\u00f9uK\u00c7\u00f0g\u00de\u001f9\u00e2!b\u009f~0\n\u00d0\u00cb(\u00a05k}@\u00ebv5\u00d5\u00a7\u00b4\u00cd\u00a1F:c\u00d3\u009f\u00aa\u00aaN\r\u00de\u00d5U\u009f<!\u00bb\u00be\\p\u0013\u00b3~\u0094\u00e2[\u007f\u00d3\u00ca\u009f}\u00ca\u00b4\u00aeW\u0088\u00faBJ,-\u00d8\u00a3\u00eb{\u001c\u00e6\u00d9\u009d\u0010\u00c3\u009e!\u00b9\u009f\u00ac\u00ff\u0092\u00bb\u008c\u00ab\u00cdz\u0093\u00fbh\\=\u00b8D\u0002?\u00a9\u001f\u0097um\u001a\u0018\u00e1g\u00eb\u00da\u00b0U6OH\u00f2\u00d71\u0084\u000b~T\u00dc\u009cPt3\u0092\b\u00d3\u00b6\u008bI\u00d9@\u001d\u0006\u00ea\u001b\u00d1h\u0013\u008a\u00e4\u0086MZn\u00c5W\u00c9\u0015]\u00f7\u00e8\u00c8Wl\u00c1u\u00ae\u0015\u0018]\u0081\u00ee\u00b3-\u00a8I&\u0080TB\u00f1\u0085s$\u0099\u00d5\u00bfs^\u0099\u00f8\u0018#\u009b\u00c7\u009dy\u0000\u008do\u001b}36\u00db\u00f6v[\u00ccJ\u00ab\u008a\u00ab\u008af\u0095\u00cdr{\u00f6\u00a2\u00e4\u009d'Ee\u00ef4j\u00d7v\u00de\u00eb\u00ac\u00aa\u00c5,7<\u0084\u00cdZ\u00fe\u000e\u001cw\u00ab\u001d\u00a7=\u00fa\u00ee\u009c\u00ce\u00aa\u0018\u008f\u00ca-\u0005\n\u00ce$G-\u00dd+\u00e2{\u0093\f\u00e3\u00bb:\u0003W\u00fc9\u0089\u00bd\u00ca\u0092r\u00b5\u00d6\u0087,\u00fa@\u00bep\u00ac\u00a1\u00f2\u00b7s4\u00dd\u00e3\u00a8:\u008d^\u00cd\u0007\u009fxI>\u009e\u00f7\u00ea\u00efG\u00b8\u00cf\u00d1\u0080\u0081'\u007f\u00ea\u0089?\u0097gCH[\u000f\u001c&z^\u00f8\u00c9l\u00e0\u00ac\u00c9_\u00c6\u0092\u00ab\u00de\u0014\u00e4\u00b2\u00d2G\u009eZ\u00a4\u0099KX,v\u00b5\u0003\u00f4,\u0085\u0016Z\u00b9\u00a5u\u00be\u0096\u009f\u0092+\u00a3\u00dc\u00b0/\u0087/\u00fa\u00ec\u0011\u00d5[\u00df\u001c\"?\u00ea\u00ab7\u00be9D\u00fe\u00b0\u00ca\u009b\u00df\u001c\"_\u00da\u0087\u00bf9T\u00b7Q/\u00f5|D\u008a\u00a7\u00f9\u009f\u00b5\u00f7\u001b5!\u00df\u00d5\u0084q&E\u00e3\u00ef\u00ad\u00da\u00a3\u009a\u00f0\u00b4\u00cf\r\u00f5\u00fb\u00ed\u00fb\u00efN\u00b1T\u008d\u00f3\u00dc\u00ca'\u00cf\u00ecPh\u00d3\u00ebNmo\u00b0;\u00a9iw;_eu$O\u009c)\u00beD\u0006\u00aew{\u009a\u0096\u0093\u00be{\u00ce%\u00e0\u00b9\u00ff\u00cb\u0088!Bt\"\u0003\u001f\u009f\u0091\u00c1D\u00a79b$\u00dfk\u00ed$\u0094*\u00e6F%\u00c4\u00ac\u00b1P\u0006\r\u00bd\u00b0\u000f5\u00a5(\u0094\u0093\u00ef\u00a8\\\u00c6\u00e7&)t\u0091\u00e4j\u0017\u00e2\u00cc\u00ad\u00df\u0088\u0010F\u00b5\u00f2\u00a9\u0013~\u00fc\\\u00a6\u00b8a\u00db\u0014\u008bl\u00fe8\u0098Q\u00cc\u00d3V\u00d0s\u00fb\u00e3\u0018u\u00bc\u0097by\u00f6\u00bd\u00c7\u00ab\u008d\u00f6\u0094\u008d\u0081}\u00ab7R\u00f2\u00cf\u009e\u00be}r\u009f\u00d2\u0007\u00ea\u008d\u00fe\u00b7\u00f5F\u00d8b!J!\u0005\u009a'bg\u00de2\u00ab\u00d8\u0094b\bz:\u00ab\u00da\u00e6\u00d7\u00806\u00e4\u00f59]z\u0089\u00b7\u00f4\n\u008f\u00e6\u00f9\u0095\u00b1\u00ae\u00ec\u009eDA\u00fe\u0080\u00fd\u00a2\u008f\u00f2(KY<Z\u00b6f\u00ed4\u00e8\u00b5[Lr\u00e4\u00d1g\u0011\u00b4\u00d3\u00f7\u00de\u0090rl\u00c1\u00bdt\u001eA\u00b6\u00ca\u00ca)O\u00ba\u008a\u00ae~\u008f\u0007?\u00ea\u009fPC\f:\u00e5\u00c12\u00f8\u0088\"\u00c3\u008f\u00b8(\u0002\u00163\u008e\u00bb\u00e4;#\u00bb\u0016\u00125\u00ad\u00d1[\f\u0097|\u0013\u0007\u0088-\u00c9\u00fc\u00b6&F\u00adU:\u00e4\u00e4\u00aak=J\u0000n\u00a1q/$\u00beG\u00b3\u009aF\u00f5Byd\u0010\u00d7\u0091\u00df\u00a0\u0092{\u00fa<\u00c4B\u0001J\u00c2\u001f\u00cc=\u00e4\u0012\u0005`\u007f\u00deu\u00f4Q\u0014\u00a0B\u00fd\u00c1u\u00f1%J\u0016\u008a\u00b5>\u0084MW\f\u00a7\u008cb\u008b1\u0090\u00aaZ\u00aexk\u00ef\u0096\u001e\u00cf\u00e4\u00b3n\u0098\u00dc\u0013t\u00d2\u00bbgM\u000e;\u00b0\u009e\u00d2w\u00b9\u00dd\u00f7\u00d4\u00c3mgP\u001c\u0019QX\u00d5\u000e[wl/\u00c7;W8\u00c9>\u00e2\u00d9\u00b0\u0090S\u00cc\u0003\u00a7\u0098g|Ifh\u00ad\u009fZ\u00fb~\u00dc\u00b3\u00ff2\u00cd\u0001\u0017Aj\b'~\u00fbg1\u00f4\u00a5\u00b5\u00db7\u00e0\u00fc\u00a0Ys\u0093b\u008d\u00d3\u0005F\u00b8h\u00b8\u00e5\u0083\u00f4\u00ad\u00e8\u00f9\u00f0f\u00f1\u00eb(\u00dd\u00b1\u00a2\u0007\u000f*\u00ea6\u0014\u00dd\u00db\u00bb\u00e2\u0083\u00b2\u008a\u00b5\u00db\u00bf\u00e3\b\u008f\u00ee\u0090\u00a3V\u00d1\u00f1-m\u00e1~\u00d0\u0016L\u00dd\u00da\u0086n\"C\u00ac'Ogkr\u00c7=\u00f8+\u008e\u00b4\u0095<\u00f7u\u0095\u009f\u008f\u00c4\u00e2\u00d7\u00a7B\u0006\n7P\u0003t+\u00fe\u00ed\u00a9>\u0015#\u00fd!k\u00f9:b\u0019\u00bbq\u00c4\u00f8\u00e6t\u00bf+k\u00ee\u00c1\u001a\u00d6x\u007fZ\u00c1]\u00eeB\r\u00c3\u00d6<\u00ff\u00e5\u0092\u00cd\u008e\u008c\u000f\u00aa\u0093\u00f5B\u0010\u00f28\rAB\u00e7\u00b6(\u0082A-\u009e\u00b1{\u00afSb\u00d3\u0080\u0089\u00f9\u00a0\u000f^$\u00d2\u00c45\u00a2\u008e\u009dFr\u008eY\u00e7^v\u00b3\u00a93\u00c2\u0089\u0014\u00c2\u00ac\u00e4\u00ad:\u00c3\u00e8#\u001e\u00bf\u0004\u00e0\u00f6\u00dfM\tn\u00ec\u0093\u00c2\u00a7j5aY\u00cbV(\u00a7R+u\u0090,\u00b16v5\u00c5,\u00c4\u00b5\u00f7\u0090\u009b\u00a3&\u008dC\u000b\u0018J\u00a0^3\u00e4\u00d4\u00bcw\u001c|\u00f2d\u00b3=\u00dbJ\u00ba\u00dek\u0011\u00d0\u00f4\u00fdduF\u00ed\u0099\u00f1\u00f3\u00fe}_\u0007\f\u00eb\u00eb\u00d9\u00c3\u009a\u00b9\u00d3\u00b7\u00b4a~K\u00db\u00ec\u00d2\u00cai\u00d7\u009e\u00b6=\u00ba\u0015\u00f8\u0019\\\u00cb2\u00ed\u00fdi\u0090\u00bd<o\u00df\u00b2\u0001\u00d8\u00ce\u00d1\u0010\u009c\u00ec\u00a1\u00f6\u00e6\u00fc\t\u00e5i\u00db\u0017:\u00c4\u008d\u00aa\u0097h\u00e3\u00c4I\u00bd\u008aw\u0002\u009e4j\u00f7$\u00aa\u00dd;\u0015\u00cf\u00c3\nou\u00cbhO\r<U\u00c6]\u009a\u0088\u008aY\u00e4\u0007\u00c60U,*\u00ea\u0007\u001e%\u008e|\u0014\u00d6\u00a8~\u008c\u0011\u00b5y\u001d5\u00d3\u00a8n\u008e9{9b8\u000b\u0097o\u009eu}y\u00e41,\u00e7\u00fe\u00fc\u00a4{o\u00eb\u001fsc\u00ebMY\u00b3\u0007\u00ed\u00135\u001a\u00b3\u00a4\u00dd\u0097P\u009a\u0017\u00adJ\u00ab\u00c2\u00bb\u00f3P\u009e\t\u0098y~\u0015%z\u00e7\u00f9\u008b\u00fapS\u00f1~_\u0003\u00de\u00aa\u00c4wWr\u00c4\u00b4\u0086\u00bf\u00b4\u00e7lu\u000fS\u00e3\u000eM/\u00be\u00f2r\u00b1\u00b6\u00e3\u00b7^\u00ae06\u001c\u0094A-n\u00e1m\u00f6\u001e\u0081\u001aue\u00f2~\u00f1\u00cd\u008c_\u00fb\u00fa\u001dgrP\u008dz\u00efJ\u00d6@\u00fd\u0007\u00f5\u00bd\u00f3\u00d6\u008b\u00cc\u0015y\u00a3\u00b7\u00cd\u00c8}\u0089\u0094V/Z\u00bc\u00d3\u00e8a\u00c8$\u008f{7P\u00d37\u00e99w\n\u0098$l4\u00fd\u00b06]\u00d3\u00e0\u00ee\u008c\u00d5\u00e4F\u00eb\u00bb\u00f2\u00f8r?\u00b6>^\u0012\u00c3K\u0082\u00ae\u00e84dQf\u00db\u00b9\u00e7D:\u00f9\u00a6\u009e%\u0010\u00a1\u00ad\u00c7At\u0099\u0003\u0085\u008c\u00c9\u00b2l\u00a2\u00a6\u00cee\u00a2\u00aela:iG\u0089\u001c\u00a8P\u00ad\u0019=\u00b4$\u00c9\u0005iN\u00a1\u0094n\u009c\u00d2\u00aeE\u00d9\u00f1\b9\u000b\u0000\u00f3\u00af\u00ff\u00f9\u007f\u00ff\u001b\u0000\u0000\u00ff\u00ff=\u0086\u0094\u00dc\u00dbg\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "GET",
                "uri": "https://ctrver.t.hmny.io/fetchContractCode?contractAddress=0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79&shard=0",
                "body": null,
                "headers": {
                    "User-Agent": [
                        "python-requests/2.28.1"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json; charset=utf-8"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "X-Powered-By": [
                        "Express"
                    ],
                    "Server": [
                        "nginx/1.18.0 (Ubuntu)"
                    ],
                    "ETag": [],
                    "Content-Length": [
                        "52960"
                    ],
                    "Access-Control-Allow-Methods": [
                        "GET, POST, OPTIONS"
                    ],
                    "Access-Control-Allow-Headers": [
                        "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"
                    ],
                    "Access-Control-Expose-Headers": [
                        "Content-Length,Content-Range"
                    ],
                    "Date": [],
                    "Access-Control-Allow-Origin": [
                        "*"
                    ]
                },
                "body": {
                    "string": "{\"abi\":[{\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\",\"internalType\":\"string\"},{\"internalType\":\"string\",\"type\":\"string\",\"name\":\"_symbol\"},{\"name\":\"cap_\",\"internalType\":\"uint256\",\"type\":\"uint256\"},{\"name\":\"_manualMintLimit\",\"internalType\":\"uint256\",\"type\":\"uint256\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"_lockFromBlock\"},{\"name\":\"_lockToBlock\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"type\":\"constructor\"},{\"name\":\"Approval\",\"type\":\"event\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"indexed\":true,\"type\":\"address\"},{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"spender\",\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"indexed\":false,\"type\":\"uint256\"}],\"anonymous\":false},{\"anonymous\":false,\"name\":\"DelegateChanged\",\"inputs\":[{\"name\":\"delegator\",\"indexed\":true,\"type\":\"address\",\"internalType\":\"address\"},{\"type\":\"address\",\"name\":\"fromDelegate\",\"indexed\":true,\"internalType\":\"address\"},{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"toDelegate\",\"indexed\":true}],\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"indexed\":true,\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"previousBalance\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"newBalance\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false,\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"name\":\"Lock\",\"type\":\"event\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"anonymous\":false,\"inputs\":[{\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"anonymous\":false,\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"from\",\"indexed\":true},{\"internalType\":\"address\",\"name\":\"to\",\"indexed\":true,\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"internalType\":\"uint256\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"name\":\"DELEGATION_TYPEHASH\",\"type\":\"function\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"internalType\":\"bytes32\",\"type\":\"bytes32\"}],\"name\":\"DOMAIN_TYPEHASH\",\"type\":\"function\"},{\"stateMutability\":\"nonpayable\",\"name\":\"addAuthorized\",\"type\":\"function\",\"outputs\":[],\"inputs\":[{\"name\":\"_toAdd\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowance\",\"stateMutability\":\"view\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"spender\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"name\":\"approve\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"type\":\"uint256\",\"name\":\"amount\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"name\":\"authorized\",\"stateMutability\":\"view\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"internalType\":\"bool\",\"type\":\"bool\"}]},{\"inputs\":[{\"type\":\"address\",\"name\":\"account\",\"internalType\":\"address\"}],\"stateMutability\":\"view\",\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"type\":\"uint32\",\"name\":\"\"}],\"name\":\"checkpoints\",\"outputs\":[{\"type\":\"uint32\",\"name\":\"fromBlock\",\"internalType\":\"uint32\"},{\"name\":\"votes\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"type\":\"function\",\"stateMutability\":\"view\"},{\"stateMutability\":\"view\",\"name\":\"decimals\",\"type\":\"function\",\"outputs\":[{\"type\":\"uint8\",\"internalType\":\"uint8\",\"name\":\"\"}],\"inputs\":[]},{\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"name\":\"subtractedValue\",\"internalType\":\"uint256\"}],\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"type\":\"function\",\"name\":\"decreaseAllowance\",\"stateMutability\":\"nonpayable\"},{\"stateMutability\":\"nonpayable\",\"name\":\"increaseAllowance\",\"type\":\"function\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"type\":\"uint256\",\"name\":\"addedValue\",\"internalType\":\"uint256\"}],\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}]},{\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"name\":\"lockFromBlock\",\"stateMutability\":\"view\",\"type\":\"function\"},{\"name\":\"lockToBlock\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}],\"type\":\"function\",\"inputs\":[]},{\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"name\":\"manualMintLimit\",\"stateMutability\":\"view\",\"inputs\":[]},{\"type\":\"function\",\"inputs\":[],\"name\":\"manualMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"view\",\"name\":\"name\",\"type\":\"function\",\"inputs\":[],\"outputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"inputs\":[{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"\"}],\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"nonces\"},{\"name\":\"numCheckpoints\",\"inputs\":[{\"name\":\"\",\"internalType\":\"address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"type\":\"function\"},{\"name\":\"owner\",\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_toRemove\",\"type\":\"address\",\"internalType\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"outputs\":[],\"inputs\":[],\"name\":\"renounceOwnership\",\"type\":\"function\"},{\"stateMutability\":\"view\",\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}],\"type\":\"function\"},{\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"inputs\":[],\"type\":\"function\"},{\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"name\":\"transfer\",\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"internalType\":\"bool\",\"type\":\"bool\"}]},{\"name\":\"transferOwnership\",\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\",\"inputs\":[]},{\"name\":\"capUpdate\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_newCap\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"type\":\"function\",\"outputs\":[]},{\"outputs\":[],\"name\":\"lockFromUpdate\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_newLockFrom\",\"internalType\":\"uint256\"}],\"type\":\"function\"},{\"name\":\"lockToUpdate\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"type\":\"function\",\"inputs\":[{\"name\":\"_newLockTo\",\"internalType\":\"uint256\",\"type\":\"uint256\"}]},{\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"name\":\"unlockedSupply\",\"inputs\":[],\"type\":\"function\",\"stateMutability\":\"view\"},{\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[],\"name\":\"lockedSupply\"},{\"name\":\"circulatingSupply\",\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"type\":\"function\",\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"name\":\"totalLock\",\"stateMutability\":\"view\"},{\"name\":\"mint\",\"outputs\":[],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_amount\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"name\":\"manualMint\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"_to\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[]},{\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}],\"stateMutability\":\"view\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"totalBalanceOf\",\"type\":\"function\"},{\"stateMutability\":\"view\",\"name\":\"lockOf\",\"type\":\"function\",\"inputs\":[{\"type\":\"address\",\"name\":\"_holder\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastUnlockBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"inputs\":[{\"name\":\"_holder\",\"internalType\":\"address\",\"type\":\"address\"}]},{\"type\":\"function\",\"outputs\":[],\"name\":\"lock\",\"inputs\":[{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"_holder\"},{\"name\":\"_amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\",\"internalType\":\"address\"}],\"name\":\"canUnlockAmount\",\"type\":\"function\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"name\":\"unlock\",\"type\":\"function\",\"outputs\":[],\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"inputs\":[{\"type\":\"address\",\"name\":\"_to\",\"internalType\":\"address\"}],\"outputs\":[],\"name\":\"transferAll\",\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"delegator\"}],\"name\":\"delegates\",\"outputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"\"}]},{\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"delegate\",\"type\":\"function\",\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"outputs\":[],\"type\":\"function\",\"name\":\"delegateBySig\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"delegatee\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"internalType\":\"uint256\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"internalType\":\"uint256\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"type\":\"bytes32\",\"name\":\"r\",\"internalType\":\"bytes32\"},{\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"name\":\"s\"}]},{\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}],\"name\":\"getCurrentVotes\",\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"account\",\"internalType\":\"address\",\"type\":\"address\"}]},{\"name\":\"getPriorVotes\",\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"blockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"type\":\"function\",\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}]}],\"constructorArguments\":\"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000019d971e4fe8401e74000000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000000000000000015b74cf00000000000000000000000000000000000000000000000000000000024c0e8f0000000000000000000000000000000000000000000000000000000000000005566970657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055649504552000000000000000000000000000000000000000000000000000000\",\"contractName\":\"GovernanceToken\",\"sourceCode\":\"// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: contracts/Authorizable.sol\\n\\npragma solidity 0.6.12;\\n\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address _toAdd) public onlyOwner {\\n        authorized[_toAdd] = true;\\n    }\\n\\n    function removeAuthorized(address _toRemove) public onlyOwner {\\n        require(_toRemove != msg.sender);\\n        authorized[_toRemove] = false;\\n    }\\n}\\n\\n// File: contracts/GovernanceToken.sol\\n\\npragma solidity 0.6.12;\\n\\n\\n\\n\\n// The GovernanceToken\\ncontract GovernanceToken is ERC20, Ownable, Authorizable {\\n    uint256 private _cap;\\n    uint256 private _totalLock;\\n    uint256 public lockFromBlock;\\n    uint256 public lockToBlock;\\n    uint256 public manualMintLimit;\\n    uint256 public manualMinted = 0;\\n\\n    mapping(address => uint256) private _locks;\\n    mapping(address => uint256) private _lastUnlockBlock;\\n\\n    event Lock(address indexed to, uint256 value);\\n\\n    constructor(\\n      string memory _name,\\n      string memory _symbol,\\n      uint256 cap_,\\n      uint256 _manualMintLimit,\\n      uint256 _lockFromBlock,\\n      uint256 _lockToBlock\\n    ) public ERC20(_name, _symbol) {\\n        _cap = cap_;\\n        manualMintLimit = _manualMintLimit;\\n        lockFromBlock = _lockFromBlock;\\n        lockToBlock = _lockToBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    // Update the total cap - can go up or down but wont destroy previous tokens.\\n    function capUpdate(uint256 _newCap) public onlyAuthorized {\\n        _cap = _newCap;\\n    }\\n\\n    // Update the lockFromBlock\\n    function lockFromUpdate(uint256 _newLockFrom) public onlyAuthorized {\\n        lockFromBlock = _newLockFrom;\\n    }\\n\\n    // Update the lockToBlock\\n    function lockToUpdate(uint256 _newLockTo) public onlyAuthorized {\\n        lockToBlock = _newLockTo;\\n    }\\n\\n    function unlockedSupply() public view returns (uint256) {\\n        return totalSupply().sub(_totalLock);\\n    }\\n\\n    function lockedSupply() public view returns (uint256) {\\n        return totalLock();\\n    }\\n\\n    function circulatingSupply() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function totalLock() public view returns (uint256) {\\n        return _totalLock;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // When minting tokens\\n            require(\\n                totalSupply().add(amount) <= _cap,\\n                \\\"ERC20Capped: cap exceeded\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._transfer(sender, recipient, amount);\\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    function manualMint(address _to, uint256 _amount) public onlyAuthorized {\\n        require(manualMinted < manualMintLimit, \\\"ERC20: manualMinted greater than manualMintLimit\\\");\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n        manualMinted = manualMinted.add(_amount);\\n    }\\n\\n    function totalBalanceOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder].add(balanceOf(_holder));\\n    }\\n\\n    function lockOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder];\\n    }\\n\\n    function lastUnlockBlock(address _holder) public view returns (uint256) {\\n        return _lastUnlockBlock[_holder];\\n    }\\n\\n    function lock(address _holder, uint256 _amount) public onlyOwner {\\n        require(_holder != address(0), \\\"ERC20: lock to the zero address\\\");\\n        require(\\n            _amount <= balanceOf(_holder),\\n            \\\"ERC20: lock amount over balance\\\"\\n        );\\n\\n        _transfer(_holder, address(this), _amount);\\n\\n        _locks[_holder] = _locks[_holder].add(_amount);\\n        _totalLock = _totalLock.add(_amount);\\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\\n            _lastUnlockBlock[_holder] = lockFromBlock;\\n        }\\n        emit Lock(_holder, _amount);\\n    }\\n\\n    function canUnlockAmount(address _holder) public view returns (uint256) {\\n        if (block.number < lockFromBlock) {\\n            return 0;\\n        } else if (block.number >= lockToBlock) {\\n            return _locks[_holder];\\n        } else {\\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\\n            uint256 numberLockBlock =\\n                lockToBlock.sub(_lastUnlockBlock[_holder]);\\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\\n        }\\n    }\\n\\n    function unlock() public {\\n        require(_locks[msg.sender] > 0, \\\"ERC20: cannot unlock\\\");\\n\\n        uint256 amount = canUnlockAmount(msg.sender);\\n        // just for sure\\n        if (amount > balanceOf(address(this))) {\\n            amount = balanceOf(address(this));\\n        }\\n        _transfer(address(this), msg.sender, amount);\\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\\n        _lastUnlockBlock[msg.sender] = block.number;\\n        _totalLock = _totalLock.sub(amount);\\n    }\\n\\n    // This function is for dev address migrate all balance to a multi sig address\\n    function transferAll(address _to) public {\\n        _locks[_to] = _locks[_to].add(_locks[msg.sender]);\\n\\n        if (_lastUnlockBlock[_to] < lockFromBlock) {\\n            _lastUnlockBlock[_to] = lockFromBlock;\\n        }\\n\\n        if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\\n            _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\\n        }\\n\\n        _locks[msg.sender] = 0;\\n        _lastUnlockBlock[msg.sender] = 0;\\n\\n        _transfer(msg.sender, _to, balanceOf(msg.sender));\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator =\\n            keccak256(\\n                abi.encode(\\n                    DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name())),\\n                    getChainId(),\\n                    address(this)\\n                )\\n            );\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n            );\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"GovernanceToken::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"GovernanceToken::delegateBySig: invalid nonce\\\"\\n        );\\n        require(now <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"GovernanceToken::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld =\\n                    srcRepNum > 0\\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\\n                        : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld =\\n                    dstRepNum > 0\\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\\n                        : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber =\\n            safe32(\\n                block.number,\\n                \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\"\\n            );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"compiler\":\"0.6.12\",\"contractAddress\":\"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\",\"libraries\":[],\"cached\":{\"ttl\":1661965885869,\"cached\":true},\"proxyDetails\":null}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "121"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "1256"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00dcV\u00dbn\u001cG\u000e}\u00df\u00cf\u0098gc\u00c1{\u0091\u00fe\u009b\u00ae\u001b\u00b0\u008b\u00c5\u00ee\u00c2N\u0080\u0000A\u00fe=`U\u008f43\u0092b)v^\"\u00d9P\u000f\u00a7\u009a<<$\u000f\u00eb\u00d7\u00cb\u00bf\u00bf\u00fe\u00ef\u00bf_\u00fe\u00df.\u009f/\u00f4O\u00b8|\u00ba\u00fc\u00ab_>#|\u00ba|\u0019_\u007f\u00fe\u00cfO\u0097\u00cf\u0017\u00f8\u00c5\u00c0\u00c1@@\u00c9\u0000\u0084\r\u00c1\u0010\u00a0\u0081\u0016\u0003\u0000V\u0083\u0001\u00d8\u001c\u008c\u0019\u00b9\r\u00b5\u0082\u0098'\u008ahI\u00eb\u0011\u00a0\u00d1j\u00ddV\u0019\u000fV1\u0004\u00ea\u00b1\u00ad\u001d\u0006C\u00af\u00b0\u00ac\u008c\u00f3\u00b4v\u00a3\u00d1yl+\u0015-\u000b\u00c1T\u00d3z\u0017w\u00f9\u00d2\u00d3W\u0081\u0003\u009c\u0018\u00b7\u00d5O4\u00a1\u00dd\u00a3\u00caim\u00f2\u00e8\u000b\u001d\rz\u00ef\u001b\u00ed\u00a1\u00fb\u00ad'k\u00be\u0085\u00d5\u00b7\u0095\u00b8z\u00a1\u00ab\u00b5\u009fhi\u00e0Q\u00bal+\u00d1|\u008c\u00006{\u001f\u00c0\u00eb{\u00e8'.\b\u001dG\u00a9\u00db\u008a:n\u00dfb;\u009f\u00b7\u00ad'\u000b\u00b6\u00be\u0001\u00d0\u009aUp\u0098]+\u008b\u0003j\u009e\u0019gu\u00b6]W\u00c5F\u00e4{u\u00e4{YO\u0007E\u0003\u0002\u0007'%gEGg\u00c0\u00fd\u001c\u0018\u00e4\u001c\u0014\u0090\u00b6@W\u00c0\u00c8\u00b3\u00ec\u009c\u009e\u00b5:;\u00e2\u008e\u0087\u00c4Z\u001c=?\u00a2\u00b3SzI\u00df\u0090,\"\u00d4\u008c\u00a9\u00b0\u007fc\u00fd\u00cf\u00b3\u0001\u00068\u00d1N\u00d4\u00a8\u0090\\8\u0001ol\u0080\u0019\u008b\u0000xy\u00018\u00801\u00d0\u00fc\u00c9{\u00e4;U!h\u00fb^}\u008a\u000e\u0081\u00c0\u0001\u0093o8A;^p\u0082\u0087dO;\u00b0\u00e5?\u0081\u00e7\u008c\u001c\u00efO\u0017\u009e\u00ef\u00fcqdE\u00cb\u00dc\u0012!\u00a77\u00b1\u00e3\u0096\u00f5@T\u00d4d]\u0093S\u008c\u00ccp\u00e7\u00f3\u0080y\u00f5\u00e7\u0003\u00e6U\u007f\u00e9\u00fd\u00de\u00e3{\u00bc\u008d\u00fa-\u0006\u00ec\u0099\u0001\u0002\u00fa\u001e\u0006\u001c\u00d1b\u00f7\u0017&\u000b\u0001\u0081\u009b\u0015ybe\u00e0\u00ea\u00ee+>\u00e2\u0097\u00f8\u00b2\u00dbo\u00f0\u00d1\r>}\u00c0\u00b7|fo\u00dc\u00f94}\u00e1\u0093l\u0018BA\u00bb\u009f\u00849\u0003\u0082\u00d0\u00de\u00c1$\u00c5\u00cb\u00f9\u00c2\u00b7\u0091\u001e\u00e5\u0011\u00e9\u00fb\u00b9D[X\u00e7}V\u00fd\u00ad\u00f9.\u00fc\u0090\u00ffx\u0099\u00ff\u00db]O\u00b3\u00fd\u00c0\u00ae/G,\u0086\u001f4\u00eb\t\u001b3\u007f\u008b\u00c5\u001bl,\u00c7\u008f\u00e9GXH\u0013_]3\u00c4K\u00cfR\u00bd\u00d6\u0086[\u00b5\u00cb\u00ea\u00e7'\u0081\u009c\u00acX*\u00a9\u00c2r\u00d5\u00ad@\u00cd\u00f9\u00c5}.P\u00b1\u00cc\u0081s\u00ce\u00d6$\u0088;HU\u008d)\u009d\u00e2\u00f0:\u009b\u00b5~\u0080\u008c\u00aa\u0015:71(\u008a\u008d\u0004\u00a8i\u00d3\u00d6\u0002!Z\u00d0\u00ee\u00b8\u00f4\u009e1\u000e\u00da\u00fd\t+\u00f6\u00adb\u001b\u0000-uT\u00b4=\u00d9\u0000@\u00e5\u00bdt\u00bc\u00f9\u00b32\u0013\u00b4H\f\f\u0092\u00ea\u009c\u00f9\u00baD\u00d6D\u0080R\u00d9]\u00d6\u00b9\u00dc\u0019\u008b\u00b3\u00a0X{\u00c3\u00c9\u00e9\u00ac\u00ac\u0018\u00ad\u00ad\u0096\u00ea\u009eU\u0015\u00de;\u001bam\u0010\u0015H_\u009c\u00cc]u\u00fc|+w$\u00e5\u00e7\u00ec$\u0080\u00ad\u00f3\u00f9\u00945\u00d1\u00ea\u00a8\u00b2b\u00a6\u00ed\u00dc \u00f9~z]\u001b[$76\u00ed\u00c9]\u00bbey{\u00de>\n\u00a7B\u00dcW]\u00ee\u00ab\u009e\u00fe\u00e8#\u001dVr\u008b\u00b9\u00ea\u00da\u0097\u008b\u0019!p\u000bP\u00f5\u00dc\u0089v\u00ed\u0093\u00e0\u0090d7\u0019,\u00d3\u009b\u00d6\u0081CG\u001d\u00adt\u00ad\u001de\u0016\u0014*\u001d\u0087\u00cb\u00e4\u00de\u00f3\u009e\u00d0`\u0096J\u00148\u00b4\u0012\u00c0\u00d1\u00bc\u0095\u00c65H\u0083v\u00ae\u00ab_X\u0017+Y\u008f\u0095\u00a9i\u0095\u0012\u00eb\u00ef\u00072a\u00b4d\u00e6\u00ca\u00c5\u009e\u0087\u0093\u0015$PqB\\UV\u00bc\u009b\u00df\u000f\u00c4\u0010\u00ccK\u00db\u00d2\u0081\u00c8\u00feP\u000f-\u001f\u009ahy@\u00f9j\u00fd\u0098]\u00b2\"\u00b1:&\u00b1\u007f\u00ff\u008c\u00a0\u00a0j]\u00f9[\n\u00f9_\u008f\u00f9\u0099\u00efV\u00ff<\u00df\u001f\u008f\u009c\u00aa\u00e3\u00bc\u0015I\u00f5C\u00f1 \u0095\u00e9\u008fTuG\\\u0011\u00fc\u001a!\u00f8\u009c\u00a2\u00a5\u000b\u00a99\u00e7\u0089\u0092\u00dd\u00ad\u00ban\u00a8{\u008e\u00f6\u00fd\u0094\u00cb\u00ec}\u0092\u00d2\u00d1\u00b1\u000ej\u001e\u00d5\u00a2Q\u0005\u00f3\u00d9\u00b8x?\u008eP\u00aaG\u0099h\u00dc\u00e4@4\u00f2\u00a9zH\u009fJ\\y\u00ccu\u00bf\u00bdW\u00dd\u00eb\u0014\u00f1\u00f5N\u00f9\u00ac\u0016\u00af\u00cd\u00c4Y#<kd\u00d1ok\u00f4\u00danyb\u0080\u00ce\u00fc\u00f4\u0089ct^^|6\u00d8\u001c\u00ac\r\u00b3~\u00d5\u00dd}b\u00f0U\u00c7PO\u00b5\u00b5\u00de\u00b4p\u00dfQy\u00ec\u00a7s\u00a3\u009e[\u00c3i\u00ab\u00a6\"s`\u0099e\u00b6\u00a9L\ru\u00c2a\u00bdB\u00ed\u00d6a\u0000{\u001dG\u00c1\u00ce\u00d0\u001d\u00bc\u0095\u001e\u00de*\u00d7Y\u00c8\u00fc\b\u00ad3\u00e5\u00b3\u009a\u00c6\u008b\u00fb\u00d1A\u009b\u00a9\u00dcM\u00b9\u00ad\u00f2\u00e6\u00b2\u0095\u00f66o\u00b8\u00dd\u00ac's\u00e7\u0019|m\u00cb\u00b9\u00b8\u00fd\u001dw\\2\u00b1n \u0096S\u00e7\u00f2|\u001b\u00be\u00ef\u00bb\u00c7Y\u0005\u0088\u00e5\u00f3\u00ec \u00c9o\u00f6\u00bc\u00e6\u00ad\u00f5\u0099\u00d19\u000e2\u00b1(`VX\u009d\b\u0089 p\u008c2XE*\u0094>\u0084\u000b\u00d6\u00a9\u00cd\",|\u008e2e\u00c6\u00818Jk\u00c0\u00a3\u001c\u00c7P\u00ea,\u00a31U\u00b4\u0006&\u0085mZ3\u0016\u00ce\u0004\u00b2D\u00cc\u0097\u00df\u00fe\u00f1{\u0000\u0000\u0000\u00ff\u00ff\u00a8\u00db\u001ajH\u0010\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "67"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "72"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff }\u00ea\u00830\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x95d89b41\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "148"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "84"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00d2Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00c4\u00d4\u00dc$\u00cd$\u00d5\u00c4\u0094\\\u0003\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u00ba\u00d0\u0083\u00b4\u00e8\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "67"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "72"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00d6Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff}[\u008c\u00130\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x313ce567\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "148"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "69"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00d1Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018\u001a)\u00d5r\u0001\u0002\u0000\u0000\u00ff\u00ff\u0001\u00ab6\u0086h\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "67"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "72"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00d5Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00db7Wx0\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x06fdde03\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "148"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "98"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b224\u00d3Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0 \u00c9\u00d4\u00dc\u00dc\u00c8\u00cc\u00d0\u00dc\u00c0\u00dc\u00c0\u00cc\u00d4\u00cc\u00c4\u00c8\u00c0$\u00cd$\u00d5\u00c4\u0094x\u0003\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ffD\u0084\u00b4p\u00e8\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "149"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "513"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0\u00c2\u00d8\u00c1\u00d8\u00a6]?\u00c3\u00ea\u000eJ?\u00d4_\u009fy\u00fa\u0001+0\u00fb\u0088MKL\u00c5\u009b\u0090\u00bcGBCQ\u00adI1\u0019\u00cd%\u0091b\u00c3\u00eak\u00a2\u00e6B\u0089\u00de\u0099\u001cQ3k\u008a5\u0088\u00b7\u0001\u00ba\u0003\u00e1\u00d7\u00dd\u00a6\u00b4\u00f1\u0081\u0012\u00ab\t\u00d5\"tP\u0087\u00ed<r\u009d?\u0088\u008cm\u009a`\u00b5\u00dd\u00f5}\u0007u\u00b7\u00d9\u00f5<\u00afo\u00db'\u009e\u00beMM\u001e~\u000b\u0085\u0095\u000bt\u00a0\u00e3\u00b09TL!\u0013D\u00c5\u00b1&RV)\u00ecYm\r\u0098\u00c5T\u0097\u0090r\u00b1\u00bcL\u00ba~F\u0094]Y\u0094\u00f7\u00c3\u00f5\u0004\u00ab\u00efw\u00c0\u008f\u00d3\u00c1\u00ec\u001b\u00fb\u0094[\u00b6\u00aa\u0098\n2*\u00b6\\\u00b8\u00c6\u00a6\u00b6\u00a5\u00c0%\u0010\u008b\u00d4\u0098\u001fe\u00bd\u008dO\u00c23?\u0094\u00cc\u0085p>\u00d8\u008c\u0089\u009cS\u00b7|\u001fd\u007f\u00d9J\u00db\u001fF4X\u00a2\u00df\f\u00b7\u008b7\u00ca\u00fd\u00d4:\u0098\u0087\u009bu]\u00ac\u0001\u00b3\u0017Q\u00f2\u00c4\u0082\u00a5QM\u00b9\u0084\\\u00a9\u0098\u0090\u00b4\u00da\u0098\u00849{*\u001c\u0015\u0083\u00ad\u008e\u0011\u0003%\u00f5\u009e\u009d\u00a8'[lS\u00e8\u00ce\u00bc\u00fa\u0082\u00fcN\u0093$\u00df\u009c\u00b0`\u00aa\u0094$4G\u00cc6\u00b4F\u0084\u0094\u00c9\u0004\u0094\u00e8}\u00b6\u00a8p\u00d5\u00c1<\u00f2v\u00e2:\u00af\u0087\u00edSp*\u00d6z\u00f25\u0007\u00f2)\u0007\u00abU\u008b)\u0085\u00a3ca\u00a3T<\u0015g\u00c4 G\u0017Z\u0016LN\u0084C\u0010\r\u00c5\u00d3\u00a2\u00f0\u0019\u00ed\u0093\u00b5\u0001\u00ee\u00af\u000eK\u00f6\u00b1\u001f\u00fe,\u00ec\u0091\u00e7\u00d3\u008b\n\u001e\u00cb\u00f1d\u00c2\u00e9d\u00e7\u00af\u00fe\u00cbA\u00af\u00e1\u00f8\u0017\u00fdkpL\u00d0\u00e58m\u00c1\u00f9\u00de\u0011\u009c\u00b1\u00e2\u00ff\u0002:\u0098f\u009ew\u0087[\u00b3\u00ec\u00f5<\\zv\u00dex\u0087\u00ef\u00df\u00fd\u000e\u0000\u0000\u00ff\u00ff\u00d3\u00fc\u00e0m4\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "149"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "513"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0\u00c2\u00d4\u00c1\u00d8\u00a6]?\u00c3\u00ea\u000eJ?\u00d4_\u009fy\u00fa\u0001+0\u00fb\u0088MKL\u00c5\u009b\u0090\u00bcGBCQ\u00adI1\u0019\u00cd%\u0091b\u00c3\u00eak\u00a2\u00e6B\u0089\u00de\u0099\u001cQ3k\u008a5\u0088\u00b7\u0001\u00ba\u0003\u00e1\u00d7\u00dd\u00a6\u00b4\u00f1\u0081\u0012\u00ab\t\u00d5\"tP\u0087\u00ed<r\u009d?\u0088\u008cm\u009a`\u00b5\u00dd\u00f5}\u0007u\u00b7\u00d9\u00f5<\u00afo\u00db'\u009e\u00beMM\u001e~\u000b\u0085\u0095\u000bt\u00a0\u00e3\u00b09TL!\u0013D\u00c5\u00b1&RV)\u00ecYm\r\u0098\u00c5T\u0097\u0090r\u00b1\u00bcL\u00ba~F\u0094]Y\u0094\u00f7\u00c3\u00f5\u0004\u00ab\u00efw\u00c0\u008f\u00d3\u00c1\u00ec\u001b\u00fb\u0094[\u00b6\u00aa\u0098\n2*\u00b6\\\u00b8\u00c6\u00a6\u00b6\u00a5\u00c0%\u0010\u008b\u00d4\u0098\u001fe\u00bd\u008dO\u00c23?\u0094\u00cc\u0085p>\u00d8\u008c\u0089\u009cS\u00b7|\u001fd\u007f\u00d9J\u00db\u001fF4X\u00a2\u00df\f\u00b7\u008b7\u00ca\u00fd\u00d4:\u0098\u0087\u009bu]\u00ac\u0001\u00b3\u0017Q\u00f2\u00c4\u0082\u00a5QM\u00b9\u0084\\\u00a9\u0098\u0090\u00b4\u00da\u0098\u00849{*\u001c\u0015\u0083\u00ad\u008e\u0011\u0003%\u00f5\u009e\u009d\u00a8'[lS\u00e8\u00ce\u00bc\u00fa\u0082\u00fcN\u0093$\u00df\u009c\u00b0`\u00aa\u0094$4G\u00cc6\u00b4F\u0084\u0094\u00c9\u0004\u0094\u00e8}\u00b6\u00a8p\u00d5\u00c1<\u00f2v\u00e2:\u00af\u0087\u00edSp*\u00d6z\u00f25\u0007\u00f2)\u0007\u00abU\u008b)\u0085\u00a3ca\u00a3T<\u0015g\u00c4 G\u0017Z\u0016LN\u0084C\u0010\r\u00c5\u00d3\u00a2\u00f0\u0019\u00ed\u0093\u00b5\u0001\u00ee\u00af\u000eK\u00f6\u00b1\u001f\u00fe,\u00ec\u0091\u00e7\u00d3\u008b\n\u001e\u00cb\u00f1d\u00c2\u00e9d\u00e7\u00af\u00fe\u00cbA\u00af\u00e1\u00f8\u0017\u00fdkpL\u00d0\u00e58m\u00c1\u00f9\u00de\u0011\u009c\u00b1\u00e2\u00ff\u0002:\u0098f\u009ew\u0087[\u00b3\u00ec\u00f5<\\zv\u00dex\u0087\u00ef\u00df\u00fd\u000e\u0000\u0000\u00ff\u00ffsuM\u009a4\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionByHash\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "148"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "454"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00fft\u0090An\u001b1\fE\u00f7=\u0086\u00d6\u0083B\u00a4$\u008a\u00f2\t\u00daM\u00d1+\u0090\u0014\u00d9\u00b8\u008d\u00ed`l\u0017\u0001\u0082\u00dc\u00bd\u0018O\u00d0]\u00b8\"?\u00f0?\u00f8\u00df[\u00fa}\u00bd\u009c\u00d7\u0017K\u0087\u0084_sZ\u00d2q\u00a6\u0003\u008c%\u00ad~\u00bd?\u00df\u00d2\u00e1-\u00e9\u00f3\u00c5\u00fe|\u0093\u00ebS:\u00a4\u00fc\u00da\u00c1C;k\u00cb\u00c4\u00ad\u0001B\u00c6\u001e%s\u00e7\u001cC\u0019\u0003\u001c\u00ac\u0019\u00a3W\u00d2\u00dej\u001e\u001dbHp7\u009a\u00adPZ\u00f6\u00c0\u001f\u00f7\u0093\u00fa\u00fa\u0088\u0004\u00cbd\u0005\u00d2\u0092b\u00bd\u009c\u001e\u0012e\u00c5L3f\u0095`\f\u0089\u00a9\u00d2$\u008a\u0011\u008c\u0099\u00ad2\u00e0\u00d0\"\u009b\u00e7\u0097\\\u00f7\u0094Bn\u00fb\u00fds=\u009a\u00efb\u00af\u00dc\u00c99o\u00d5\u009e\u00few\u0088YJ\u00c3f\u0083\u00b0\u00f1\u00a0\u0012\u0016\u009aU\u00a5W\u0099\u0092\u0003\u00b5\u00a1\u00d6<3H\u00af\u00e4c\u0002\u00d79\u0085h\u0006i\u00c3\u00d80\u009d_\u00ee\u00b7G\u0098\u008c\u00dc\u0086\u00a9\u00e6O\u0086\u009b\u00d7)\u0013\u00d8\u0090'yE\u0091B\u00ee\u0088\u0080\u00033\u00c1\u00ec\u00ad\u008d\u0002\u00f1\u0099\u00ff\u00b3\u00a9\u008d\u00ca\u0000\u00c6Z\u00a3nwZ\u00d2\u00f9r\u00fe\u00e8\u00cd\u009c\u0096\u00b4~\u00a0\u00ec\u0001\u00ea\u00cc\u0013\u0010\u0099U:\u00a0\u0099\u0085i\u00946\u00abSL.\u0096y\u00f8,\u00d0M\u008ai\u0019yd\u001f8\u00dd\u00a0\u00a7%\u00ed\u0080K\u00b8A3\u001d\u00acT\u001b`\u00f0\u00c8\u009d\u00db\u0010\u00e6n\u000e\u00b5k\u008d\u00d2\u00ab\u00fa,V\u00b0h&h\u00ea\u00049\u0007k\u00a3\u00ed\u00a3\u00db\u00f1\u00e4\u00d7\u009b\u009c^\u00f6\u00cf\u00d0+0m8o\u0097\u0087\u00e2\u00d2x\u00f8(\u0011\u00c0\n\u0002\u0001>T\u00ac{\u0014g\u0012%\u00949\u00ad\u008f\u00cd\u00b1\u00ca\u00f9*v;^\u00ce\u00df\u00cf\u00d3_\u00f7\u00c4\u00b4\u00a4\u00bf\u008f\u00cdHl\u00b0\u0094M\u0090\u00e7\u00fbN%\u00a7\u00f7\u00f7/\u00ff\u0002\u0000\u0000\u00ff\u00ff\u00fd\u00b4|\u00e3\u00f3\u0002\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x1c06c31\", false]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "94"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "1159"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0094\u0094\u00bd\u008e$\u00b9\r\u00c7s?F\u00c5\r\u0083\u00e2\u0097\u00c8\r\r\u0007\u000e\u001c\u0018\u0006.:\\@Q\u00d4m\u001b;\u00d3\u008b\u00e9^c\u00ec\u00c3\u00bd\u00bbQ]=s\u00b3\u009bYhT\u00ab(\u00e9\u00cf\u001f)\u00b2~\u00db\u00feu\u00bd<\u00bf|\u00cd\u00ed\u00d3\u0086\u007f\u0086\u00ed\u00b4\u009d\u00e7\u00f6\t\u00e1\u00b4\u00bd\u00d4\u00f5\u00db\u0097\u00db\u00f6\u00e9\u00b7\u00ed\u00f9\u00db\u00d3\u00a8\u0097\u00ed\u00d3\u0006\u00af-A\u0093\u00dav\u00da>\u00c7\u00f5\u00f3\u00dd\u00d4[\u00ad\u00d1m\b\u00a8\u00894l\u0080}\u0011X7X>\fW\u00ab\u0096\u0092\u0086\u00c5:\u00ba0xo\u00cbcYO\u009dB\u00ba\u009d\u00b6\u00af\u00f1R\u00cf\u00b7\u00bf\u00bd)\u00b2\u00c6\u001c\u00d8\u00c2R\u00bbhx\u00f4\b\u008f\u00d9\u00d3i\u00e2\u009a\u008a\u00d14\u0087\u00934R\u00ea\u00d6\u0017O\u0002\u0098\u00b9\u00c22h\u00d2v\u00da\u009e/\u00cfYw1\u00f8al\u00a7\u00ed\u00e9\u00fc\u00fa\u00ee\u00eb\u00c7\u00e5\u00ffwl\u00a7\u00ed\u00fa9\u00e8\u00a7\u00e7\u00fcR\u00d7#E3\u0093g\u00d9\u00ac\u00ec2{\u00c40\u0019\u00a2}h\u00e6\u00e4\u0016\u0093\u001a\u00b2\u00b4\u00e1l\u00d1\u00b9\u00d1\u0082h\u008ck2Lv\u00e2\u00be\u009d\u00b6/\u0097_\u00af\u007f\u00f9r\u00b9<=\u0010\u0011\u0000\u00ec\u00a3\u00d7P\u0080\u0016\u00fb\f\u0081\u00ef\u0096\u00c6\u008f\u00a5\u00f6\u00f83\u0000~\u00cc\u0019\u00e1\u00d0\u00b8\u008b0\u0080\u0019\u00e8akw3\u0010\u00c0c\u00cbq\u00c4\u00f6\u009f\u0001\u00ee\u00a6\u00f6.\u00c4\u00bbm\u007f\u0002\u00f8\u00b1\u0001\u00da\u00aem\u00c0\u00c0\u00df\u00e1!\u00b4w\u00ef\u0000xg\u00c7A\u000f4|\u0080\u00e2\u008e\u0082o\u009b\u00de\u001fo \u00ba\u0007hd\u00f7h\u00f0XJh\u001f\u001d\u00d1\u00c7\u0017<\u00e2\u00b3\u001d\u000e\u000e \u00d3\u000f\u00aa\r\u00de\u00d3\u00b8Ow\u00ef\u008f\u0015\u00bb\u00c7{\u00007l\u00ed\u00ed\u00f8\u009b$\u00eaN\u00f0\u00dd\r\u00bc\u00bf\u00f0[\u00b6\u00da\u001f^,\u00de2\u00b2_\u008f\u00bd1\u00db\u00fb)\u00ff\u00f1B\u00f1\u0003\u009b\u00bc\u00bb?\u00c6^b\u00b7\u00b8\u00d5?/\u0097\u00db\u00a3\u00e3\u00bcCj6O\u00b0\u00ae\u00da\u001cAQqX\u00ab!\u00d9\u0016\u0019JD\u00a3b\u0012\u00e9V$+!\u00d2\u001c;\u00d1\u00aa{\u000b<?:\u00baz0\u00c2\u00f4\u00d1\f*\u00d6\u0000\u009f!\u0084\u009c\u00b5r\u00b1N\u0013G.\u00b4\u00ed\u00b4\u00cd\u00f3Z\u00e7\u00fc\u00f6\u00e5\u00f6\u009f\u00a3.\u00b7\u00d3V\u00af\u00b7\u0097\u00f8k\u00dc\u00e2n\u00d9I\u00cf\u00ff=\u00fa\u00aeQ\u00f0v\u00da~\u008d\u00eb\u00df\u00cfO\u00e7\u0003\u009c\u0093\u0007\u00df\u0003\u00fa5\u00ae?]k\u001e\u00e1\u0080\u0094\u00ef{\u00ff\u00fd\u00b2\u008e\u00a3\u00c3\u0099j\u00ef\u0091R\u00efH43;\u00b0t\u00cdi\u0085\u001dY\rCD\u009b\u009aR\u00f9\u0098&\u00cd\u00c1\rx4W:\u00a4\u00fe\u00f1r\u00b9\u001czc\u00ef,\u00ce\u0091\u00cc\u009d\u00cdy\u00ae\u0005=]d!V,\u0004\u00f0\u008e\u009a>\u0096\u00d6\u00d4\u00b5J\u00fa\u0018\u0085B\u008bg\u00d4\u00e8\u00ea)\u00c1e\u00c3\u00abP\u0096\u008eB\u00ea\u00be\u00f6\u00a2t\u00d7\u00d6 y\u00e0\u009a\u0005Xd\u00b3\u0089T\u009b\\\u00be\u00ca\u0091\u00c6j\bi\u00dd\"C\u00d6`+\u00ea\u001de\u00e2 G\u00e8\u00a6}i)/\u00e3\f\u00f7\u008c\u00b9`\u008d\u00b6F\u009f\u00a5d\u0089\u0099\u00b0\u00c7s;?\u00d5\u00f5\u0016O_\u00ef\u0001)\u00167\u00d3\u00b5/\u00bc\u00c4\u00f35\u00f2v\u00be<_\u00df\u000b\u00a4DjJCTB\u0099\u0001\u008e=1g\u0099$&\u000f\u00b1\u00e5.a\u00aeLk\u00f7_\t\u00c6\u0084H#E\u001c\u00f7O\u00d0Ke\u009d\u00bf\u00de\u00fe\u00d0L\u00ea\u00b2\u0086\u00b0d\u00d1\u009ah\u0005\u0083\u0010\u009a1\u0091\t\u00cd=\u00ba\u00f2\u00c9%L4\u00aa\u00d4<KG7\u00efs4\u001e\u00b2\u009d\u00b6o\u008f\u008f\u00e4\u00cf\u00bf|\u00cf\u00bd}\u00fay\u0083W$\u0094\u0002@\u00ca\u00c6\u001c1<\u009b\u00b6\u00b0\u00e5\u00da\u0018\u0093$\u0085\u009aN\u00e2\u001c\u00ea\u00b0\u00d8\u00cc\u00f6\u00c2'\u00e7df\u009a\u00b1\u009d6x]\u0016\u001e+\u00e6~u\u000e\u0093\u00a2'q\u00868\u0017\u0013$)\u00ce\u00d9\u0000u\u0016\u009avm\u001d\u0095E\u00a0\u00f6\u00ee(\u0006\u00bb\u008b41_\u00e4 \u008c\u00c6\u0003\u001brL\"\u00ef\u0080*\u0099\u00e2\u00bdCD\u00ae\u00d6\u0017\u0011\u0099\u0086LG\u00852\u009b\u00996h\u001c$}\u00e1\u009abm\u00f6a\u00bc3Oq\u00f2>p\u00b6\u000e\u0086\u00c3\u00d1(\u00c8\u00bb\u00a8N\u00a6\u00c1\r\u00c7b\u0012\u0082\u00e1C\u00e5\u0010!\u00a5\tCBJ;\u0019vn\u008e\u001aZ\u00be@\u0016\u00d6\u009a<Tc/\u00e2\u00b9\u00c4W\u00f3\u00e9H\u00eam\u00c9\u00e8\u00ae|\u00e4\u0084|p\u0097B\u00a8\u00a9e\u0083:\u0091@\u0082-\u0007k2j\u0086\u00e0\u0000\u00b6)\u008d\u0016\u0016\u00fa\u00801\u00c7rp\u008e\n<H\u00fa\u009aD\u0082\u0092\u00ae(\u00e6J+\u00d7\u00801\u00a2s\u00cc\u0080\u0085Cp0Lh\u00d1Y\u00cbg3\u009e3T\u00e7\u00d2!\u00b8\u00ee\"\u001c<\u00e6\u00de\u00a21\u00a2E\u00aaJ\u00af5$\u00c3\u0088 :sZ\u009a\u0094NB\u00eb*\u0093b\u00b5\u00bdey\u00ce\u00b1\"c\u00fb\u00e5\u00f7\u00df\u00ff\u00f4\u00bf\u0000\u0000\u0000\u00ff\u00ff\u00ff\u00e2\u00df;\u00b2\b\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "149"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "513"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0\"\u00ec`l\u00d3\u00ae\u009fau\u0007\u00a5\u001f\u00ea\u00af\u00cf<\u00fd\u0080\u0015\u0098}\u00c4\u00a6%\u00a6\u00e2MH\u00de#\u00a1\u00a1\u00a8\u00d6\u00a4\u0098\u008c\u00e6\u0092H\u00b1a\u00f55Qs\u00a1D\u00efL\u008e\u00a8\u00995\u00c5\u001a\u00c4\u00db\u0000\u00dd\u0081\u00f0\u00ebnS\u00da\u00f8@\u0089\u00d5\u0084j\u0011:\u00a8\u00c3v\u001e\u00b9\u00ce\u001fD\u00c66M\u00b0\u00da\u00ee\u00fa\u00be\u0083\u00ba\u00db\u00ecz\u009e\u00d7\u00b7\u00ed\u0013O\u00df\u00a6&\u000f\u00bf\u0085\u00c2\u00ca\u0005:\u00d0q\u00d8\u001c*\u00a6\u0090\t\u00a2\u00e2X\u0013)\u00ab\u0014\u00f6\u00ac\u00b6\u0006\u00ccb\u00aaKH\u00b9X^&]?#\u00ca\u00ae,\u00ca\u00fb\u00e1z\u0082\u00d5\u00f7;\u00e0\u00c7\u00e9`\u00f6\u008d}\u00ca-[UL\u0005\u0019\u0015[.\\cS\u00dbR\u00e0\u0012\u0088Ej\u00cc\u008f\u00b2\u00de\u00c6'\u00e1\u0099\u001fJ\u00e6B8\u001fl\u00c6D\u00ce\u00a9[\u00be\u000f\u00b2\u00bfl\u00a5\u00ed\u000f#\u001a,\u00d1o\u0086\u00db\u00c5\u001b\u00e5~j\u001d\u00cc\u00c3\u00cd\u00ba.\u00d6\u0080\u00d9\u008b(yb\u00c1\u00d2\u00a8\u00a6\\B\u00aeTLHZmL\u00c2\u009c=\u0015\u008e\u008a\u00c1V\u00c7\u0088\u0081\u0092z\u00cfN\u00d4\u0093-\u00b6)tg^}A~\u00a7I\u0092oNX0UJ\u0012\u009a#f\u001bZ#B\u00cad\u0002J\u00f4>[T\u00b8\u00ea`\u001ey;q\u009d\u00d7\u00c3\u00f6)8\u0015k=\u00f9\u009a\u0003\u00f9\u0094\u0083\u00d5\u00aa\u00c5\u0094\u00c2\u00d1\u00b1\u00b0Q*\u009e\u008a3b\u0090\u00a3\u000b-\u000b&'\u00c2!\u0088\u0086\u00e2iQ\u00f8\u008c\u00f6\u00c9\u00da\u0000\u00f7W\u0087%\u00fb\u00d8\u000f\u007f\u0016\u00f6\u00c8\u00f3\u00e9E\u0005\u008f\u00e5x2\u00e1t\u00b2\u00f3W\u00ff\u00e5\u00a0\u00d7p\u00fc\u008b\u00fe58&\u00e8r\u009c\u00b6\u00e0|\u00ef\b\u00ceX\u00f1\u007f\u0001\u001dL3\u00cf\u00bb\u00c3\u00adY\u00f6z\u001e.=;o\u00bc\u00c3\u00f7\u00ef~\u0007\u0000\u0000\u00ff\u00ff\u0019\u00f8}\u00834\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0x85E4DAd18c28d6e42aA36Ee221292061D755931f\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "121"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "64"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b222\u00d2Q*J-.\u00cd)Q\u00b2R2\u00a8P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ffm\u00bfr\u0098(\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0x60b206dFD4af82FaFdbA5Af3C619D0c48129b3a1\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "121"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Vary": [
                        "Origin"
                    ],
                    "Content-Length": [
                        "64"
                    ],
                    "Date": [],
                    "Content-Encoding": [
                        "gzip"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b222\u00d6Q*J-.\u00cd)Q\u00b2R2\u00a8P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff.t\u00d4\u001f(\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"blocks\", \"variables\": {\"token_id\": \"0xcf664087a5bb0237a0bad6742852ec6c8d69a27a\"}, \"query\": \"query blocks($token_id: ID!) {\\n        t29387825:\\n            token(id: $token_id, block: {number: 29387825}) {\\n              __typename\\n              derivedETH\\n            }\\n        b29387825:\\n            bundle(id: \\\"1\\\", block: {number: 29387825}) {\\n              ethPrice\\n              __typename\\n            }\\n        }\"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "449"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "Content-Length": [
                        "148"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "Date": [],
                    "graph-attestable": [
                        "true"
                    ],
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"b29387825\":{\"__typename\":\"Bundle\",\"ethPrice\":\"0.2193937228982400273770436531868526\"},\"t29387825\":{\"__typename\":\"Token\",\"derivedETH\":\"1\"}}}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"blocks\", \"variables\": {\"token_id\": \"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\"}, \"query\": \"query blocks($token_id: ID!) {\\n        t29387825:\\n            token(id: $token_id, block: {number: 29387825}) {\\n              __typename\\n              derivedETH\\n            }\\n        b29387825:\\n            bundle(id: \\\"1\\\", block: {number: 29387825}) {\\n              ethPrice\\n              __typename\\n            }\\n        }\"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "449"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Content-Type": [
                        "application/json"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "Content-Length": [
                        "184"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "Date": [],
                    "graph-attestable": [
                        "true"
                    ],
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"b29387825\":{\"__typename\":\"Bundle\",\"ethPrice\":\"0.2193937228982400273770436531868526\"},\"t29387825\":{\"__typename\":\"Token\",\"derivedETH\":\"0.09756155833171828459348849194961854\"}}}"
                }
            }
        }
    ]
}
