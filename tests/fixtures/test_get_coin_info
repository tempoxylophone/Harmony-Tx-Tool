{
    "version": 1,
    "interactions": [
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "74"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b445\u00d7Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u0086~\u00e2\u00802\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x95d89b41\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "87"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b44\u00b5\u00d0Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00d4\u00d4\u00cc\u00c4\u00d2\u00d4\u00c0\u00c4\u00d4\u0094L\u00a3\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u00b6{\u00a6\u00b2\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "74"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b44\u00b5\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u0097\u00812\u00c72\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x313ce567\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "71"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b443\u00d0Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018\u001a)\u00d5r\u0001\u0002\u0000\u0000\u00ff\u00ff2\u0087\u0019mj\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "74"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b443\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00d8\u00ffn\u00192\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"data\": \"0x06fdde03\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "87"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b443\u00d2Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00d4\u00d4\u00cc\u00cc\u00d2\u00dc\u00c0\u00cc\u00d4\u009cL\u00a3\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u00dbjj\u00e1\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"coininfo\", \"variables\": {\"token_address\": \"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\"}, \"query\": \"\\n        query coininfo($token_address: ID!)  {\\n            pair(id: $token_address) {\\n                id\\n                __typename\\n                token0 {\\n                  id\\n                  __typename\\n                  symbol\\n                  name\\n                  decimals\\n                  totalSupply\\n                  tradeVolumeUSD\\n                  txCount\\n                  totalLiquidity\\n                  derivedETH\\n                }\\n                token1 {\\n                  id\\n                  __typename\\n                  symbol\\n                  name\\n                  decimals\\n                  totalSupply\\n                  tradeVolumeUSD\\n                  txCount\\n                  totalLiquidity\\n                  derivedETH\\n                }\\n            }\\n            token(id: $token_address) {\\n                id\\n                __typename\\n                symbol\\n                name\\n                decimals\\n                totalSupply\\n                tradeVolumeUSD\\n                txCount\\n                totalLiquidity\\n                derivedETH\\n            }\\n        }\\n        \"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "1276"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "graph-attestable": [
                        "true"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "349"
                    ],
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"pair\":null,\"token\":{\"__typename\":\"Token\",\"decimals\":\"18\",\"derivedETH\":\"0.008179309284183089416493922958778827\",\"id\":\"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\",\"name\":\"Viper\",\"symbol\":\"VIPER\",\"totalLiquidity\":\"113456065.343911857832683433\",\"totalSupply\":\"8504\",\"tradeVolumeUSD\":\"367812145.1512488000738507610385159\",\"txCount\":\"3945108\"}}}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionByHash\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "455"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00fft\u0090An\u001b1\fE\u00f7=\u0086\u00d6\u0083B\u00a4$\u008a\u00f2\t\u00daM\u00d1+\u0090\u0014\u00d9\u00b8\u008d\u00ed`l\u0017\u0001\u0082\u00dc\u00bd\u0018O\u00d0]\u00b8\"?\u00f0?\u00f8\u00df[\u00fa}\u00bd\u009c\u00d7\u0017K\u0087\u0084_sZ\u00d2q\u00a6\u0003\f*KZ\u00fdz\u007f\u00be\u00a5\u00c3[\u00d2\u00e7\u008b\u00fd\u00f9&\u00d7\u00a7tH\u00f9\u00b5\u0083\u0087v\u00d6\u0096\u0089[\u0003\u0084\u008c=J\u00e6\u00ce9\u00862\u00068X3F\u00af\u00a4\u00bd\u00d5<:\u00c4\u0090\u00e0n4[\u00a1\u00b4\u00ec\u0081?\u00ee'\u00f5\u00f5\u0011\t\u0096\u00c9\n\u00a4%\u00c5z9=$\u00ca\u008a\u0099f\u00cc*\u00c1\u0018\u0012S\u00a5I\u0014#\u00183[e\u00c0\u00a1E6\u00cf/\u00b9\u00ee)\u0085\u00dc\u00f6\u00fb\u00e7z4\u00df\u00c5^\u00b9\u0093s\u00de\u00ca=\u00fd\u00ef\u0010\u00b3\u0094\u0086\u00cd\u0006a\u00e3A%,4\u00abJ\u00af2%\u0007jC\u00adyf\u0090^\u00c9\u00c7\u0004\u00aes\n\u00d1\f\u00d2\u0086\u00b1\u0081:\u00bf\u00dco\u008f0\u0019\u00b9\rS\u00cd\u009f\f7\u00afS&\u00b0!O\u00f2\u008a\"\u0085\u00dc\u0011\u0001\u0007f\u0082\u00d9[\u001b\u0005\u00e23\u00ffgS\u001b\u0095\u0001\u008c\u00b5F\u00dd\u00ee\u00b4\u00a4\u00f3\u00e5\u00fc\u00d1\u009b9-i\u00fd@\u00d9\u0003\u00d4\u0099' 2\u00abt@3\u000b\u00d3(mV\u00a7\u0098\\,\u00f3\u00f0Y\u00a0\u009b\u0014\u00d32\u00f2\u00c8>p\u00baAOK\u00da\u0001\u0097p\u0083f:X\u00a96\u00c0\u00e0\u0091;\u00b7!\u00cc\u00dd\u001cj\u00d7\u001a\u00a5W\u00f5Y\u00ac`\u00d1L\u00d0\u00d4\tr\u000e\u00d6F\u00dbG\u00b7\u00e3\u00c9\u00af79\u00bd\u00ec\u009f\u00a1W`\u00dap\u00de.\u000f\u00c5\u00a5\u00f1\u00f0Q\"\u0080\u0015\u0004\u0002|\u00a8X\u00f7(\u00ce$J(sZ\u001f\u009bc\u0095\u00f3U\u00ecv\u00bc\u009c\u00bf\u009f\u00a7\u00bf\u00ee\u0089iI\u007f\u001f\u009b\u0091\u00d8`)\u009b \u00cf\u00f7\u009dJN\u00ef\u00ef_\u00fe\u0005\u0000\u0000\u00ff\u00ffD\b^\u00fb\u00f5\u0002\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x1c06c31\", false]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "96"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "1160"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0094\u0094\u00bd\u008e$\u00b9\r\u00c7s?F\u00c5\r\u0083\u00e2\u0097\u00c8\r\r\u0007\u000e\u001c\u0018\u0006.:\\@Q\u00d4m\u001b;\u00d3\u008b\u00e9^c\u00ec\u00c3\u00bd\u00bbQ]=s\u00b3\u009bYhT\u00ab(\u00e9\u00cf\u001f)\u00b2~\u00db\u00feu\u00bd<\u00bf|\u00cd\u00ed\u00d3\u0086\u007f\u0086\u00ed\u00b4\u009d\u00e7\u00f6\u00a9\u00b9\u00f2i{\u00a9\u00eb\u00b7/\u00b7\u00ed\u00d3o\u00db\u00f3\u00b7\u00a7Q/\u00db\u00a7\r^[\u0082&\u00b5\u00ed\u00b4}\u008e\u00eb\u00e7\u00bb\u00a9\u00b7Z\u00a3\u00db\u0010P\u0013i\u00d8\u0000\u00fb\"\u00b0n\u00b0|\u0018\u00aeV-%\r\u008buta\u00f0\u00de\u0096\u00c7\u00b2\u009e:\u0085t;m_\u00e3\u00a5\u009eo\u007f{Sd\u008d9\u00b0\u0085\u00a5v\u00d1\u00f0\u00e8\u0011\u001e\u00b3\u00a7\u00d3\u00c45\u0015\u00a3i\u000e'i\u00a4\u00d4\u00ad/\u009e\u00040s\u0085e\u00d0\u00a4\u00ed\u00b4=_\u009e\u00b3\u00eeb\u00f0\u00c3\u00d8N\u00db\u00d3\u00f9\u00f5\u00dd\u00d7\u008f\u00cb\u00ff\u00ef\u00d8N\u00db\u00f5s\u00d0O\u00cf\u00f9\u00a5\u00aeG\u008af&\u00cf\u00b2Y\u00d9e\u00f6\u0088a2D\u00fb\u00d0\u00cc\u00c9-&5di\u00c3\u00d9\u00a2s\u00a3\u0005\u00d1\u0018\u00d7d\u0098\u00ec\u00c4};m_.\u00bf^\u00ff\u00f2\u00e5ryz \"\u0000\u00d8G\u00af\u00a1\u0000-\u00f6\u0019\u0002\u00df-\u008d\u001fK\u00ed\u00f1g\u0000\u00fc\u00983\u00c2\u00a1q\u0017a\u00003\u00d0\u00c3\u00d6\u00eef \u0080\u00c7\u0096\u00e3\u0088\u00ed?\u0003\u00dcM\u00ed]\u0088w\u00db\u00fe\u0004\u00f0c\u0003\u00b4]\u00db\u0080\u0081\u00bf\u00c3Ch\u00ef\u00de\u0001\u00f0\u00ce\u008e\u0083\u001eh\u00f8\u0000\u00c5\u001d\u0005\u00df6\u00bd?\u00de@t\u000f\u00d0\u00c8\u00ee\u00d1\u00e0\u00b1\u0094\u00d0>:\u00a2\u008f/x\u00c4g;\u001c\u001c@\u00a6\u001fT\u001b\u00bc\u00a7q\u009f\u00ee\u00de\u001f+v\u008f\u00f7\u0000n\u00d8\u00da\u00db\u00f17I\u00d4\u009d\u00e0\u00bb\u001bx\u007f\u00e1\u00b7l\u00b5?\u00bcX\u00bced\u00bf\u001e{c\u00b6\u00f7S\u00fe\u00e3\u0085\u00e2\u00076yw\u007f\u008c\u00bd\u00c4nq\u00ab\u007f^.\u00b7G\u00c7y\u0087\u00d4l\u009e`]\u00b59\u0082\u00a2\u00e2\u00b0VC\u00b2-2\u0094\u0088F\u00c5$\u00d2\u00adHVB\u00a49v\u00a2U\u00f7\u0016x~tt\u00f5`\u0084\u00e9\u00a3\u0019T\u00ac\u0001>C\b9k\u00e5b\u009d&\u008e\\h\u00dbi\u009b\u00e7\u00b5\u00ce\u00f9\u00ed\u00cb\u00ed?G]n\u00a7\u00ad^o/\u00f1\u00d7\u00b8\u00c5\u00dd\u00b2\u0093\u009e\u00ff{\u00f4]\u00a3\u00e0\u00ed\u00b4\u00fd\u001a\u00d7\u00bf\u009f\u009f\u00ce\u00078'\u000f\u00be\u0007\u00f4k\\\u007f\u00ba\u00d6<\u00c2\u0001)\u00df\u00f7\u00fe\u00fbe\u001dG\u00873\u00d5\u00de#\u00a5\u00de\u0091hfv`\u00e9\u009a\u00d3\n;\u00b2\u001a\u0086\u008865\u00a5\u00f21M\u009a\u0083\u001b\u00f0h\u00aetH\u00fd\u00e3\u00e5r9\u00f4\u00c6\u00deY\u009c#\u0099;\u009b\u00f3\\\u000bz\u00ba\u00c8B\u00acX\b\u00e0\u001d5},\u00ad\u00a9k\u0095\u00f41\n\u0085\u0016\u00cf\u00a8\u00d1\u00d5S\u0082\u00cb\u0086W\u00a1,\u001d\u0085\u00d4}\u00edE\u00e9\u00ae\u00adA\u00f2\u00c05\u000b\u00b0\u00c8f\u0013\u00a96\u00b9|\u0095#\u008d\u00d5\u0010\u00d2\u00baE\u0086\u00ac\u00c1V\u00d4;\u00ca\u00c4A\u008e\u00d0M\u00fb\u00d2R^\u00c6\u0019\u00ee\u0019s\u00c1\u001am\u008d>K\u00c9\u00123a\u008f\u00e7v~\u00aa\u00eb-\u009e\u00be\u00de\u0003R,n\u00a6k_x\u0089\u00e7k\u00e4\u00ed|y\u00be\u00be\u0017H\u0089\u00d4\u0094\u0086\u00a8\u00842\u0003\u001c{b\u00ce2IL\u001eb\u00cb]\u00c2\\\u0099\u00d6\u00ee\u00bf\u0012\u008c\t\u0091F\u008a8\u00ee\u009f\u00a0\u0097\u00ca:\u007f\u00bd\u00fd\u00a1\u0099\u00d4e\ra\u00c9\u00a25\u00d1\n\u0006!4c\"\u0013\u009a{t\u00e5\u0093K\u0098hT\u00a9y\u0096\u008en\u00de\u00e7h<d;m\u00df\u001e\u001f\u00c9\u009f\u007f\u00f9\u009e{\u00fb\u00f4\u00f3\u0006\u00afH(\u0005\u0080\u0094\u008d9bx6ma\u00cb\u00b51&I\n5\u009d\u00c49\u00d4a\u00b1\u0099\u00ed\u0085O\u00ce\u00c9\u00cc4c;m\u00f0\u00ba,<V\u00cc\u00fd\u00ea\u001c&EO\u00e2\fq.&HR\u009c\u00b3\u0001\u00ea,4\u00ed\u00da:*\u008b@\u00ed\u00ddQ\fv\u0017ib\u00be\u00c8A\u0018\u008d\u00076\u00e4\u0098D\u00de\u0001U2\u00c5{\u0087\u0088\\\u00ad/\"2\r\u0099\u008e\ne63m\u00d08H\u00fa\u00c25\u00c5\u00da\u00ec\u00c3xg\u009e\u00e2\u00e4}\u00e0l\u001d\f\u0087\u00a3Q\u0090wQ\u009dL\u0083\u001b\u008e\u00c5$\u0004\u00c3\u0087\u00ca!BJ\u0013\u0086\u0084\u0094v2\u00ec\u00dc\u001c5\u00b4|\u0081,\u00ac5y\u00a8\u00c6^\u00c4s\u0089\u00af\u00e6\u00d3\u0091\u00d4\u00db\u0092\u00d1]\u00f9\u00c8\t\u00f9\u00e0.\u0085PS\u00cb\u0006u\"\u0081\u0004[\u000e\u00d6d\u00d4\f\u00c1\u0001lS\u001a-,\u00f4\u0001c\u008e\u00e5\u00e0\u001c\u0015x\u0090\u00f45\u0089\u0004%]Q\u00cc\u0095V\u00ae\u0001cD\u00e7\u0098\u0001\u000b\u0087\u00e0`\u0098\u00d0\u00a2\u00b3\u0096\u00cff<g\u00a8\u00ce\u00a5Cp\u00ddE8x\u00cc\u00bdEcD\u008bT\u0095^kH\u0086\u0011At\u00e6\u00b44)\u009d\u0084\u00d6U&\u00c5j{\u00cb\u00f2\u009ccE\u00c6\u00f6\u00cb\u00ef\u00bf\u00ff\u00e9\u007f\u0001\u0000\u0000\u00ff\u00ff\u0092?N\u00c4\u00b4\b\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Transfer-Encoding": [
                        "chunked"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00e4|\u00e9\u008e\u00ec\u00bcq\u00f6\u00ff\u00ef2\u00ceo\u00e3C-\u00ac\"\u00e9\u00bb\u00e1\n$\b\u0092\u00c0N\u0080\u0000A\u00ee=(\u0092\u00ea\u0096\u00ba\u00a7O\u00af3o\u00e0w\u00ecc\u00b7(\u0089K\u00ed\u00f5\u0014\u00a9\u00ff\u00fe\u00f5\u00cf\u007f\u00ff\u00b7\u007f\u00fd\u00db\u00bf\u0097_\u007f\u00fdE\u00ff\u001f~\u00fd\u00e5\u00d7?\u00d5_\u007f\u00c5\u00a8\u00f2\u0097_\u007fk\u007f\u00ff\u00cf\u007f\u00f9\u008f_\u007f\u00fd\u0005\u00ff\u00a5\u0010@\u00c1\u0081\u0010\u00bb\u0000(\u008a\u0000\b\u00e2\u0015\u0000\u0002\u00f4*Y@\u0001\u001c+\u0082\"0\u00ad{,\n\r\u00b0\u0004P\u00f6\u00ad\u00b4\u00dc\u0000\u0010\u0015\u0001\u0093\u0017o\u00ad\u0085\u00830\u0017\u001d\u00ad\u00d0\u00dalm\u009a\u00a9g\u0097fk\\\u00cfv\u00ea\u00b5q\u00c8\u00b3\u00d5\u00e3E\u00abS\u0084\u0094\u00ddj\r\u0092\u0083Kn\u00b6\u00b6\u00ad\u0087\u00ca\u0095|\u000e\u00ab\u00b5\u008b_\u00b3U\u00c9\u0087q\u00c7}'k6>1\u00b9ZVk]}!\u0092ou\u00f5%r\u00d9W\u00e9X\u0018u\u00ad\u00a1\u0084\u00b5\u00de\u00ad\u00d5\u00de\u008aq\u00ad\u00b7V\u00a5V\u00b9\u00cd\u00d6\u00baV\u00d6\\\u0091\u00de\u009d\u00ce\u0011\u00a0\\\u008d\u00b0\u00d1n\u00bcE\u00b2Q\u00b4\u00d4$\u0004\u00b3\u00d5\u00d1jMR|\u008e\u00b8\u00c6\u00d5\u00cb\u00be\u0012'\u00df|\u00e7\u00c9\u001d\u0081\u00f9V\u008a \u00b1\u00e4Iq\u00a4t\u00d1j}\u0085\u00a0\u00b35\u00bb,-\u0089\u009f\u00ad\u00b9\u00af\u00d6\u0088\u0001\u0015\u00e7\u00b8\u00a1\u00d3\u00cdq\u00c7}\\\u00b3MN|\u00a1\u00ba\u00fa\u00da\u00f8\u00904\u00d6\u00ee\u00b2\u00ccV\u00df.\u00fb\n-xi8)\u008eaQ\u00f1\u00d4jo\u00f9\u00be\u00d6\u0010YB\u00a4%5\u0001\u00d6\u00b8Qj\u0088\u00d9\u00ad\u00d9B\u00ba\u001c\u00e1$\u00c3\u00a3\u00afP\u00d6\b1QP?\u00e5\u00c3o+\u000f5I\u00c9\u0092\u00d7\u00b8W+w\u00c0N\u008b\u008bc\u00b6\u00a4y\u00be%\u0005c\u008aRf+.i\u00f6\u0090 \u0010\u00e3\\\u00d9\u00a6%\u00a7\u00d61\u0002.\t\u00f3(\u0080!M\u00a9\u00f0n\u00f5\u00eb\u0003U\u00edm=+|9\u009b\u00d3\u00b8v_\u00e3\u00a2\u009dj/\u00c4~\u00aeA\u00cb\u009a\u008d\u00f6\u00d2{w\u00b2Z\u00af\u00e4\u00d2eh\rh\u00f2\u00816\u00ee\u009dZ\u00ed-)\u008bJ\u0012|\u00a9\r\u00a7\u00e4\u00eb\u00c6\u0007IN+/N\u00ab\\q\u00faD\u00bb\u00d1\u0097[\u0012\u00e8\u00a0 t\\\u00ad\u00ca\u00ab5H\u00f55NK \u00f1j\u00b6\u00c49x\u00aau\u00ce\u00b6,\u00edf\u0011\u00f2\u00ae\u00ad5l\u00d6\u00ea\u00d4j}\u00b9\u00be=\u001b\u0005\"\u00cb\u00a4\u00ad\u00c0Z/'L\u00a9\u00f1\\\u0083\u00f0\u00d5\u001aN\u00e3\u008e\u00be\u00b6\u00d9R\u00a0\u00ca\u00bd\u00f6\u00d9\u009a\u00d6\u00ca\u0018\u00b94\u00d1\u00a9\u000f\u00ae^\u00d9-\u00d31\u00a8\u00db\u001a\u00fa\u0092\u008fS\u00ebx\u000bV+\u0001e\u00f4:e\u00d8Q\u00d8Z\u00154\u00fb\u00d5*\u00f9r\u0004\u00d0^k\u0083\u00a9\u00a7\u00bc\u00d9\u001a\u0088\u00d2\u0092\u00cf\u00ab5-\u00eeA\u00c9\u0014\u00a4\u00d1l5++\u00f9\u00ec)\u00c6\u00fb\u00d5,Z\u00f7\u00d6\u00bb\u00f9\u0095\u0000\u0082\n\u0004\u0001\u0002\t\u0005\u0016\f\u0018\u0018p\u00fe\u008e\u0018)p\u00a4\b\u00d6\u00161\b`\u00b4g9\u00b0\u00f5+9p@\u009c~\u0089\u00d5x\u0085\u00c1.1p \u00eb\u00c5\u00fa\u0006\u00a3\r\u00bbnc\n\u00cc\u00ff\u00c4\u00f1\u00cf\u009e\u008d\u00a0\u0080\u001duy7\u008eC\u00d6\u0003\u0001\u00cf\u00b9\u0001\u00daX\u0004`.\u000e\u0001 \u0001cD\r\u00a7\u00de\u00a3Y\u00cd,f\u0088G\u00df\u00c3_b\u0080h\u00bdA\u00e7\u00b9\u00f2j\u0094p\u0001X\u00ed\u00bf\u000e\u00ce\u00f3\u00ce\u00e1\u00e8O=\u00f7\u0007\u00ff\u0002\u00b2\u00a0\u00da\nl\u001el\u00bd\u00e5\u0094\u00f7\u00b4\u008d\u0088\u0082b\u00b4\u0015\u00a3\u001cF[\u00c7\u009c\u00f563\u0007e?3:\u00cf\u00cc\u0099D\u00efg6G(\u00d1F0\u00ea\u00db3\u00a8\u008aP\u0010\u008f\u00a3\u00fe~D\u00d4[#\u000em9\u008c\u00f885\u00d6L\u00a6lm3\u00abkfW\u001c\u00d0\u00dd\u00a8>\u00be\u00c3\u0081\u0080\u00a8qJ1\u001a\u0017\"\u0098i\u008fC\u000e\u0016W*\u00cb6\u00ab#\u00b5wr\u00e0r\u00f9\u00a0\u001c\u00d4\u00aa\u00db\u0088\u00cd+\"D<\u00ea\\\u00ef\u0011\"\u00a1\u00de\u00e5\u0094\u00bd\u009b\u00be\u00a6\u00e1n\u00f6\u0082\u00f9s\u00b3\u00b7\u00a0g\u00cfE\u0084\u009e\u00bf\u00a6\u00dfNvD\u00ca\u00b5\u00b4\u00ce\u009bw(/\u00ef\u00f1\u00ffb\u00ee\u00e8\u00e2\u00fd\u00b9fzO\u00ce\u0091\u0018w\u0014\u00ba1J\u00bb\u00d2\u00df'G1\u001f:GQ\u008b\u00e8\u00bf\u001cE1\u00bc;J\u00a0\u00bdl>\u00fe\u00f6\u0083\u0012|c\u00de\u00de\u00bd;\u00efT\u00efrZ-\u0082xo\u0094*\u0007]\u00e0F\u001bOz\u00bf5j{W\u00be\u00b8\u0085\u0083\u00bd\u00e0\u008f\u00d0\u00dc\u00d3\u009b\u00f6\u001d\u001d\u00c0\u008e\u00e6\u0088\u0016\u00c7|\u00a9\u0007;\u00fd\u00f6\u00faI\u00fd\u0016\u00e7\u00eej\u009eO\u00ef\u00d2?@\u00bb?J}W\u00bf\u0003\u00c1N\u00bf\u0011\u0083\u000b\u0007Y\u000b\u001a/\u00ae\u00fb\u00e6\t,\u0092C\u00cb\u00c5\u00eei@\u00a0w\u00edC\u00e8\u00f5\u00ae\u00ff\t\u00f2I\u00ff\u0093\u00a8\u001c\u00a4,\u00a5\u001bQ\u00c4~\u0006\u00f1\u0083\u00fe\u001bs\u00ccw\u00f9\u001f\u00de\u00e6\u007fN\u00fd\u00ebu\u00edF\u0089\u00f0.\u00ff\u008a\u00bb\u00ef\u00bd#\u00e7/\u00bcwQ\u00f8\u00fa\u00cd\u00b2{S>\u0012?o\u00b1\u00db\u00e4\u00e9\u00f6\u00db,\u00acZ6pz2\u00ec\u00ee\u00a6\u008d[%\u001d\u00f5\u00a67\u007f\u007f\u00c5\u00f9]\u00ff\u00d3\u00fb\u008d\u0018`'\u0095\u00b1\u00f9\u00cf\u00c4\u00b6\u0093\u0002\u008a\u0004-\u00dc\u008d\u00a8\u0012\u00d1\u00e7t\u0081\u0090\u000e\u00d1 \u0011\u00f4\u00e35n\u001e2EwkFz!_\u00e1Iz\u00eff\u00c4{.\u0010q\u00bc\u00e9)\u00195\u00f0\u00cc\u0013g\u0006k\u00b9\u0081\u00d0\u0096#\u0099\u00ef|(\u0013K%\u00bd'+D\u00aa\u0007\u009a9\u00a4\u008b\u00eb\u00e5\u00efG\u00de\u00eb\u00f6\u00b9\u00b9\u00e5\u00c7\n@\u00fe\u00d1\u0001o\u00fe\u00cd\fz\u00e4\u00d4\u0001\u0015\u0005\u00c8V\u001f\u008d\u00df.Bt\u00e0\"\u0007\u00078\u00a2\n\u0017\u0010\u00c84of\u00e9\u0091\u0084\u0002\u00cd\u00ac[!\u00b2\u00b5\u00185\u008d\u00ae\u00c1\u00eeLJ\u00e54\u0011,\u00cb\u00e9\u00c1\u00ae\u00fdD<\u0011\u0006n \u000e\u001c\u0090\u00f1d\u0093\u00ea\u0088\u00eb-\u0095l\u00a3\u00c5\u0081\b\u0000L\u00ae\u00d9/\u0082\b\u0092\u0003\u008a\u00b3\u00d1\u00c7\u00dd\u0085\u001b\u00d8\u00fb\u00d6\u00eb@_rp\u00e2'O\u0017\u00a20z;c\u000e\u001b\u00ea\u00b0\u00e8<f\u0097\u00fb\u00f8\u00df`\u001c\u00a0\u00e1K\u0083\u000b\u00ce\u00ae\u0098&^a\u00a3I\u008e4P\u0086\u00f1.\u000f\u00ec\u00c3b/\u009b#\u00a8\u00cd\u00c3~9\u0088\u00f6\u00cb\u0099\u00d5B\r\u00d6\u007f1A\u0011`\u00b6QZ>{\u00f8g\u00a4\u0007\u00dd\u0090\u0093\u0002\u0007\u00ff\u00a60\u00b0\u00ef\u00b9\u0016\u0012\u00b7[\u0017@\u0014\u00e7x\u00c9n\u00a1lsX+\u00aeP\u00d6si>cO(\u00d8\u0013\u00cf\u00d8\u0088a\u00ef\u00ce4\u00a8W48\u008d\u00f4D\u00aft\u00d1k;\u00f7\u001ap\u00f5ZL>\u001cGP$\u00cb\u001b\u009f\u001b\u00c1\u00dd\u001da\u00d0%Rd\u0093\u0094!\u009b\u00a5\u0004\u00fb\u00ff\u0017F\u0093{T\u001a\u00d6hr\u00c5G0\u00d9\u001d\u00bf-\u00ae7\u00bb+}\u00f0t\u00acU-@49\\\u00b2\u009c\u008d\u000eS\u001e}\u000f%\u00d5(\u001a|N\u0081\n\u0095&\u00d0\u00bc\u00eb>{q\u00ea\u00a4\t\u00a2/\u009c$\u00b7\u0012P\u00b0\u0080'\u00ad\u00e6\u00b6c\u0080\u0014T\u0003\u00eet\u00a2:2\u001d\u0018Z\u00a0m\u008b\u00b5k)ap\u00d5\u00b5\u00b3\u00ae\u008cv\u001fdC\u00dcth\u00cb\u00acW\u00d9\u0015\u0085\u00b0\u00c3\u0000\u0099\u00aa\u00d1;D\u00e4\u00f8\u0004\u0015\u00d3\u0005\u0015\u00f1\u00c8\u00b3I\u00b3\u0018\u00cf\u00b3zF\u00b7\u00b6\u00f9\r\u001b\u00b7\u00bc\u00c3\u00c4\u008d\u00a6\u00e5\u00117\u00ec\u0011\u0092g\u009e+>Z\u0086\u00c8'\u008e,z\u00d4\u00f6\u00daL\u00ec\u00dd^^\u00b5\u0010\u008a\u00d0F]f\u00cb\u00e1;\u0084\u00c2>&x\u00f5o\u00a3\u00cc\u00f0\u00884}\u00c2hq\u0013\u00d9\u00f5\u00ddu\u00ef\u00b5)*iQ\u00e1D\u00a0\u00ac\u00a8\u00c5\u00ae<\u0011h\u00f4L\u00a0M\u00bbw\u0004\u00deiP!\u00d0\u00f9\u0096x\u00a3\u00f3\u00ea+\u00c2>\u0097U7|r}\u00dav t\u0080\u00ef\u00a4\u0081]\u0099/\u00de\u00d1@\u0084\u001c31\u008c\u00f5\u0017\u00ed\u00ca\u009a\u00c7j\u00fby\u00cd>\u008d\u00f5v\u0002Eu\u00ea<\u00a9x\u00f6l\u00b6\u00fa\u001e\r\u00c6\u00aab\u00a0s\u00ee\u001d\u0010qX\u00f6\u00ee\u00fd\u00ff\u008d\u00d5*j\u00d5\u00eeE\u009bqZ\u00bb\u00d7%\u00014\u00e4\u0001\u00b5)\u00ab<\u00baZ\u008b&\u0018\u0002\u009f\u00ed\u00cf\u001b>\u00e4+\u00cf\u00d43\u0099\u00b55\u00ad~\u00ba\u007f\u00be\u00d3\u00bf(@\u0098\u00a349\u008e2\u00ee\u00c8\u00f4\u00ceo\u008c\u00d8.W4\u00fd\u00bc\u0005\u0092#>\u00f8l\u00efr\u008e\u00acg\u00f4\u0017\u009fB\b\u00cd\u00e3F\u00f4]Iz\u00ab1x\u00a9\u00a9\u00a6\u00a0\u008e\u00bb\u0085\u00bc9pH\rr\u00f1\u00a1\u00c6\u0084.$\f\u00ad5\u00d7\u001aF\u001f{\u0087\u00ce]\u00aa#\u001f\u00af\u00b0\u00aeD'\u00ab\u000b [\u00d4u\u008a\u0082\u00fc!\"Z\u0091\u001eB\u00aa\u00fbH\u00ef\u00ec\u00bf\u00a6\u00bd\u00b7'\u00f2K\u00f6\u00dbf7Q\u00b9UM\u00e3\u00e1\u001b \u00f2\u00a2%\u009a\u00dco\u0094&\u00bb.\u00d3\u00fbX\\\u00bdE\u0003\u0017\u00b2\u00b2V\u00f0x\u00bc\u0089\u00c8y\u008b7\u0011\u0089\u00df\u00897\u0011\u009d\u00bb\u00887\u00fd\u008a7\u00cd\u00fc\u00e0\u00ab^\u000eQ\u00fb\u00eb^\u000e\u00b1\u00e3?\u009a\u0097\u001b\u00ab\u00caf\u00f5\u0014)\u00c8\u0093t\u0019\u00f9\u00cfQ\u0087\u00fbu\u00dc\u008cDu\u00e0\u00c6fUc\u0088\u00a7Z\u00ec\u00e4'\u00f1\u008b\u00f1\u0093\u00bdk\u00f9\u00dd\u00cb\u00fc\u00a4\u001a\u00ff\u00d1\u00f8\u00f9\\\u001e\u00c5\u008cn\u00d8o\u00ea\u0087\u00fc\u00ee).\u00fc\u00c6>\u0004\u0010\u00f7.r`\u00e61\u00c2)\u00db\u001c\u00f6\u00b4\u0098ua\u0019\u0012\u00b5E&odb_\u00e4F\u00af\u00f8\u00e7i\u0087oi\u00c3\u00f2\u0097\u00cbK\u00bcL\u00e1/\u00e6\u00ba\u00f4\u0088kg\u001ez\u009c5-\u001d\u009b4\u008b\u0003\u00bd\u0018\u00bf\u00f1\u0094\u00c1\u009c\u00fb<\u00d9\u00f2\u001d\u00b65\u009f\u007fu\u0096\u0004\u009b\u00ec_\u00cd\u00d21\u00bc\u00ac\u00ed\u00ce\u00f2\u00bf\u0097\u00b5\u00dd\u00d5o\u008d\u00cf\u00ff\u0010\u00eb\u00bd\u00a2\u000f7w\u00abL\u00cc\u0000\u008d\u000f\u00f0D\u001cf2\u00e9{\u00c8\r\u00c0\u00c7\"\u008c*\u0011\u001d\u00b2s\u00a5b\u00af\u0090\\\u00a7\u00e00\u00ba\u00e8{\u00f4D\u0089kJ\u00bdqv\u0018\u00b4kV'\u00be\u0019\u00ef9B\u00b2xA~\u00a7\u00f7\u008f\u00d2wET'\u00bdw\u001c\b-\u00ce\u0090\u00b8r\u00cd\u00cfq\u0011\u00dc\u00c0\u00f26T\u008f\u0002\u0002\u00cfx\u008a\u00e9\u008c\"X\u0094\u00c3H\u00d5Z#r\u009c\u00b9\u00fa\u00c4\u00e6.\u00f6\u00fd<g\u0089/|(\u00e2U\u0094\u00b5\u00d7\u00ccA\u0083\u00ba\u00aa\u009ak\u00f4a\u0013\u00df\u00b3\u0082c#\u00de\u00ce&\u0098o7\u0089\u00dd\u009e\u007f\u001f\u0001\u000ejZ\u0082\u001ad\u008b<#N\u009b\u0018\u0006\u0016\u0088j\u009c\u00fd\u00f4\n\u00de\u009f\u00f7\u00c2\u00a7\u00f1\u00c0\u0005\u00b65\u0098\u00c6\u00d3\u00c2\u0084\u0087\u008d\u00fbFN\u0004\u000e0i\u00b6\u00c5\u00ec\u00c7\u00f9\u00acLl\u0098\u008e\u00af$\u00c3\u00da>\u00c0C\u00b3G9\u001ciq\u00b8\u009a\u00f8\u0000\u00faU\u00b5 \u008b-\u0081\u00f7O\ft\u00df<\u00b7g5\u008d\u009a\u0015\u009c\u00a70`\u00ff\u009c\u00ec\u0006\b\u00ba\u00e4\u000e&\u00e7\u00cc\u0096\u009a\u0097\u0012\\\u00f9\u00d2\u00ac1L\\\u0094M\u00cb\u00a6\u00fe\u008f;<\u00b8\u008b{\u009c.B\u00f0+v\u00f2iTb\u00cdB\bF\u00b7\u00d1<\u00f2\t\u00fb\u001f\u00bb)\u00e5H3\u00bf\u00d1)\u0017\u00f1\u0001\u00ed\u00e9A\u00b5\u008dW\u0096\u00b3M|/O>\u00a2\u009f\u0098\u00f6St\u0092\u00e7\u00e8dr~C\u00b6\u00874\u00ed+\u0011\nH\u00b7c\u0089\u00f7\u00e2\u0087k\u009c!\u00ee\u00b3\u00ed\u0017}\u00dc\u00b9\u00f6\u00b0\u00c7\u009c1\u00f8x\u00de\u00c5x\u00a8\u00d2\u00b8?o5\u00ec\"\u00ef\u00dfE\u009d\u00a6\u0019\u00c6\u0091\u00e7\u00ec\u00db\u001cg\u00e5\u0083\u0091yT5\u009eG\u00c0\u00beD\u00d8.\u00e5ya\u001f\u000b\u00ed2iZ:\u008b\u0007\u00cc*\u00c6\u00fc\u0002f\u00f5\u009b:\u00d1\u0086Y]\u00d0\u00ae}\u008ev\u00db\u00cc-[\u00fb\u00b6QN+\b\u00f8;*[\u00b47h\u00bc\u00a8;\u00b2}\u0099y\u00c8\u00c4\u001e1\u0091\u00dfc\u00c7\u00bb\u009a\u00ce\u001e\u0017K\u00fb\u00fc\u007f\u008f\u008b\u00dd\u00a8\u00eb\u00c8\u00a1\u00ae\u00c3\u00b3m\u00c6c'$-Y\u00a4\u00fd#HZ\u00bdB\u00d2\u000e5\u009b\u00dbz\u00b4!\u00c2\u0098\u00b1|;\u0092\u00ee~\u0083\u00a4\u00f3\u00c0\u00c8\u00b7,D\u00b4m\u00d8\u00fa\u00ad\u0011\u001e\u00caK\u008c\u000b\u00d9\u00a8p\u00de\u0097=\u00e3#\u00cc6\u00f2uE\u0001\u00b3\u001b\u00a7\u00a90\u00bb\u00c3\u00fdQi\u00b4\u00cc1\u000b00\u00ef\u00b1\u00f9G\u00a8\u00abi!\u00e1\u00ab\u0086\u00fa\u00d5;\u00bf\u00b1 m\u00faA\u00b7I{\u0098\u00bdF9\u00f6:\u00f1u\u00b9F}s\u00ba\u00ae\u00ef?_Y\u00c0\u00db\u0019\u00c2B\u00d9.3\u0084\u00bc\u00ed\u00fd\u0019{\u00b0\u00de\u00ac4\u00fcLn\u0080\u001a\u00dc>\u00c2\u00ddb\u000f\u00c9\u0017\u0095\u00ce\u001d\u00ce\u00f4\u0005\u008a\u0001g\u00fc\u00e2\t\u00f4\u00ba\u00c4tB\u00af\u00cb\u00b0Z\u00af\u00a3\u00d7%\u00f1\u0005z\u001d\u00cfy\u00ec\u00fb\u0015s\u001b\u00a1\u00f2\u00f9,\u00cd\u00d8Q\u00b4rW\u001aki&\u0099\u0085/v\u00fd\u00cf\u00936\u0080&\u00bbQ\u00cc\u009a\u008e\u00ab\u0093}\u00d3\u00c3>%\u009e\u00fb\u00dd\u00c0\u00a2\u0090\u00d3\u00de\u00a5\u0019/;\u00cbq\u00e3<mG\n\tf\u00e4\u00b1\u00f66\u008d7,\u00efj.\u00b0\u0099\b\u009f{\u0005\u00ae\"\u00cd\u00c5,\u00ce#S\u00e3Xz\u00af\u00b1\u0098AM\u00d5\u00e7X]\u0011\u0006\u00af\u0011\u001dIEI\u00b5\u008f\u009d~n\u00d8\u00ac\u00c7%7\u009b\u00e4\u00b6\u00f5\u00de\u008avlvi\u00a03h3\u009bk\u009a-\u0081\u00c6\u008a\u00e4\u00b0\"\u0004t\u00f3\u0019>\u00adI\u00e6\u009a0\u008es@/\u00ffY\u00df:z\u009b\u00e3(\u008dqh\u009b\u009dEovw\u00b6\u008c3Q\u0010\u00f4rv\u0089\u00c63fr\u0006O\"\u0006\u00bfqi\u00ee[\u008a\u00bb>\u000b\u008d\u00cc\u001b\u0082\nm(\u00d5\u00a2\u0014\u00026\u00b2w\u00c7\u0093\u0004\u00f3\u00c9\u008dVD\u00f3:\u00daud\u00c1HQ\u00c7\u00de\u0094\u00b1K\u00c5\u00e2\u00ce\u0091!\u008dg\u001d-Y\u00e1w\u00adA\u009brH\u009bg\u0099k7\u001eH\u00ea\te\u00c6\u00b7\u00d8$\u008b\u00e7:\u00f5\u008c\u00db\u00fc5w\u00c8mx\u00cc\u00fb3\u00199\u00dd\u00c8y\u009e\u00b4\u00d6\u0088m\u009c\u00fe\u00fc)\u009c\n/p*6k\u00c7\u00f8Q\u009c\u00ea\u00d2\u000b\u00d15\u00da?2\u009a\u0099\u00a5\u00a0H\u0018\u00a72\u00f1\u00b4W\u00e0'(A\u00f5\u0012\u00b1\u0093n\u00ad\u00f7)\u0011\u00bc\u00a3\u0015\u008b\u00f4\r+\u00feCxG\u00a1<\u00c6\u00bb1\u00d3\u00140\u00e4\u0003\u00ea\u00bfvi\u009d\u00f7\u001e\u00ee\u00e3\u0092\u0099\u00ef\u009eOUa\u00ef/\u00d7\u00df\b\u00f0\u008d\u00fa\u001bA\u00fc\u0013\u00d7\u00df~\u00a6rf\u00fa\u0088~\u00c3\u00d1\u009f\u00c8\u0084\u00f0*\u00d3\u00c5\u009b\u0091\u00b2\u009b9\u00d3\u0016%\u009c\u00f1\u009a\u00c7\u00e3/B9\u00c5_\u0084\u00ee\u00ad\u00f8\u008bP/\u00e3\u00af<,S\u00b1\f\u00da\u00ee\u00e7\u00fe\u0083\u00da\r\u0097\u00da-\u00a6\u00dd\u00f0\u0088v\u0013\u0096\u00f8\u00bd\u00b5y\u00c2\u009e/k\u00f3\u0093Rc\u00af}\u00b8\u00daETF\u0096\u0003\u00e7\u00e7\u0016\u00d2\u00f7v\u00b4w\u00aaP\u001er\r\u0080H\u0081O\u0012\u00e7\bN\u00f8\u00eb\u00ca\u00b87\u00af3\u00a3\u0084}&\u00b4\u009d\u00c5]'\f\u0091H_\u00de\u001fIf\u0093_\u00b7t\f\u007f\u00e6\u00fd\u0091#\u001e\"\u00f6\u00e9\u0007\u00a3\u0000\u00bd\u008c\u0002Z\u00b3\u00d6\u0007\u00b4nWS}J\u00db\u001cj\u00a436\u00fd\u00a9\u00aa\u00ea\u00d4\u00e0]]\u00f5\u00c9\u0013\u00b2\u00eb\u00cb\u000571\u00ebG)\u00be\u00f57\u00ad\u00fc\u00d9\u00a7L\u00ebz\u0085\u00a8/\u00a4\u00c4\u00d2\u0082=\u00ba\u00be\u00c7a\u009e\u00dd\t1\u00ec\u0019\u0092\u00fb\u00c9\u00fa/\u00b9\u00cb\u00b8\u00da\u00ac7\u00b9\u008f\u00c6\u00d5\u0083K$\u00f0\u0093\u00faqY\u00d7\u00a6\u0081\u0011~\u00b6\u00ae\r[e\u00f3\u0084$\u007f\u001dC\u00b8\u00e0G\u00c5\u00cd\tE7#\u00890m\u00bb\u0098\u0094\r\u00d4a\u00a0\u00be\u0011\u008d6\u00a1Hn\u00d8\u00a4\u00e5V|\u0095\\\u00d1u\u008f\u008e|\u00c5\u0016\\\u00e7Z\u0081\u00d1\u0015\u00e8>\u00db\u0082\u009ad\u0002H%\u0014_8G\u0092Y\u00fd;\u00e7\u0095\u0089\u008f1\u00b2y\u00dc\u0099\u0007\u00d0\u00f8\u00b6\u00d17c\u00b3mo\u00b7\u00c5\u00ac\u00b4\u00aa\u00b8\u00aahV\u00d9,\u00b7g/J\u00deyRT\u00f6N\u00a3vm\u00e7\u00bd\u00ce\u00aaZ\u00ccr\u00c3C\u00d8\u00ac\u00e5\u00ef\u00c0q\u00b7\u00daq\u00da\u00a3\u00ef\u00ce\u00e9\u00ac\u008a\u00f1\u00a8\u00dcR\u00a0\u00e0Lr\u00d4\u00d2\u00bd\"\u00be7\u00c90\u00be\u00ab3p\u00c5\u009f\u0093\u00d8\u00ab,)Wk}\u00c8\u00a2\u000f\u00e4\u000b\u00c7\u001a*\u007f;G\u00d3=\u008e\u00aa\u00d3\u00e8\u00d5|\u00f0\u0089\u0097\u00e4\u00e3y\u00af\u00fe~\u0084\u00fb\u001c\r\u0018x\u00f2\u00a7\u009e\u00f8sy6\u0084\u00b4\u00f5\u00c0a\u00a2\u00e7\u0085\u009f\u00cc\u0006\u00ce\u009a\u00fce,\u00b9\u00eaMA.+}\u00e4\u00a9E\u009a\u00b9\u0084\u00c5bW;@\u00cfRh\u00a1\u0095[Z\u00e7k\u00f9)\u00b92\u00ca\r\u00fbr\u00f8\u00a2\u00cf\u001eQ\u00bd\u00f5\u00cd!\u00f2\u00a3\u00bez\u00e3\u009bC\u00e4\u000f\u00ab\u00bc\u00f9\u00cd!\u00f2\u00a5}\u00f8\u009bCu\u001b\u00f5R\u00cfG\u00a4x\u009a\u00ffY{\u00bfQ\u0013\u00f2]M\u0018gR4\u00fe\u00de\u00aa=\u00aa\tO\u00fb\u00dcP\u00bf\u00df\u00be\u00ff\u00ee\u0014K\u00d58\u00cf\u00ad|\u00f2\u00cc\u000e\u00856\u00bd\u00ee\u00d4\u00f6\u0006\u00bb\u0093\u009av\u00b7\u00f3UVG\u00f2\u00c4\u0099\u00e2Kd\u00e0z\u00b7\u00a7i9\u00e9\u00bb\u00e7\\\u0002\u009e\u00fb\u00bf\u008c\u0018\"D'2\u00f0\u00f1\u0019\u0019Lt\u009a#F\u00f2\u00bd\u00d6NB\u00a9bnTB\u00cc\u001a\u000be\u00d0\u00d0\u000b\u00fbPS\u008aB9\u00f9\u008e\u00cae|n\u0092B\u0017I\u00aev!\u00ce\u00dc\u00fa\u008d\baT+\u009f:\u00e1\u00c7\u00cfe\u008a\u001b\u00b6M\u00b1\u00c8\u00e6\u008f\u0083\u0019\u00c5<m\u0005=\u00b7?\u008eQ\u00c7{)\u0096g\u00df{\u00bc\u00dahO\u00d9\u0018\u00d8\u00b7z#%\u00ff\u00ec\u00e9\u00db'\u00f7)}\u00a0\u00de\u00e8\u007f[o\u0084-\u0016\u00a2\u0014R\u00a0y\"v\u00e6-\u00b3\u008aM)\u0086\u00a0\u00a7\u00b3\u00aam~\rhC^\u009f\u00d3\u00a5\u0097xK\u00af\u00f0h\u009e_\u0019\u00eb\u00ca\u00eeI\u0014\u00e4\u000f\u00d8/\u00fa(\u008f\u00b2\u0094\u00c5\u00a3ek\u00d6N\u0083^\u00bb\u00c5$G\u001e}\u0016A;}\u00ef\r)\u00c7\u0016\u00dcK\u00e7\u0011d\u00ab\u00ac\u009c\u00f2\u00a4\u00ab\u00e8\u00ea\u00f7x\u00f0\u00a3\u00fe\t5\u00c4\u00a0S\u001e,\u0083\u008f(2\u00fc\u0088\u008b\"`1\u00e3\u00b8K\u00be3\u00b2k!Q\u00d3\u001a\u00bd\u00c5p\u00c97q\u0080\u00d8\u0092\u00ccokb\u00d4Z\u00a5CN\u00ae\u00ba\u00d6\u00a3\u0004\u00e0\u0016\u001a\u00f7B\u00e2{4\u00abiT/\u0094G\u0006q\u001d\u00f9\r*\u00b9\u00a7\u00cfC,\u0014\u00a0$\u00fc\u00c1\u00dcC.Q\u0000\u00f6\u00e7]G\u001fE\u0001*\u00d4\u001f\\\u0017_\u00a2d\u00a1X\u00ebC\u00d8t\u00c5p\u00ca(\u00b6\u0018\u0003\u00a9\u00aa\u00e5\u008a\u00b7\u00f6n\u00e9\u00f1L>\u00eb\u0086\u00c9=A'\u00bd{\u00d6\u00e4\u00b0\u0003\u00eb)}\u0097\u00db}O=\u00dcv\u0006\u00c5\u0091\u0011\u0085U\u00ed\u00b0u\u00c7\u00f6r\u00bcs\u0085\u0093\u00ec#\u009e\r\u000b9\u00c5<p\u008ay\u00c6\u0097d\u0086\u00d6\u00fa\u00a9\u00b5\u00ef\u00c7=\u00fb/\u00d3\u001cp\u0011\u00a4\u0086p\u00e2\u00b7\u007f\u0016C_Z\u00bb}\u0003\u00ce\u000f\u009a57)\u00d68]`\u0084\u008b\u0086[>H\u00df\u008a\u009e\u000fo\u0016\u00bf\u008e\u00d2\u001d+z\u00f0\u00a0\u00a2nC\u00d1\u00bd\u00bd+>(\u00abX\u00bb\u00fd;\u008e\u00f0\u00e8\u000e9j\u0015\u001d\u00df\u00d2\u0016\u00ee\u0007m\u00c1\u00d4\u00adm\u00e8&2\u00c4z\u00f2t\u00b6&w\u00dc\u0083\u00bf\u00e2H[\u00c9s_W\u00f9\u00f9H,~}*d\u00a0p\u00035@\u00b7\u00e2\u00df\u009e\u00eaS1\u00d2\u001f\u00b2\u0096\u00af#\u0096\u00b1\u001bG\u008coN\u00f7\u00bb\u00b2\u00e6\u001e\u00aca\u008d\u00f7\u00a7\u0015\u00dc\u00e5.\u00d40l\u00cd\u00f3_.\u00d9\u00ec\u00c8\u00f8\u00a0:Y/\u0004!\u008f\u00d3\u0010$tn\u008b\"\u0018\u00d4\u00e2\u0019\u00bb\u00f7:%6\r\u0098\u0098\u000f\u00fa\u00e0E\"M\\#\u00ea\u00d8i$\u00e7\u0098u\u00eee7\u009b:#\u009cH!\u00ccJ\u00de\u00aa3\u008c>\u00e2\u00f1K\u0000n\u00ff\u00dd\u0094\u00e0\u00c6>)|\u00aaV\u0013\u0096\u00b5l\u0085r*\u00b5R\u0007\u00c9\u0012kcWS\u00ccB\\{\u000f\u00b99j\u00d28\u00b4\u0080\u00a1\u0004\u00ea5CN\u00cd{\u00c7\u00c1'O6\u00db\u00b3\u00ad\u00a4\u00eb\u00bd\u0016\u0001M\u00dfOVg\u00d4\u009e\u0019?\u00ef\u00df\u00f7u\u00c0\u00b0\u00be\u009e=\u00ac\u0099;}K\u001b\u00e6\u00b7\u00b4\u00cd.\u00ad\u009cv\u00edi\u00db\u00a3[\u0081\u009f\u00c1\u00b5,\u00d3\u00de\u009f\u0006\u00d9\u00cb\u00f3\u00f6-\u001b\u0080\u00ed\u001c\r\u00c1\u00c9\u001ejo\u00ce\u009fP\u009e\u00b6}\u00a1C\u00dc\u00a8z\u00896N\u009c\u00d4\u00abx'\u00e0I\u00a3vO\u00a2\u00da\u00bdS\u00f1<\u00ac\u00f0V\u00b7\u008c\u00f6\u00d4\u00c0Se\u00dc\u00a5\u0089\u00a8\u0098E~`\fS\u00c5\u00a2\u00a2~\u00e0Q\u00e2\u00c8Ga\u008d\u00ea\u00c7\u0018Q\u009b\u00d7Q3\u008d\u00ea\u00e6\u0098\u00b3\u0097#\u0086\u00b3p\u00f9\u00e6Y\u00d7\u0097G\u001e\u00c3r\u00ee\u00cfO\u00ba\u00f7\u00b6\u00fe17\u00b6\u00de\u00945{\u00d0>Q\u00a31K\u00da}\t\u00a5y\u00d1\u00aa\u00b4*\u00bc;\u000f\u00e5\u0099\u0080\u0099\u00e7WQ\u00a2w\u009e\u00bf\u00a8\u000f7\u0015\u00ef\u00f75\u00e0\u00adJ|w%GLk\u00f8K{\u00ceV\u00f705\u00ee\u00d0\u00f4\u00e2+/\u0017k;~\u00eb\u00e5\nc\u00c3A\u0019\u00d4\u00e2\u0016\u00def\u00ef\u0011\u00a8QW&\u00ef\u0017\u00df\u00cc\u00f8\u00b5\u00af\u00dfq&\u0007\u00d5\u00a8\u00f7\u00aed\r\u00d4\u007fP\u00df;o\u00bd\u00c8\\\u00917z\u00db\u008c\u00dc\u0097Hi\u00f5\u00a2\u00c5;\u008d\u001e\u0086L\u00f2\u00b8w\u00035}\u0093\u009es\u00a7\u0080I\u00c2F\u00d3\u000fk\u00d35\r\u00ee\u00ceXMn\u00b4\u00be+\u008f/\u00f7c\u00eb\u00e3%1\u00bc$\u00e8\u008aNC\u0016e\u00b6\u009d{N\u00a4\u0093o\u00eaY\u0002\u0011\u00daz\u001cD\u00979P\u00c8\u0098,\u00cb&j\u00ea\\&\u00ea\u00ca\u0016\u00a6\u0093v\u0094\u00c8\u0081\n\u00d5\u009a\u00d1CK\u0092\\\u0090\u00e6\u0014J\u00e9\u00c6)\u00edZ\u0094\u001d\u008f\u0090\u00b3\u00000\u00ff\u00fa\u009f\u00ff\u00f7\u00bf\u0001\u0000\u0000\u00ff\u00ff\\f\u008e\u001a\u00deg\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "GET",
                "uri": "https://ctrver.t.hmny.io/fetchContractCode?contractAddress=0xEa589E93Ff18b1a1F1e9BaC7EF3E86Ab62addc79&shard=0",
                "body": null,
                "headers": {
                    "User-Agent": [
                        "python-requests/2.28.1"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Access-Control-Allow-Headers": [
                        "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range"
                    ],
                    "X-Powered-By": [
                        "Express"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json; charset=utf-8"
                    ],
                    "Access-Control-Allow-Origin": [
                        "*"
                    ],
                    "Access-Control-Allow-Methods": [
                        "GET, POST, OPTIONS"
                    ],
                    "Server": [
                        "nginx/1.18.0 (Ubuntu)"
                    ],
                    "ETag": [],
                    "Access-Control-Expose-Headers": [
                        "Content-Length,Content-Range"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "52960"
                    ]
                },
                "body": {
                    "string": "{\"contractName\":\"GovernanceToken\",\"sourceCode\":\"// File: @openzeppelin/contracts/utils/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n// File: contracts/Authorizable.sol\\n\\npragma solidity 0.6.12;\\n\\n\\ncontract Authorizable is Ownable {\\n    mapping(address => bool) public authorized;\\n\\n    modifier onlyAuthorized() {\\n        require(authorized[msg.sender] || owner() == msg.sender);\\n        _;\\n    }\\n\\n    function addAuthorized(address _toAdd) public onlyOwner {\\n        authorized[_toAdd] = true;\\n    }\\n\\n    function removeAuthorized(address _toRemove) public onlyOwner {\\n        require(_toRemove != msg.sender);\\n        authorized[_toRemove] = false;\\n    }\\n}\\n\\n// File: contracts/GovernanceToken.sol\\n\\npragma solidity 0.6.12;\\n\\n\\n\\n\\n// The GovernanceToken\\ncontract GovernanceToken is ERC20, Ownable, Authorizable {\\n    uint256 private _cap;\\n    uint256 private _totalLock;\\n    uint256 public lockFromBlock;\\n    uint256 public lockToBlock;\\n    uint256 public manualMintLimit;\\n    uint256 public manualMinted = 0;\\n\\n    mapping(address => uint256) private _locks;\\n    mapping(address => uint256) private _lastUnlockBlock;\\n\\n    event Lock(address indexed to, uint256 value);\\n\\n    constructor(\\n      string memory _name,\\n      string memory _symbol,\\n      uint256 cap_,\\n      uint256 _manualMintLimit,\\n      uint256 _lockFromBlock,\\n      uint256 _lockToBlock\\n    ) public ERC20(_name, _symbol) {\\n        _cap = cap_;\\n        manualMintLimit = _manualMintLimit;\\n        lockFromBlock = _lockFromBlock;\\n        lockToBlock = _lockToBlock;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _cap;\\n    }\\n\\n    // Update the total cap - can go up or down but wont destroy previous tokens.\\n    function capUpdate(uint256 _newCap) public onlyAuthorized {\\n        _cap = _newCap;\\n    }\\n\\n    // Update the lockFromBlock\\n    function lockFromUpdate(uint256 _newLockFrom) public onlyAuthorized {\\n        lockFromBlock = _newLockFrom;\\n    }\\n\\n    // Update the lockToBlock\\n    function lockToUpdate(uint256 _newLockTo) public onlyAuthorized {\\n        lockToBlock = _newLockTo;\\n    }\\n\\n    function unlockedSupply() public view returns (uint256) {\\n        return totalSupply().sub(_totalLock);\\n    }\\n\\n    function lockedSupply() public view returns (uint256) {\\n        return totalLock();\\n    }\\n\\n    function circulatingSupply() public view returns (uint256) {\\n        return totalSupply();\\n    }\\n\\n    function totalLock() public view returns (uint256) {\\n        return _totalLock;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // When minting tokens\\n            require(\\n                totalSupply().add(amount) <= _cap,\\n                \\\"ERC20Capped: cap exceeded\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._transfer(sender, recipient, amount);\\n        _moveDelegates(_delegates[sender], _delegates[recipient], amount);\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterBreeder).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    function manualMint(address _to, uint256 _amount) public onlyAuthorized {\\n        require(manualMinted < manualMintLimit, \\\"ERC20: manualMinted greater than manualMintLimit\\\");\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n        manualMinted = manualMinted.add(_amount);\\n    }\\n\\n    function totalBalanceOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder].add(balanceOf(_holder));\\n    }\\n\\n    function lockOf(address _holder) public view returns (uint256) {\\n        return _locks[_holder];\\n    }\\n\\n    function lastUnlockBlock(address _holder) public view returns (uint256) {\\n        return _lastUnlockBlock[_holder];\\n    }\\n\\n    function lock(address _holder, uint256 _amount) public onlyOwner {\\n        require(_holder != address(0), \\\"ERC20: lock to the zero address\\\");\\n        require(\\n            _amount <= balanceOf(_holder),\\n            \\\"ERC20: lock amount over balance\\\"\\n        );\\n\\n        _transfer(_holder, address(this), _amount);\\n\\n        _locks[_holder] = _locks[_holder].add(_amount);\\n        _totalLock = _totalLock.add(_amount);\\n        if (_lastUnlockBlock[_holder] < lockFromBlock) {\\n            _lastUnlockBlock[_holder] = lockFromBlock;\\n        }\\n        emit Lock(_holder, _amount);\\n    }\\n\\n    function canUnlockAmount(address _holder) public view returns (uint256) {\\n        if (block.number < lockFromBlock) {\\n            return 0;\\n        } else if (block.number >= lockToBlock) {\\n            return _locks[_holder];\\n        } else {\\n            uint256 releaseBlock = block.number.sub(_lastUnlockBlock[_holder]);\\n            uint256 numberLockBlock =\\n                lockToBlock.sub(_lastUnlockBlock[_holder]);\\n            return _locks[_holder].mul(releaseBlock).div(numberLockBlock);\\n        }\\n    }\\n\\n    function unlock() public {\\n        require(_locks[msg.sender] > 0, \\\"ERC20: cannot unlock\\\");\\n\\n        uint256 amount = canUnlockAmount(msg.sender);\\n        // just for sure\\n        if (amount > balanceOf(address(this))) {\\n            amount = balanceOf(address(this));\\n        }\\n        _transfer(address(this), msg.sender, amount);\\n        _locks[msg.sender] = _locks[msg.sender].sub(amount);\\n        _lastUnlockBlock[msg.sender] = block.number;\\n        _totalLock = _totalLock.sub(amount);\\n    }\\n\\n    // This function is for dev address migrate all balance to a multi sig address\\n    function transferAll(address _to) public {\\n        _locks[_to] = _locks[_to].add(_locks[msg.sender]);\\n\\n        if (_lastUnlockBlock[_to] < lockFromBlock) {\\n            _lastUnlockBlock[_to] = lockFromBlock;\\n        }\\n\\n        if (_lastUnlockBlock[_to] < _lastUnlockBlock[msg.sender]) {\\n            _lastUnlockBlock[_to] = _lastUnlockBlock[msg.sender];\\n        }\\n\\n        _locks[msg.sender] = 0;\\n        _lastUnlockBlock[msg.sender] = 0;\\n\\n        _transfer(msg.sender, _to, balanceOf(msg.sender));\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @dev A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(\\n        address indexed delegator,\\n        address indexed fromDelegate,\\n        address indexed toDelegate\\n    );\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator =\\n            keccak256(\\n                abi.encode(\\n                    DOMAIN_TYPEHASH,\\n                    keccak256(bytes(name())),\\n                    getChainId(),\\n                    address(this)\\n                )\\n            );\\n\\n        bytes32 structHash =\\n            keccak256(\\n                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\n            );\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(\\n            signatory != address(0),\\n            \\\"GovernanceToken::delegateBySig: invalid signature\\\"\\n        );\\n        require(\\n            nonce == nonces[signatory]++,\\n            \\\"GovernanceToken::delegateBySig: invalid nonce\\\"\\n        );\\n        require(now <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            blockNumber < block.number,\\n            \\\"GovernanceToken::getPriorVotes: not yet determined\\\"\\n        );\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld =\\n                    srcRepNum > 0\\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\\n                        : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld =\\n                    dstRepNum > 0\\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\\n                        : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber =\\n            safe32(\\n                block.number,\\n                \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\"\\n            );\\n\\n        if (\\n            nCheckpoints > 0 &&\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\n        ) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\n                blockNumber,\\n                newVotes\\n            );\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"compiler\":\"0.6.12\",\"contractAddress\":\"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\",\"abi\":[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"type\":\"string\",\"name\":\"_name\",\"internalType\":\"string\"},{\"type\":\"string\",\"internalType\":\"string\",\"name\":\"_symbol\"},{\"name\":\"cap_\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"_manualMintLimit\"},{\"internalType\":\"uint256\",\"name\":\"_lockFromBlock\",\"type\":\"uint256\"},{\"name\":\"_lockToBlock\",\"internalType\":\"uint256\",\"type\":\"uint256\"}]},{\"name\":\"Approval\",\"type\":\"event\",\"anonymous\":false,\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"owner\",\"indexed\":true},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"name\":\"value\",\"internalType\":\"uint256\",\"indexed\":false}]},{\"anonymous\":false,\"name\":\"DelegateChanged\",\"inputs\":[{\"name\":\"delegator\",\"internalType\":\"address\",\"type\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"fromDelegate\",\"indexed\":true,\"internalType\":\"address\"},{\"type\":\"address\",\"internalType\":\"address\",\"indexed\":true,\"name\":\"toDelegate\"}],\"type\":\"event\"},{\"type\":\"event\",\"name\":\"DelegateVotesChanged\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"indexed\":true,\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\",\"indexed\":false},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"newBalance\",\"indexed\":false}],\"anonymous\":false},{\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"to\",\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"name\":\"Lock\",\"anonymous\":false,\"type\":\"event\"},{\"anonymous\":false,\"name\":\"OwnershipTransferred\",\"type\":\"event\",\"inputs\":[{\"indexed\":true,\"type\":\"address\",\"name\":\"previousOwner\",\"internalType\":\"address\"},{\"name\":\"newOwner\",\"internalType\":\"address\",\"indexed\":true,\"type\":\"address\"}]},{\"type\":\"event\",\"anonymous\":false,\"name\":\"Transfer\",\"inputs\":[{\"indexed\":true,\"type\":\"address\",\"internalType\":\"address\",\"name\":\"from\"},{\"internalType\":\"address\",\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false,\"internalType\":\"uint256\"}]},{\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"type\":\"function\",\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"stateMutability\":\"view\"},{\"outputs\":[{\"name\":\"\",\"internalType\":\"bytes32\",\"type\":\"bytes32\"}],\"type\":\"function\",\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"stateMutability\":\"view\"},{\"inputs\":[{\"type\":\"address\",\"name\":\"_toAdd\",\"internalType\":\"address\"}],\"name\":\"addAuthorized\",\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"outputs\":[]},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"internalType\":\"address\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"nonpayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"type\":\"function\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"stateMutability\":\"view\"},{\"name\":\"balanceOf\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"account\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"\"}]},{\"name\":\"checkpoints\",\"inputs\":[{\"name\":\"\",\"internalType\":\"address\",\"type\":\"address\"},{\"type\":\"uint32\",\"name\":\"\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"fromBlock\",\"internalType\":\"uint32\",\"type\":\"uint32\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"votes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"inputs\":[],\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"decimals\"},{\"name\":\"decreaseAllowance\",\"inputs\":[{\"type\":\"address\",\"name\":\"spender\",\"internalType\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}]},{\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"addedValue\"}],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}],\"name\":\"increaseAllowance\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"inputs\":[],\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"lockFromBlock\"},{\"name\":\"lockToBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[]},{\"type\":\"function\",\"inputs\":[],\"stateMutability\":\"view\",\"name\":\"manualMintLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"manualMinted\",\"inputs\":[],\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"type\":\"function\"},{\"name\":\"name\",\"inputs\":[],\"type\":\"function\",\"outputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"view\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"name\":\"nonces\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"\"}],\"type\":\"function\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"type\":\"uint32\",\"name\":\"\"}],\"inputs\":[{\"name\":\"\",\"internalType\":\"address\",\"type\":\"address\"}]},{\"name\":\"owner\",\"type\":\"function\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"inputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"name\":\"removeAuthorized\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_toRemove\",\"internalType\":\"address\"}]},{\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"renounceOwnership\",\"inputs\":[],\"type\":\"function\"},{\"name\":\"symbol\",\"inputs\":[],\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}]},{\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"inputs\":[]},{\"stateMutability\":\"nonpayable\",\"name\":\"transfer\",\"type\":\"function\",\"inputs\":[{\"type\":\"address\",\"name\":\"recipient\",\"internalType\":\"address\"},{\"name\":\"amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"outputs\":[{\"type\":\"bool\",\"name\":\"\",\"internalType\":\"bool\"}]},{\"inputs\":[{\"type\":\"address\",\"name\":\"sender\",\"internalType\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\",\"internalType\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"type\":\"function\",\"name\":\"transferFrom\",\"stateMutability\":\"nonpayable\",\"outputs\":[{\"name\":\"\",\"internalType\":\"bool\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"outputs\":[],\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"newOwner\",\"internalType\":\"address\"}]},{\"inputs\":[],\"name\":\"cap\",\"type\":\"function\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"inputs\":[{\"name\":\"_newCap\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"capUpdate\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockFrom\",\"type\":\"uint256\"}],\"outputs\":[],\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"name\":\"lockFromUpdate\"},{\"name\":\"lockToUpdate\",\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"inputs\":[{\"name\":\"_newLockTo\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[],\"name\":\"unlockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}]},{\"inputs\":[],\"name\":\"lockedSupply\",\"stateMutability\":\"view\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[],\"name\":\"circulatingSupply\"},{\"type\":\"function\",\"name\":\"totalLock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"type\":\"function\",\"outputs\":[],\"name\":\"mint\"},{\"outputs\":[],\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_amount\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"name\":\"manualMint\",\"type\":\"function\",\"stateMutability\":\"nonpayable\"},{\"name\":\"totalBalanceOf\",\"stateMutability\":\"view\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"type\":\"function\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\",\"internalType\":\"address\"}],\"name\":\"lockOf\"},{\"name\":\"lastUnlockBlock\",\"stateMutability\":\"view\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"_holder\"}],\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"lock\",\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"type\":\"uint256\",\"internalType\":\"uint256\",\"name\":\"_amount\"}],\"stateMutability\":\"nonpayable\",\"outputs\":[],\"type\":\"function\"},{\"inputs\":[{\"type\":\"address\",\"name\":\"_holder\",\"internalType\":\"address\"}],\"name\":\"canUnlockAmount\",\"type\":\"function\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"name\":\"unlock\",\"type\":\"function\"},{\"name\":\"transferAll\",\"inputs\":[{\"name\":\"_to\",\"internalType\":\"address\",\"type\":\"address\"}],\"type\":\"function\",\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"name\":\"delegates\",\"type\":\"function\",\"stateMutability\":\"view\",\"inputs\":[{\"type\":\"address\",\"internalType\":\"address\",\"name\":\"delegator\"}],\"outputs\":[{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"\"}]},{\"outputs\":[],\"stateMutability\":\"nonpayable\",\"inputs\":[{\"internalType\":\"address\",\"type\":\"address\",\"name\":\"delegatee\"}],\"name\":\"delegate\",\"type\":\"function\"},{\"name\":\"delegateBySig\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"delegatee\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expiry\",\"internalType\":\"uint256\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"type\":\"uint8\",\"name\":\"v\"},{\"type\":\"bytes32\",\"internalType\":\"bytes32\",\"name\":\"r\"},{\"name\":\"s\",\"internalType\":\"bytes32\",\"type\":\"bytes32\"}],\"outputs\":[],\"type\":\"function\"},{\"type\":\"function\",\"inputs\":[{\"name\":\"account\",\"internalType\":\"address\",\"type\":\"address\"}],\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\",\"name\":\"\"}],\"stateMutability\":\"view\",\"name\":\"getCurrentVotes\"},{\"type\":\"function\",\"stateMutability\":\"view\",\"name\":\"getPriorVotes\",\"outputs\":[{\"name\":\"\",\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"inputs\":[{\"name\":\"account\",\"internalType\":\"address\",\"type\":\"address\"},{\"name\":\"blockNumber\",\"internalType\":\"uint256\",\"type\":\"uint256\"}]}],\"libraries\":[],\"constructorArguments\":\"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000019d971e4fe8401e74000000000000000000000000000000000000000000000000000a968163f0a57b40000000000000000000000000000000000000000000000000000000000000015b74cf00000000000000000000000000000000000000000000000000000000024c0e8f0000000000000000000000000000000000000000000000000000000000000005566970657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055649504552000000000000000000000000000000000000000000000000000000\",\"cached\":{\"ttl\":1662403357957,\"cached\":true},\"proxyDetails\":null}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "1257"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00dcV\u00dbn\u001cG\u000e}\u00df\u00cf\u0098gc\u00c1{\u0091\u00fe\u009b\u00ae\u001b\u00b0\u008b\u00c5\u00ee\u00c2N\u0080\u0000A\u00fe=`U\u008f43\u0092b)v^\"\u00d9P\u000f\u00a7\u009a<<$\u000f\u00eb\u00d7\u00cb\u00bf\u00bf\u00fe\u00ef\u00bf_\u00fe\u00df.\u009f/\u00f4O\u00b8|\u00ba\u00fc\u00ab_>c\u0098}\u00ba|\u0019_\u007f\u00fe\u00cfO\u0097\u00cf\u0017\u00f8\u00c5\u00c0\u00c1@@\u00c9\u0000\u0084\r\u00c1\u0010\u00a0\u0081\u0016\u0003\u0000V\u0083\u0001\u00d8\u001c\u008c\u0019\u00b9\r\u00b5\u0082\u0098'\u008ahI\u00eb\u0011\u00a0\u00d1j\u00ddV\u0019\u000fV1\u0004\u00ea\u00b1\u00ad\u001d\u0006C\u00af\u00b0\u00ac\u008c\u00f3\u00b4v\u00a3\u00d1yl+\u0015-\u000b\u00c1T\u00d3z\u0017w\u00f9\u00d2\u00d3W\u0081\u0003\u009c\u0018\u00b7\u00d5O4\u00a1\u00dd\u00a3\u00caim\u00f2\u00e8\u000b\u001d\rz\u00ef\u001b\u00ed\u00a1\u00fb\u00ad'k\u00be\u0085\u00d5\u00b7\u0095\u00b8z\u00a1\u00ab\u00b5\u009fhi\u00e0Q\u00bal+\u00d1|\u008c\u00006{\u001f\u00c0\u00eb{\u00e8'.\b\u001dG\u00a9\u00db\u008a:n\u00dfb;\u009f\u00b7\u00ad'\u000b\u00b6\u00be\u0001\u00d0\u009aUp\u0098]+\u008b\u0003j\u009e\u0019gu\u00b6]W\u00c5F\u00e4{u\u00e4{YO\u0007E\u0003\u0002\u0007'%gEGg\u00c0\u00fd\u001c\u0018\u00e4\u001c\u0014\u0090\u00b6@W\u00c0\u00c8\u00b3\u00ec\u009c\u009e\u00b5:;\u00e2\u008e\u0087\u00c4Z\u001c=?\u00a2\u00b3SzI\u00df\u0090,\"\u00d4\u008c\u00a9\u00b0\u007fc\u00fd\u00cf\u00b3\u0001\u00068\u00d1N\u00d4\u00a8\u0090\\8\u0001ol\u0080\u0019\u008b\u0000xy\u00018\u00801\u00d0\u00fc\u00c9{\u00e4;U!h\u00fb^}\u008a\u000e\u0081\u00c0\u0001\u0093o8A;^p\u0082\u0087dO;\u00b0\u00e5?\u0081\u00e7\u008c\u001c\u00efO\u0017\u009e\u00ef\u00fcqdE\u00cb\u00dc\u0012!\u00a77\u00b1\u00e3\u0096\u00f5@T\u00d4d]\u0093S\u008c\u00ccp\u00e7\u00f3\u0080y\u00f5\u00e7\u0003\u00e6U\u007f\u00e9\u00fd\u00de\u00e3{\u00bc\u008d\u00fa-\u0006\u00ec\u0099\u0001\u0002\u00fa\u001e\u0006\u001c\u00d1b\u00f7\u0017&\u000b\u0001\u0081\u009b\u0015ybe\u00e0\u00ea\u00ee+>\u00e2\u0097\u00f8\u00b2\u00dbo\u00f0\u00d1\r>}\u00c0\u00b7|fo\u00dc\u00f94}\u00e1\u0093l\u0018BA\u00bb\u009f\u00849\u0003\u0082\u00d0\u00de\u00c1$\u00c5\u00cb\u00f9\u00c2\u00b7\u0091\u001e\u00e5\u0011\u00e9\u00fb\u00b9D[X\u00e7}V\u00fd\u00ad\u00f9.\u00fc\u0090\u00ffx\u0099\u00ff\u00db]O\u00b3\u00fd\u00c0\u00ae/G,\u0086\u001f4\u00eb\t\u001b3\u007f\u008b\u00c5\u001bl,\u00c7\u008f\u00e9GXH\u0013_]3\u00c4K\u00cfR\u00bd\u00d6\u0086[\u00b5\u00cb\u00ea\u00e7'\u0081\u009c\u00acX*\u00a9\u00c2r\u00d5\u00ad@\u00cd\u00f9\u00c5}.P\u00b1\u00cc\u0081s\u00ce\u00d6$\u0088;HU\u008d)\u009d\u00e2\u00f0:\u009b\u00b5~\u0080\u008c\u00aa\u0015:71(\u008a\u008d\u0004\u00a8i\u00d3\u00d6\u0002!Z\u00d0\u00ee\u00b8\u00f4\u009e1\u000e\u00da\u00fd\t+\u00f6\u00adb\u001b\u0000-uT\u00b4=\u00d9\u0000@\u00e5\u00bdt\u00bc\u00f9\u00b32\u0013\u00b4H\f\f\u0092\u00ea\u009c\u00f9\u00baD\u00d6D\u0080R\u00d9]\u00d6\u00b9\u00dc\u0019\u008b\u00b3\u00a0X{\u00c3\u00c9\u00e9\u00ac\u00ac\u0018\u00ad\u00ad\u0096\u00ea\u009eU\u0015\u00de;\u001bam\u0010\u0015H_\u009c\u00cc]u\u00fc|+w$\u00e5\u00e7\u00ec$\u0080\u00ad\u00f3\u00f9\u00945\u00d1\u00ea\u00a8\u00b2b\u00a6\u00ed\u00dc \u00f9~z]\u001b[$76\u00ed\u00c9]\u00bbey{\u00de>\n\u00a7B\u00dcW]\u00ee\u00ab\u009e\u00fe\u00e8#\u001dVr\u008b\u00b9\u00ea\u00da\u0097\u008b\u0019!p\u000bP\u00f5\u00dc\u0089v\u00ed\u0093\u00e0\u0090d7\u0019,\u00d3\u009b\u00d6\u0081CG\u001d\u00adt\u00ad\u001de\u0016\u0014*\u001d\u0087\u00cb\u00e4\u00de\u00f3\u009e\u00d0`\u0096J\u00148\u00b4\u0012\u00c0\u00d1\u00bc\u0095\u00c65H\u0083v\u00ae\u00ab_X\u0017+Y\u008f\u0095\u00a9i\u0095\u0012\u00eb\u00ef\u00072a\u00b4d\u00e6\u00ca\u00c5\u009e\u0087\u0093\u0015$PqB\\UV\u00bc\u009b\u00df\u000f\u00c4\u0010\u00ccK\u00db\u00d2\u0081\u00c8\u00feP\u000f-\u001f\u009ahy@\u00f9j\u00fd\u0098]\u00b2\"\u00b1:&\u00b1\u007f\u00ff\u008c\u00a0\u00a0j]\u00f9[\n\u00f9_\u008f\u00f9\u0099\u00efV\u00ff<\u00df\u001f\u008f\u009c\u00aa\u00e3\u00bc\u0015I\u00f5C\u00f1 \u0095\u00e9\u008fTuG\\\u0011\u00fc\u001a!\u00f8\u009c\u00a2\u00a5\u000b\u00a99\u00e7\u0089\u0092\u00dd\u00ad\u00ban\u00a8{\u008e\u00f6\u00fd\u0094\u00cb\u00ec}\u0092\u00d2\u00d1\u00b1\u000ej\u001e\u00d5\u00a2Q\u0005\u00f3\u00d9\u00b8x?\u008eP\u00aaG\u0099h\u00dc\u00e4@4\u00f2\u00a9zH\u009fJ\\y\u00ccu\u00bf\u00bdW\u00dd\u00eb\u0014\u00f1\u00f5N\u00f9\u00ac\u0016\u00af\u00cd\u00c4Y#<kd\u00d1ok\u00f4\u00danyb\u0080\u00ce\u00fc\u00f4\u0089ct^^|6\u00d8\u001c\u00ac\r\u00b3~\u00d5\u00dd}b\u00f0U\u00c7PO\u00b5\u00b5\u00de\u00b4p\u00dfQy\u00ec\u00a7s\u00a3\u009e[\u00c3i\u00ab\u00a6\"s`\u0099e\u00b6\u00a9L\ru\u00c2a\u00bdB\u00ed\u00d6a\u0000{\u001dG\u00c1\u00ce\u00d0\u001d\u00bc\u0095\u001e\u00de*\u00d7Y\u00c8\u00fc\b\u00ad3\u00e5\u00b3\u009a\u00c6\u008b\u00fb\u00d1A\u009b\u00a9\u00dcM\u00b9\u00ad\u00f2\u00e6\u00b2\u0095\u00f66o\u00b8\u00dd\u00ac's\u00e7\u0019|m\u00cb\u00b9\u00b8\u00fd\u001dw\\2\u00b1n \u0096S\u00e7\u00f2|\u001b\u00be\u00ef\u00bb\u00c7Y\u0005\u0088\u00e5\u00f3\u00ec \u00c9o\u00f6\u00bc\u00e6\u00ad\u00f5\u0099\u00d19\u000e2\u00b1(`VX\u009d\b\u0089 p\u008c2XE*\u0094>\u0084\u000b\u00d6\u00a9\u00cd\",|\u008e2e\u00c6\u00818Jk\u00c0\u00a3\u001c\u00c7P\u00ea,\u00a31U\u00b4\u0006&\u0085mZ3\u0016\u00ce\u0004\u00b2D\u00cc\u0097\u00df\u00fe\u00f1{\u0000\u0000\u0000\u00ff\u00ff0\u00d2\u00e5\u00c9J\u0010\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "74"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b443\u00d7Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff~\u0093\u00b5r2\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x95d89b41\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "86"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b44\u00b3\u00d0Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0\u00c0\u00c4\u00d4\u00dc$\u00cd$\u00d5\u00c4\u0094\\\u0003\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ffr\u00d0\u0083\t\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "74"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b44\u00b3\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ffole52\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x313ce567\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "71"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b447\u00d0Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018\u001a)\u00d5r\u0001\u0002\u0000\u0000\u00ff\u00ffwfx\u00a4j\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_chainId\", \"params\": []}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "69"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "74"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b447\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a803653I61P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ffOYs\u00fe2\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_call\", \"params\": [{\"to\": \"0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a\", \"data\": \"0x06fdde03\"}, \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "100"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b447\u00d2Q*J-.\u00cd)Q\u00b2R2\u00a80\u00a0\b\u0018Q\u00a6\u00dd\u00c0 \u00c9\u00d4\u00dc\u00dc\u00c8\u00cc\u00d0\u00dc\u00c0\u00dc\u00c0\u00cc\u00d4\u00cc\u00c4\u00c8\u00c0$\u00cd$\u00d5\u00c4\u0094x\u0003\u0094j\u00b9\u0000\u0001\u0000\u0000\u00ff\u00ff\u00eb\u008c\u0000&\u00ea\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "514"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0\u00c2\u001cm\u0007c\u009bv\u00fd\f\u00ab;(\u00fdP\u007f}\u00e6\u00e9\u0007\u00ac\u00c0\u00ec#6-1\u0015oB\u00f2\u001e\t\rE\u00b5&\u00c5d4\u0097D\u008a\r\u00ab\u00af\u0089\u009a\u000b%zgrD\u00cd\u00ac)\u00d6 \u00de\u0006\u00e8\u000e\u0084_w\u009b\u00d2\u00c6\u0007J\u00ac&T\u008b\u00d0A\u001d\u00b6\u00f3\u00c8u\u00fe 2\u00b6i\u0082\u00d5v\u00d7\u00f7\u001d\u00d4\u00ddf\u00d7\u00f3\u00bc\u00bem\u009fx\u00fa65y\u00f8-\u0014V.\u00d0\u0081\u008e\u00c3\u00e6P1\u0085L\u0010\u0015\u00c7\u009aHY\u00a5\u00b0g\u00b55`\u0016S]B\u00ca\u00c5\u00f22\u00e9\u00fa\u0019Qve\u00d1\u00de\u000f\u00d7\u0013\u00ac\u00be\u00df\u0001?N\u0007\u00b3o\u00ecSn\u00d9\u00aab*\u00c8\u00a8\u00d8r\u00e1\u001a\u009b\u00da\u0096\u0002\u0097@,Rc~\u0094\u00f56>\t\u00cf\u00fcP2\u0017\u00c2\u00f9`3&rN\u00dd\u00f2}\u0090\u00fde+m\u007f\u0018\u00d1`\u0089~3\u00dc.\u00de(\u00f7S\u00eb`\u001en\u00d6u\u00b1\u0006\u00cc^D\u00c9\u0013\u000b\u0096F5\u00e5\u0012r\u00a5bB\u00d2jc\u0012\u00e6\u00ec\u00a9pT\f\u00b6:F\f\u0094\u00d4{v\u00a2\u009el\u00b1M\u00a1;\u00f3\u00ea\u000b\u00f2;M\u0092|s\u00c2\u0082\u00a9R\u0092\u00d0\u001c1\u00db\u00d0\u001a\u0011R&\u0013P\u00a2\u00f7\u00d9\u00a2\u00c2U\u0007\u00f3\u00c8\u00db\u0089\u00eb\u00bc\u001e\u00b6O\u00c1\u00a9X\u00eb\u00c9\u00d7\u001c\u00c8\u00a7\u001c\u00acV-\u00a6\u0014\u008e\u008e\u0085\u008dR\u00f1T\u009c\u0011\u0083\u001c]hY09\u0011\u000eA4\u0014O\u008b\u00c2g\u00b4O\u00d6\u0006\u00b8\u00bf:,\u00d9\u00c7~\u00f8\u00b3\u00b0G\u009eO/*x,\u00c7\u0093\t\u00a7\u0093\u009d\u00bf\u00fa/\u0007\u00bd\u0086\u00e3_\u00f4\u00af\u00c11A\u0097\u00e3\u00b4\u0005\u00e7{Gp\u00c6\u008a\u00ff\u000b\u00e8`\u009ay\u00de\u001dn\u00cd\u00b2\u00d7\u00f3p\u00e9\u00d9y\u00e3\u001d\u00be\u007f\u00f7;\u0000\u0000\u00ff\u00ff\u00d26\u0089M6\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "514"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0\u00c2\u001c]\u0007c\u009bv\u00fd\f\u00ab;(\u00fdP\u007f}\u00e6\u00e9\u0007\u00ac\u00c0\u00ec#6-1\u0015oB\u00f2\u001e\t\rE\u00b5&\u00c5d4\u0097D\u008a\r\u00ab\u00af\u0089\u009a\u000b%zgrD\u00cd\u00ac)\u00d6 \u00de\u0006\u00e8\u000e\u0084_w\u009b\u00d2\u00c6\u0007J\u00ac&T\u008b\u00d0A\u001d\u00b6\u00f3\u00c8u\u00fe 2\u00b6i\u0082\u00d5v\u00d7\u00f7\u001d\u00d4\u00ddf\u00d7\u00f3\u00bc\u00bem\u009fx\u00fa65y\u00f8-\u0014V.\u00d0\u0081\u008e\u00c3\u00e6P1\u0085L\u0010\u0015\u00c7\u009aHY\u00a5\u00b0g\u00b55`\u0016S]B\u00ca\u00c5\u00f22\u00e9\u00fa\u0019Qve\u00d1\u00de\u000f\u00d7\u0013\u00ac\u00be\u00df\u0001?N\u0007\u00b3o\u00ecSn\u00d9\u00aab*\u00c8\u00a8\u00d8r\u00e1\u001a\u009b\u00da\u0096\u0002\u0097@,Rc~\u0094\u00f56>\t\u00cf\u00fcP2\u0017\u00c2\u00f9`3&rN\u00dd\u00f2}\u0090\u00fde+m\u007f\u0018\u00d1`\u0089~3\u00dc.\u00de(\u00f7S\u00eb`\u001en\u00d6u\u00b1\u0006\u00cc^D\u00c9\u0013\u000b\u0096F5\u00e5\u0012r\u00a5bB\u00d2jc\u0012\u00e6\u00ec\u00a9pT\f\u00b6:F\f\u0094\u00d4{v\u00a2\u009el\u00b1M\u00a1;\u00f3\u00ea\u000b\u00f2;M\u0092|s\u00c2\u0082\u00a9R\u0092\u00d0\u001c1\u00db\u00d0\u001a\u0011R&\u0013P\u00a2\u00f7\u00d9\u00a2\u00c2U\u0007\u00f3\u00c8\u00db\u0089\u00eb\u00bc\u001e\u00b6O\u00c1\u00a9X\u00eb\u00c9\u00d7\u001c\u00c8\u00a7\u001c\u00acV-\u00a6\u0014\u008e\u008e\u0085\u008dR\u00f1T\u009c\u0011\u0083\u001c]hY09\u0011\u000eA4\u0014O\u008b\u00c2g\u00b4O\u00d6\u0006\u00b8\u00bf:,\u00d9\u00c7~\u00f8\u00b3\u00b0G\u009eO/*x,\u00c7\u0093\t\u00a7\u0093\u009d\u00bf\u00fa/\u0007\u00bd\u0086\u00e3_\u00f4\u00af\u00c11A\u0097\u00e3\u00b4\u0005\u00e7{Gp\u00c6\u008a\u00ff\u000b\u00e8`\u009ay\u00de\u001dn\u00cd\u00b2\u00d7\u00f3p\u00e9\u00d9y\u00e3\u001d\u00be\u007f\u00f7;\u0000\u0000\u00ff\u00ff\u0081M\u008c\u001a6\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionByHash\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "150"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "455"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00fft\u0090An\u001b1\fE\u00f7=\u0086\u00d6\u0083B\u00a4$\u008a\u00f2\t\u00daM\u00d1+\u0090\u0014\u00d9\u00b8\u008d\u00ed`l\u0017\u0001\u0082\u00dc\u00bd\u0018O\u00d0]\u00b8\"?\u00f0?\u00f8\u00df[\u00fa}\u00bd\u009c\u00d7\u0017K\u0087\u0084_sZ\u00d2q\u00a6\u0003\u008c\u00de\u0096\u00b4\u00fa\u00f5\u00fe|K\u0087\u00b7\u00a4\u00cf\u0017\u00fb\u00f3M\u00aeO\u00e9\u0090\u00f2k\u0007\u000f\u00ed\u00ac-\u0013\u00b7\u0006\b\u0019{\u0094\u00cc\u009ds\fe\fp\u00b0f\u008c^I{\u00abyt\u0088!\u00c1\u00ddh\u00b6Bi\u00d9\u0003\u007f\u00dcO\u00ea\u00eb#\u0012,\u0093\u0015HK\u008a\u00f5rzH\u0094\u00153\u00cd\u0098U\u00821$\u00a6J\u0093(F0f\u00b6\u00ca\u0080C\u008bl\u009e_r\u00ddS\n\u00b9\u00ed\u00f7\u00cf\u00f5h\u00be\u008b\u00bdr'\u00e7\u00bc\u0095{\u00fa\u00df!f)\r\u009b\r\u00c2\u00c6\u0083JXhV\u0095^eJ\u000e\u00d4\u0086Z\u00f3\u00cc \u00bd\u0092\u008f\t\\\u00e7\u0014\u00a2\u0019\u00a4\rc\u0003u~\u00b9\u00df\u001ea2r\u001b\u00a6\u009a?\u0019n^\u00a7L`C\u009e\u00e4\u0015E\n\u00b9#\u0002\u000e\u00cc\u0004\u00b3\u00b76\n\u00c4g\u00fe\u00cf\u00a66*\u0003\u0018k\u008d\u00ba\u00ddiI\u00e7\u00cb\u00f9\u00a37sZ\u00d2\u00fa\u0081\u00b2\u0007\u00a83O@dV\u00e9\u0080f\u0016\u00a6Q\u00da\u00acN1\u00b9X\u00e6\u00e1\u00b3@7)\u00a6e\u00e4\u0091}\u00e0t\u0083\u009e\u0096\u00b4\u0003.\u00e1\u0006\u00cdt\u00b0Rm\u0080\u00c1#wnC\u0098\u00bb9\u00d4\u00ae5J\u00af\u00ea\u00b3X\u00c1\u00a2\u0099\u00a0\u00a9\u0013\u00e4\u001c\u00ac\u008d\u00b6\u008fn\u00c7\u0093_orz\u00d9?C\u00af\u00c0\u00b4\u00e1\u00bc]\u001e\u008aK\u00e3\u00e1\u00a3D\u0000+\b\u0004\u00f8P\u00b1\u00eeQ\u009cI\u0094P\u00e6\u00b4>6\u00c7*\u00e7\u00ab\u00d8\u00edx9\u007f?O\u007f\u00dd\u0013\u00d3\u0092\u00fe>6#\u00b1\u00c1R6A\u009e\u00ef;\u0095\u009c\u00de\u00df\u00bf\u00fc\u000b\u0000\u0000\u00ff\u00ff\"\u00ca`C\u00f5\u0002\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getBlockByNumber\", \"params\": [\"0x1c06c31\", false]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "96"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "1160"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u0094\u0094\u00bd\u008e$\u00b9\r\u00c7s?F\u00c5\r\u0083\u00e2\u0097\u00c8\r\r\u0007\u000e\u001c\u0018\u0006.:\\@Q\u00d4m\u001b;\u00d3\u008b\u00e9^c\u00ec\u00c3\u00bd\u00bbQ]=s\u00b3\u009bYhT\u00ab(\u00e9\u00cf\u001f)\u00b2~\u00db\u00feu\u00bd<\u00bf|\u00cd\u00ed\u00d3\u0086\u007f\u0086\u00ed\u00b4\u009d\u00e7\u00f6\u00a9y\u00d7\u00d3\u00f6R\u00d7o_n\u00db\u00a7\u00df\u00b6\u00e7oO\u00a3^\u00b6O\u001b\u00bc\u00b6\u0004Mj\u00dbi\u00fb\u001c\u00d7\u00cfwSo\u00b5F\u00b7!\u00a0&\u00d2\u00b0\u0001\u00f6E`\u00dd`\u00f90\\\u00adZJ\u001a\u0016\u00eb\u00e8\u00c2\u00e0\u00bd-\u008fe=u\n\u00e9v\u00da\u00be\u00c6K=\u00df\u00fe\u00f6\u00a6\u00c8\u001as`\u000bK\u00ed\u00a2\u00e1\u00d1#<fO\u00a7\u0089k*F\u00d3\u001cN\u00d2H\u00a9[_<\t`\u00e6\n\u00cb\u00a0I\u00dbi{\u00be<g\u00dd\u00c5\u00e0\u0087\u00b1\u009d\u00b6\u00a7\u00f3\u00eb\u00bb\u00af\u001f\u0097\u00ff\u00df\u00b1\u009d\u00b6\u00eb\u00e7\u00a0\u009f\u009e\u00f3K]\u008f\u0014\u00cdL\u009ee\u00b3\u00b2\u00cb\u00ec\u0011\u00c3d\u0088\u00f6\u00a1\u0099\u0093[Lj\u00c8\u00d2\u0086\u00b3E\u00e7F\u000b\u00a21\u00ae\u00c90\u00d9\u0089\u00fbv\u00da\u00be\\~\u00bd\u00fe\u00e5\u00cb\u00e5\u00f2\u00f4@D\u0000\u00b0\u008f^C\u0001Z\u00ec3\u0004\u00be[\u001a?\u0096\u00da\u00e3\u00cf\u0000\u00f81g\u0084C\u00e3.\u00c2\u0000f\u00a0\u0087\u00ad\u00dd\u00cd@\u0000\u008f-\u00c7\u0011\u00db\u007f\u0006\u00b8\u009b\u00da\u00bb\u0010\u00ef\u00b6\u00fd\t\u00e0\u00c7\u0006h\u00bb\u00b6\u0001\u0003\u007f\u0087\u0087\u00d0\u00de\u00bd\u0003\u00e0\u009d\u001d\u0007=\u00d0\u00f0\u0001\u008a;\n\u00bemz\u007f\u00bc\u0081\u00e8\u001e\u00a0\u0091\u00dd\u00a3\u00c1c)\u00a1}tD\u001f_\u00f0\u0088\u00cfv88\u0080L?\u00a86xO\u00e3>\u00dd\u00bd?V\u00ec\u001e\u00ef\u0001\u00dc\u00b0\u00b5\u00b7\u00e3o\u0092\u00a8;\u00c1w7\u00f0\u00fe\u00c2o\u00d9j\u007fx\u00b1x\u00cb\u00c8~=\u00f6\u00c6l\u00ef\u00a7\u00fc\u00c7\u000b\u00c5\u000fl\u00f2\u00ee\u00fe\u0018{\u0089\u00dd\u00e2V\u00ff\u00bc\\n\u008f\u008e\u00f3\u000e\u00a9\u00d9<\u00c1\u00bajs\u0004E\u00c5a\u00ad\u0086d[d(\u0011\u008d\u008aI\u00a4[\u0091\u00ac\u0084Hs\u00ecD\u00ab\u00ee-\u00f0\u00fc\u00e8\u00e8\u00ea\u00c1\b\u00d3G3\u00a8X\u0003|\u0086\u0010r\u00d6\u00ca\u00c5:M\u001c\u00b9\u00d0\u00b6\u00d36\u00cfk\u009d\u00f3\u00db\u0097\u00db\u007f\u008e\u00ba\u00dcN[\u00bd\u00de^\u00e2\u00afq\u008b\u00bbe'=\u00ff\u00f7\u00e8\u00bbF\u00c1\u00dbi\u00fb5\u00ae\u007f??\u009d\u000fpN\u001e|\u000f\u00e8\u00d7\u00b8\u00fet\u00ady\u0084\u0003R\u00be\u00ef\u00fd\u00f7\u00cb:\u008e\u000eg\u00aa\u00bdGJ\u00bd#\u00d1\u00cc\u00ec\u00c0\u00d25\u00a7\u0015vd5\f\u0011mjJ\u00e5c\u009a4\u00077\u00e0\u00d1\\\u00e9\u0090\u00fa\u00c7\u00cb\u00e5r\u00e8\u008d\u00bd\u00b38G2w6\u00e7\u00b9\u0016\u00f4t\u0091\u0085X\u00b1\u0010\u00c0;j\u00faXZS\u00d7*\u00e9c\u0014\n-\u009eQ\u00a3\u00ab\u00a7\u0004\u0097\r\u00afBY:\n\u00a9\u00fb\u00da\u008b\u00d2][\u0083\u00e4\u0081k\u0016`\u0091\u00cd&Rmr\u00f9*G\u001a\u00ab!\u00a4u\u008b\fY\u0083\u00ad\u00a8w\u0094\u0089\u0083\u001c\u00a1\u009b\u00f6\u00a5\u00a5\u00bc\u008c3\u00dc3\u00e6\u00825\u00da\u001a}\u0096\u0092%f\u00c2\u001e\u00cf\u00ed\u00fcT\u00d7[<}\u00bd\u0007\u00a4X\u00dcL\u00d7\u00be\u00f0\u0012\u00cf\u00d7\u00c8\u00db\u00f9\u00f2|}/\u0090\u0012\u00a9)\rQ\te\u00068\u00f6\u00c4\u009ce\u0092\u0098<\u00c4\u0096\u00bb\u0084\u00b92\u00ad\u00dd\u007f%\u0018\u0013\"\u008d\u0014q\u00dc?A/\u0095u\u00fez\u00fbC3\u00a9\u00cb\u001a\u00c2\u0092Ek\u00a2\u0015\fBh\u00c6D&4\u00f7\u00e8\u00ca'\u00970\u00d1\u00a8R\u00f3,\u001d\u00dd\u00bc\u00cf\u00d1x\u00c8v\u00da\u00be=>\u0092?\u00ff\u00f2=\u00f7\u00f6\u00e9\u00e7\r^\u0091P\n\u0000)\u001bs\u00c4\u00f0l\u00da\u00c2\u0096kcL\u0092\u0014j:\u0089s\u00a8\u00c3b3\u00db\u000b\u009f\u009c\u0093\u0099i\u00c6v\u00da\u00e0uYx\u00ac\u0098\u00fb\u00d59L\u008a\u009e\u00c4\u0019\u00e2\\L\u0090\u00a48g\u0003\u00d4Yh\u00da\u00b5uT\u0016\u0081\u00da\u00bb\u00a3\u0018\u00ec.\u00d2\u00c4|\u0091\u00830\u001a\u000fl\u00c81\u0089\u00bc\u0003\u00aad\u008a\u00f7\u000e\u0011\u00b9Z_Dd\u001a2\u001d\u0015\u00calf\u00da\u00a0q\u0090\u00f4\u0085k\u008a\u00b5\u00d9\u0087\u00f1\u00ce<\u00c5\u00c9\u00fb\u00c0\u00d9:\u0018\u000eG\u00a3 \u00ef\u00a2:\u0099\u00067\u001c\u008bI\b\u0086\u000f\u0095C\u0084\u0094&\f\t)\u00edd\u00d8\u00b99jh\u00f9\u0002YXk\u00f2P\u008d\u00bd\u0088\u00e7\u0012_\u00cd\u00a7#\u00a9\u00b7%\u00a3\u00bb\u00f2\u0091\u0013\u00f2\u00c1]\n\u00a1\u00a6\u0096\r\u00eaD\u0002\t\u00b6\u001c\u00ac\u00c9\u00a8\u0019\u0082\u0003\u00d8\u00a64ZX\u00e8\u0003\u00c6\u001c\u00cb\u00c19*\u00f0 \u00e9k\u0012\tJ\u00ba\u00a2\u0098+\u00ad\\\u0003\u00c6\u0088\u00ce1\u0003\u0016\u000e\u00c1\u00c10\u00a1Eg-\u009f\u00cdx\u00ceP\u009dK\u0087\u00e0\u00ba\u008bp\u00f0\u0098{\u008b\u00c6\u0088\u0016\u00a9*\u00bd\u00d6\u0090\f#\u0082\u00e8\u00cciiR:\t\u00ad\u00abL\u008a\u00d5\u00f6\u0096\u00e59\u00c7\u008a\u008c\u00ed\u0097\u00df\u007f\u00ff\u00d3\u00ff\u0002\u0000\u0000\u00ff\u00ff\u0083\u0098\u00bc*\u00b4\b\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "514"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0\u00c2\u001cc\u0007c\u009bv\u00fd\f\u00ab;(\u00fdP\u007f}\u00e6\u00e9\u0007\u00ac\u00c0\u00ec#6-1\u0015oB\u00f2\u001e\t\rE\u00b5&\u00c5d4\u0097D\u008a\r\u00ab\u00af\u0089\u009a\u000b%zgrD\u00cd\u00ac)\u00d6 \u00de\u0006\u00e8\u000e\u0084_w\u009b\u00d2\u00c6\u0007J\u00ac&T\u008b\u00d0A\u001d\u00b6\u00f3\u00c8u\u00fe 2\u00b6i\u0082\u00d5v\u00d7\u00f7\u001d\u00d4\u00ddf\u00d7\u00f3\u00bc\u00bem\u009fx\u00fa65y\u00f8-\u0014V.\u00d0\u0081\u008e\u00c3\u00e6P1\u0085L\u0010\u0015\u00c7\u009aHY\u00a5\u00b0g\u00b55`\u0016S]B\u00ca\u00c5\u00f22\u00e9\u00fa\u0019Qve\u00d1\u00de\u000f\u00d7\u0013\u00ac\u00be\u00df\u0001?N\u0007\u00b3o\u00ecSn\u00d9\u00aab*\u00c8\u00a8\u00d8r\u00e1\u001a\u009b\u00da\u0096\u0002\u0097@,Rc~\u0094\u00f56>\t\u00cf\u00fcP2\u0017\u00c2\u00f9`3&rN\u00dd\u00f2}\u0090\u00fde+m\u007f\u0018\u00d1`\u0089~3\u00dc.\u00de(\u00f7S\u00eb`\u001en\u00d6u\u00b1\u0006\u00cc^D\u00c9\u0013\u000b\u0096F5\u00e5\u0012r\u00a5bB\u00d2jc\u0012\u00e6\u00ec\u00a9pT\f\u00b6:F\f\u0094\u00d4{v\u00a2\u009el\u00b1M\u00a1;\u00f3\u00ea\u000b\u00f2;M\u0092|s\u00c2\u0082\u00a9R\u0092\u00d0\u001c1\u00db\u00d0\u001a\u0011R&\u0013P\u00a2\u00f7\u00d9\u00a2\u00c2U\u0007\u00f3\u00c8\u00db\u0089\u00eb\u00bc\u001e\u00b6O\u00c1\u00a9X\u00eb\u00c9\u00d7\u001c\u00c8\u00a7\u001c\u00acV-\u00a6\u0014\u008e\u008e\u0085\u008dR\u00f1T\u009c\u0011\u0083\u001c]hY09\u0011\u000eA4\u0014O\u008b\u00c2g\u00b4O\u00d6\u0006\u00b8\u00bf:,\u00d9\u00c7~\u00f8\u00b3\u00b0G\u009eO/*x,\u00c7\u0093\t\u00a7\u0093\u009d\u00bf\u00fa/\u0007\u00bd\u0086\u00e3_\u00f4\u00af\u00c11A\u0097\u00e3\u00b4\u0005\u00e7{Gp\u00c6\u008a\u00ff\u000b\u00e8`\u009ay\u00de\u001dn\u00cd\u00b2\u00d7\u00f3p\u00e9\u00d9y\u00e3\u001d\u00be\u007f\u00f7;\u0000\u0000\u00ff\u00ff\u008b\u00cce\u00f06\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0x85E4DAd18c28d6e42aA36Ee221292061D755931f\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "66"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b44\u00b7\u00d0Q*J-.\u00cd)Q\u00b2R2\u00a8P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00f3x\u008a\u00e8*\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getCode\", \"params\": [\"0x60b206dFD4af82FaFdbA5Af3C619D0c48129b3a1\", \"latest\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "123"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "66"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00aaV\u00ca*\u00ce\u00cf+*HV\u00b2R2\u00d23P\u00d2Q\u00caLQ\u00b22\u00b44\u00b7\u00d4Q*J-.\u00cd)Q\u00b2R2\u00a8P\u00aa\u00e5\u0002\u0004\u0000\u0000\u00ff\u00ff\u00b0\u00b3,o*\u0000\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://a.api.s0.t.hmny.io/",
                "body": "{\"jsonrpc\": \"2.0\", \"method\": \"eth_getTransactionReceipt\", \"params\": [\"0x7fd33525c96258963fcfb0bba74ada0f2b52b40d01a746e9d184dda66df6b52f\"]}",
                "headers": {
                    "User-Agent": [
                        "Web3.py/5.30.0/<class 'web3.providers.rpc.HTTPProvider'>"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "Accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Length": [
                        "151"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "Vary": [
                        "Origin"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Content-Encoding": [
                        "gzip"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "514"
                    ]
                },
                "body": {
                    "string": "bytes_\u001f\u008b\b\u0000\u0000\u0000\u0000\u0000\u0000\u00ff\u00bcT=o\u00db@\f\u00dd\u00fb38\u000b\u00c5\u0091\u00f7\u00ed\u00ad]\u00da.\u00dd:\u0015\u0019x\u00c7c\u00eaV\u00b6\u0002I\u000e\f\u0004\u00f9\u00ef\u0085\u00e2\u0006\t\u001a\u00db\u008d\u0087\u00e6m\"\u00a1\u00c7{\u00ef\u0011\u00bc\u0083\u009f\u00d3\u00b0\u001do*\u00ac\u0080\u00de\u001b\u00e8`-\u00b0\u00c2\u009cL\u0007c\u009bv\u00fd\f\u00ab;(\u00fdP\u007f}\u00e6\u00e9\u0007\u00ac\u00c0\u00ec#6-1\u0015oB\u00f2\u001e\t\rE\u00b5&\u00c5d4\u0097D\u008a\r\u00ab\u00af\u0089\u009a\u000b%zgrD\u00cd\u00ac)\u00d6 \u00de\u0006\u00e8\u000e\u0084_w\u009b\u00d2\u00c6\u0007J\u00ac&T\u008b\u00d0A\u001d\u00b6\u00f3\u00c8u\u00fe 2\u00b6i\u0082\u00d5v\u00d7\u00f7\u001d\u00d4\u00ddf\u00d7\u00f3\u00bc\u00bem\u009fx\u00fa65y\u00f8-\u0014V.\u00d0\u0081\u008e\u00c3\u00e6P1\u0085L\u0010\u0015\u00c7\u009aHY\u00a5\u00b0g\u00b55`\u0016S]B\u00ca\u00c5\u00f22\u00e9\u00fa\u0019Qve\u00d1\u00de\u000f\u00d7\u0013\u00ac\u00be\u00df\u0001?N\u0007\u00b3o\u00ecSn\u00d9\u00aab*\u00c8\u00a8\u00d8r\u00e1\u001a\u009b\u00da\u0096\u0002\u0097@,Rc~\u0094\u00f56>\t\u00cf\u00fcP2\u0017\u00c2\u00f9`3&rN\u00dd\u00f2}\u0090\u00fde+m\u007f\u0018\u00d1`\u0089~3\u00dc.\u00de(\u00f7S\u00eb`\u001en\u00d6u\u00b1\u0006\u00cc^D\u00c9\u0013\u000b\u0096F5\u00e5\u0012r\u00a5bB\u00d2jc\u0012\u00e6\u00ec\u00a9pT\f\u00b6:F\f\u0094\u00d4{v\u00a2\u009el\u00b1M\u00a1;\u00f3\u00ea\u000b\u00f2;M\u0092|s\u00c2\u0082\u00a9R\u0092\u00d0\u001c1\u00db\u00d0\u001a\u0011R&\u0013P\u00a2\u00f7\u00d9\u00a2\u00c2U\u0007\u00f3\u00c8\u00db\u0089\u00eb\u00bc\u001e\u00b6O\u00c1\u00a9X\u00eb\u00c9\u00d7\u001c\u00c8\u00a7\u001c\u00acV-\u00a6\u0014\u008e\u008e\u0085\u008dR\u00f1T\u009c\u0011\u0083\u001c]hY09\u0011\u000eA4\u0014O\u008b\u00c2g\u00b4O\u00d6\u0006\u00b8\u00bf:,\u00d9\u00c7~\u00f8\u00b3\u00b0G\u009eO/*x,\u00c7\u0093\t\u00a7\u0093\u009d\u00bf\u00fa/\u0007\u00bd\u0086\u00e3_\u00f4\u00af\u00c11A\u0097\u00e3\u00b4\u0005\u00e7{Gp\u00c6\u008a\u00ff\u000b\u00e8`\u009ay\u00de\u001dn\u00cd\u00b2\u00d7\u00f3p\u00e9\u00d9y\u00e3\u001d\u00be\u007f\u00f7;\u0000\u0000\u00ff\u00ff\u00b9\u00b9Aq6\u0006\u0000\u0000"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"blocks\", \"variables\": {\"token_id\": \"0xcf664087a5bb0237a0bad6742852ec6c8d69a27a\"}, \"query\": \"query blocks($token_id: ID!) {\\n        t29387825:\\n            token(id: $token_id, block: {number: 29387825}) {\\n              __typename\\n              derivedETH\\n            }\\n        b29387825:\\n            bundle(id: \\\"1\\\", block: {number: 29387825}) {\\n              ethPrice\\n              __typename\\n            }\\n        }\"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "449"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "graph-attestable": [
                        "true"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "148"
                    ],
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"b29387825\":{\"__typename\":\"Bundle\",\"ethPrice\":\"0.2193937228982400273770436531868526\"},\"t29387825\":{\"__typename\":\"Token\",\"derivedETH\":\"1\"}}}"
                }
            }
        },
        {
            "request": {
                "method": "POST",
                "uri": "https://graph.viper.exchange/subgraphs/name/venomprotocol/venomswap-v2",
                "body": "{\"operationName\": \"blocks\", \"variables\": {\"token_id\": \"0xea589e93ff18b1a1f1e9bac7ef3e86ab62addc79\"}, \"query\": \"query blocks($token_id: ID!) {\\n        t29387825:\\n            token(id: $token_id, block: {number: 29387825}) {\\n              __typename\\n              derivedETH\\n            }\\n        b29387825:\\n            bundle(id: \\\"1\\\", block: {number: 29387825}) {\\n              ethPrice\\n              __typename\\n            }\\n        }\"}",
                "headers": {
                    "user-agent": [
                        "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.81 Safari/537.38"
                    ],
                    "Accept-Encoding": [
                        "gzip, deflate"
                    ],
                    "accept": [
                        "*/*"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "authority": [
                        "graph.viper.exchange"
                    ],
                    "pragma": [
                        "no-cache"
                    ],
                    "cache-control": [
                        "no-cache"
                    ],
                    "sec-ch-ua": [
                        "\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\""
                    ],
                    "dnt": [
                        "1"
                    ],
                    "sec-ch-ua-mobile": [
                        "?0"
                    ],
                    "sec-ch-ua-platform": [
                        "\"macOS\""
                    ],
                    "origin": [
                        "https://info.viper.exchange"
                    ],
                    "sec-fetch-site": [
                        "same-site"
                    ],
                    "sec-fetch-mode": [
                        "cors"
                    ],
                    "sec-fetch-dest": [
                        "empty"
                    ],
                    "referer": [
                        "https://info.viper.exchange"
                    ],
                    "accept-language": [
                        "en-US,en;q=0.9"
                    ],
                    "Content-Length": [
                        "449"
                    ],
                    "Content-Type": [
                        "application/json"
                    ]
                }
            },
            "response": {
                "status": {
                    "code": 200,
                    "message": "OK"
                },
                "headers": {
                    "graph-attestable": [
                        "true"
                    ],
                    "Date": [],
                    "Content-Type": [
                        "application/json"
                    ],
                    "Strict-Transport-Security": [
                        "max-age=63072000; includeSubdomains; preload"
                    ],
                    "access-control-allow-headers": [
                        "Content-Type, User-Agent"
                    ],
                    "Server": [
                        "nginx/1.21.4"
                    ],
                    "X-Frame-Options": [
                        "DENY"
                    ],
                    "X-Content-Type-Options": [
                        "nosniff"
                    ],
                    "access-control-allow-methods": [
                        "GET, OPTIONS, POST"
                    ],
                    "Connection": [
                        "keep-alive"
                    ],
                    "Content-Length": [
                        "184"
                    ],
                    "access-control-allow-origin": [
                        "*"
                    ],
                    "Content-Security-Policy": [
                        "upgrade-insecure-requests"
                    ]
                },
                "body": {
                    "string": "{\"data\":{\"b29387825\":{\"__typename\":\"Bundle\",\"ethPrice\":\"0.2193937228982400273770436531868526\"},\"t29387825\":{\"__typename\":\"Token\",\"derivedETH\":\"0.09756155833171828459348849194961854\"}}}"
                }
            }
        }
    ]
}
